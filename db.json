{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"9afb93c90dd307114b5fa9ac44db66f50e690b25","modified":1535163743000},{"_id":"source/favicon.ico","hash":"e0f2456131dc7964e6a5bd2286ecf02d58da3227","modified":1535163743000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1535165263000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1535165263000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1535165263000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1535165263000},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1535165263000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1535165263000},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1535165263000},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1535165263000},{"_id":"themes/next/README.md","hash":"c1d6d1c6b75736b892e179865833ea58da5ca9d2","modified":1535165263000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1535165263000},{"_id":"themes/next/bower.json","hash":"beac259ba5ef7d199a45a142221dae7d34dbdc49","modified":1535165263000},{"_id":"themes/next/_config.yml","hash":"e84ba8e53734fb658b3b97f5220dabdff95f1900","modified":1535167974000},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1535165263000},{"_id":"themes/next/package.json","hash":"22a8e1a6259ee7452fe0d9a7a8952ad3ccabf719","modified":1535165263000},{"_id":"source/_drafts/JavaScript-小技巧（不定期更新）.md","hash":"c88b65d25bc98e4fc00b90e4a671d91578f9e3ef","modified":1535165617000},{"_id":"source/_drafts/es6-let-const.md","hash":"93e87e2d9d638ea7bdc800e3d4964bda9de84cde","modified":1535165601000},{"_id":"source/_drafts/What-the-heck-is-the-event-loop-anyway.md","hash":"ef9f3ed96fe26b6f434be98f5431d593ba473a13","modified":1535165637000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1535163743000},{"_id":"source/_drafts/setTimeout-setInterval.md","hash":"c33ea734bec254a6256c624136213f702302baae","modified":1535165631000},{"_id":"source/_drafts/event-loop-message-queue.md","hash":"8c848b3675398fad71a7a80c0e878aeba4fd2f44","modified":1535165607000},{"_id":"source/_drafts/移动端点击穿透问题小结.md","hash":"5a4ecbadc6cfcac03e02ab5cfa3b11dc98188967","modified":1535163743000},{"_id":"source/_posts/9-CSS-Hearts-for-Valentine.md","hash":"99a0fb47cafff9e5a6d92bb3a698587d9f5bf0e0","modified":1535165652000},{"_id":"source/_posts/IFE-2016-SP-task17.md","hash":"36806b635ea66d640e7ad0982310cf2bee05e05e","modified":1535163743000},{"_id":"source/_posts/IFE-2016-SP-task18.md","hash":"0b4c2bc051201d19bd947846d1a92fcd8b2c8b7f","modified":1535163743000},{"_id":"source/_posts/IFE-2016-SP-task29.md","hash":"33284045fef997200a3794dd4482b131d85f610f","modified":1535163743000},{"_id":"source/_posts/IFE-2016-SP-task20.md","hash":"41deb09409f5a358fd160fe3794c1eb18bdd6d4f","modified":1535163743000},{"_id":"source/_posts/IFE-2016-SP-task31.md","hash":"c5082271184002a15fa89ceecf355ef740422fcf","modified":1535163743000},{"_id":"source/_posts/IFE-2016-SP-task30.md","hash":"dc4ab67be2eceb772af551140095a1a872a63d18","modified":1535163743000},{"_id":"source/_posts/IFE-2016-SP-task33.md","hash":"513b3b72ddc779f3df5d4aae8a1bc947814f8f24","modified":1535163743000},{"_id":"source/_posts/IFE-2016-SP-task34.md","hash":"d45f9fb4b822dcb68d4f8ff19b3e37e87a0fe690","modified":1535163743000},{"_id":"source/_posts/IFE-2016-SP-task35.md","hash":"830f585b57c695e8e9c8dfce535d5161ed47c5e3","modified":1535163743000},{"_id":"source/_posts/LC-461-Hamming-Distance.md","hash":"1422e0bbac65d267a6c017d40921e35805f7601c","modified":1535163743000},{"_id":"source/_posts/Three-Column-Layouts.md","hash":"83c4c27c35883e540a2d8c09fbad7e3242d7bd33","modified":1535165707000},{"_id":"source/_posts/angular-cyclic-dependency-error-with-interceptor.md","hash":"b8f1b1d3c86352fc3b62e6c0609e2a25ecf3f089","modified":1535169572000},{"_id":"source/_posts/emoji-cheat-sheet.md","hash":"421c76b60a8dbb16c4757061ef4453842a14a905","modified":1535163743000},{"_id":"source/_posts/hello-world.md","hash":"dac577cf576dac8b2678127cf3b381fd8f4dd3d7","modified":1535164665000},{"_id":"source/_posts/hexo-render-markdown-it-and-its-plugins.md","hash":"57e6af8a02e7991b1641df6c6cf3710b425f11df","modified":1535163743000},{"_id":"source/_posts/this-keyword-in-setTimeout.md","hash":"6a8fd28ad43a6cdc8c6cd1407d68133538b1cdc6","modified":1535165701000},{"_id":"source/_posts/移动端-click-事件的-300ms-延迟.md","hash":"9a2de3692b5dfd449f728dd6ac1896a9ed43c935","modified":1535165747000},{"_id":"source/_posts/使用-JavaScript-操作-HTML-批量制作-Anki-卡片.md","hash":"bc9302c0338e480aa220acc84398432c0e49e2e1","modified":1535165736000},{"_id":"source/_posts/翻译-The-JavaScript-Event-Loop-Explained.md","hash":"cfe06c3817af146598c135b4f20158f971f36f7b","modified":1535168072000},{"_id":"source/tags/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1535163743000},{"_id":"source/tags/index.md","hash":"9984cd8abe3623816eb3f6e3f0b6472ccf14084a","modified":1535163743000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1535165263000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1535165263000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1535165263000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1535165263000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1535165263000},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1535165263000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1535165263000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1535165263000},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1535165263000},{"_id":"themes/next/layout/_layout.swig","hash":"1b59036ccb2ad571503b94587f458fad46775642","modified":1535165263000},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1535165263000},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1535165263000},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1535165263000},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1535165263000},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1535165263000},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1535165263000},{"_id":"themes/next/layout/post.swig","hash":"318249db246a57e9422875a2457c6acfce974ba5","modified":1535165263000},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1535165263000},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1535165263000},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1535165263000},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1535165263000},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1535165263000},{"_id":"themes/next/languages/ja.yml","hash":"509af6c38458a402d37b9beea3500e3b439aa153","modified":1535165263000},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1535165263000},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1535165263000},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1535165263000},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1535165263000},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1535165263000},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1535165263000},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1535165263000},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1535165263000},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1535165263000},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1535165263000},{"_id":"themes/next/scripts/helpers.js","hash":"a70bfad3efda76738dab12e28e8b75e3989ee3da","modified":1535165263000},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1535165263000},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1535165263000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1535165263000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1535165263000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1535165263000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1535165263000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535165263000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1535165263000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1535165263000},{"_id":"themes/next/docs/ru/README.md","hash":"edfe0cfb8b2c9f0effd3beb868af9bfd0fabb3a6","modified":1535165263000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1535165263000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1535165263000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1535165263000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1535165263000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1535165263000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1535165263000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1535165263000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1535165263000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"46b264623af21211a0a9c4ba0cf1318a80eeb9fb","modified":1535165263000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1535165263000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1535165263000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1535165263000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1535165263000},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1535165263000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"eafff2d623af8991844f34819a60e37ac11ef245","modified":1535165263000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"05cdaf9b6cb32afd442b228cd247aaf9468a31ed","modified":1535165263000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1535165263000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1535165263000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1535165263000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1535165263000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1535165263000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1535165263000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1535165263000},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1535165263000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1535165263000},{"_id":"themes/next/layout/_macro/post.swig","hash":"27922af64ecb9db9a28bcf1c98fb68b26bf0b67a","modified":1535165263000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1535165263000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1535165263000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1535165263000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1535165263000},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1535165263000},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1535165263000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1535165263000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1535165263000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1535165263000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1535165263000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1535165263000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1535165263000},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1535165263000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1535165263000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1535165263000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1535165263000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1d59b968af4b8d147f8bc9bc295d596e41be8348","modified":1535165263000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1535165263000},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1535165263000},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1535165263000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1535165263000},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1535165263000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1535165263000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1535165263000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1535165263000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1535165263000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1535165263000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1535165263000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1535165263000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1535165263000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1535165263000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1535165263000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1535165263000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1535165263000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535165263000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1535165263000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535165263000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1535165263000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1535165263000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1535165263000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535165263000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535165263000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535165263000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535165263000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535165263000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535165263000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535165263000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1535165263000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1535165263000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1535165263000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1535165263000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1535165263000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1535165263000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1535165263000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1535165263000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1535165263000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1535165263000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1535165263000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1535165263000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1535165263000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1535165263000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1535165263000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1535165263000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1535165263000},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1535165263000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1535165263000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1535165263000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1535165263000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1535165263000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1535165263000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1535165263000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1535165263000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1535165263000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1535165263000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1535165263000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1535165263000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1535165263000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1535165263000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1535165263000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1535165263000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1535165263000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1535165263000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"03e83f1311faafb7dddc2899042ed1cacd5c995e","modified":1535165263000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"88b5a808b6b254c6122444e9dc180d5cc459cb19","modified":1535165263000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"34421679cae6581697cd3ab7c3729eb220e3e3f5","modified":1535165263000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1535165263000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1535165263000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1535165263000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1535165263000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1535165263000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1535165263000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1535165263000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1535165263000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1535165263000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"51c2907e5c50c2614419b670fbdec183ae7f7f5d","modified":1535165263000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1535165263000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1535165263000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1535165263000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0b43ddd92e395342703550f629699c5e591fd68b","modified":1535165263000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1535165263000},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1535165263000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1535165263000},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1535165263000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1535165263000},{"_id":"themes/next/source/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1535165263000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1535165263000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1535165263000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1535165263000},{"_id":"themes/next/source/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1535165263000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1535165263000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1535165263000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1535165263000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1535165263000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1535165263000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1535165263000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1535165263000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1535165263000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1535165263000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1535165263000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1535165263000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1535165263000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1535165263000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1535165263000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1535165263000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1535165263000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1535165263000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1535165263000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fca5320e2644edcd663888863899d1b80352439b","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1535165263000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1535165263000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1535165263000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1535165263000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1535165263000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1535165263000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1535165263000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1535165263000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1535165263000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"549a8a0b5301d32acd86a97f17340cdfcd46fb63","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"ed9608d2740a33664eb703f806c218a4fc520087","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"cf2185a0ea170fd8450f592e859a6c941141e5ee","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c18c91ab3c60169ebe654c80c968fd8458786a3","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"e18b90c97aaff027e795f5a0cb10476a71bf1c3a","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1535165263000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1535165263000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1535165263000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1535165263000},{"_id":"public/tags/index.html","hash":"0fe414493a40b988da5b51d06906a3eb36c42183","modified":1535169976615},{"_id":"public/2017/02/14/9-CSS-Hearts-for-Valentine/index.html","hash":"6cf3bb281974df69889879c645742c4af942193c","modified":1535169976615},{"_id":"public/2017/02/03/IFE-2016-SP-task20/index.html","hash":"8cdc3321b2440f67d8d4d835205074488e00d438","modified":1535169976616},{"_id":"public/2016/11/21/hello-world/index.html","hash":"233ff5cd7dbafae60580c34425db9d9c9005c6b8","modified":1535169976616},{"_id":"public/archives/2016/index.html","hash":"974ea511fbf5f67e86312ae33d5f90737ec6c985","modified":1535169976616},{"_id":"public/archives/2016/11/index.html","hash":"ff4e6dd007b74c00423f3d529c1449aec06ab342","modified":1535169976616},{"_id":"public/archives/2016/12/index.html","hash":"08e6bbd392965898af11e0461ff39a094f374708","modified":1535169976616},{"_id":"public/archives/2017/page/2/index.html","hash":"99dece75074ed91523c0ad74cfa113effccb3ce1","modified":1535169976616},{"_id":"public/archives/2017/01/index.html","hash":"e0e197aa3c1775311039a777ed8f6feb321824eb","modified":1535169976616},{"_id":"public/archives/2017/02/index.html","hash":"266091a8a2375d4da2f74ecb9e798f4c3ee63175","modified":1535169976616},{"_id":"public/archives/2017/03/index.html","hash":"dc6d4a9628deb52d11ec93a58e0b8ca7e74320d6","modified":1535169976616},{"_id":"public/archives/2017/04/index.html","hash":"6eeb832b1b36570a2c0c3dd7ef0fad532202f0cb","modified":1535169976616},{"_id":"public/archives/2017/11/index.html","hash":"6efbfcaea6e03747d4145e6b4cba8554f46dceaf","modified":1535169976616},{"_id":"public/archives/2018/index.html","hash":"efc9ef119f7a1381b7e90299d61fab9738fc0a39","modified":1535169976616},{"_id":"public/archives/2018/08/index.html","hash":"99ac1c55ef7389503e6fab039da17b3056b40d36","modified":1535169976616},{"_id":"public/tags/JavaScript/index.html","hash":"2b748aeee53dbd35f13945de6e4e02ee743b4fb3","modified":1535169976617},{"_id":"public/tags/CSS/index.html","hash":"fe622a14bc9fce0b8f5029d43b67c4d40b12833b","modified":1535169976617},{"_id":"public/tags/IFE/index.html","hash":"279aa5781b6322857f5882ca5f90b5b67e7f060b","modified":1535169976617},{"_id":"public/tags/algorithm/index.html","hash":"3fade265b6d78ceaa0dee3baa3bb856a4d87cbbe","modified":1535169976617},{"_id":"public/tags/Angular/index.html","hash":"9bd6425a0ea3b378c8d08bd6a1dfcebf3c3477c0","modified":1535169976617},{"_id":"public/tags/emoji/index.html","hash":"8172b93ba76d9f0f0d677e61a972ff6c0042cd50","modified":1535169976617},{"_id":"public/tags/hexo/index.html","hash":"5b0721b1216805805417be4c06b489a5736c37d2","modified":1535169976617},{"_id":"public/tags/markdown/index.html","hash":"9caed038d8125879b75e20ebb4b6f2dd8d50b885","modified":1535169976617},{"_id":"public/tags/anki/index.html","hash":"020fc99ac03e89d8e7778aee851fecfc25c543ab","modified":1535169976617},{"_id":"public/tags/sublime/index.html","hash":"5245abd62632061ae3fa0203db9da41d9b055af4","modified":1535169976617},{"_id":"public/tags/HTML/index.html","hash":"a3a03e1e124f4e8a0e280201187be7698b17e9eb","modified":1535169976617},{"_id":"public/tags/mobile/index.html","hash":"9e26055642a3cb45fc0759e7c814af9ebde2f037","modified":1535169976617},{"_id":"public/2018/08/25/angular-cyclic-dependency-error-with-interceptor/index.html","hash":"f567ca82bad35e634297f1b07bbf85be00cddd5d","modified":1535169976617},{"_id":"public/2017/11/14/LC-461-Hamming-Distance/index.html","hash":"14917acf9836c4cb6b437e9796cc09f68f52df69","modified":1535169976617},{"_id":"public/2017/04/25/this-keyword-in-setTimeout/index.html","hash":"b9af9388c246b7668fcd150990e8d3c322a429e4","modified":1535169976617},{"_id":"public/2017/04/21/Three-Column-Layouts/index.html","hash":"b295f46c8081c4ddf3d6e1e05a0e644af1c995ec","modified":1535169976618},{"_id":"public/2017/04/13/翻译-The-JavaScript-Event-Loop-Explained/index.html","hash":"bd30bd8ad547548ed423a69d3e5062599dc3ae12","modified":1535169976618},{"_id":"public/2017/03/27/移动端-click-事件的-300ms-延迟/index.html","hash":"b5634165ba0e71980dbf8935df1f7002e5dc6b8e","modified":1535169976618},{"_id":"public/2017/02/27/使用-JavaScript-操作-HTML-批量制作-Anki-卡片/index.html","hash":"01e19d48e9d79357998e7e7a1b52ca13a1dc26c8","modified":1535169976618},{"_id":"public/2017/01/27/IFE-2016-SP-task31/index.html","hash":"173588dadf998a25e36667ff6bd67f728f660ace","modified":1535169976618},{"_id":"public/2017/01/26/IFE-2016-SP-task30/index.html","hash":"1fc119c891652d9a8a934f3f50e27e814da3879b","modified":1535169976618},{"_id":"public/2017/01/20/IFE-2016-SP-task35/index.html","hash":"6866d157817727c29e86797e7cd303dadd0bdcf4","modified":1535169976618},{"_id":"public/2017/01/11/IFE-2016-SP-task29/index.html","hash":"696d32ac56659487cd6efa073c1f1a9ad5bece31","modified":1535169976618},{"_id":"public/2017/01/08/IFE-2016-SP-task34/index.html","hash":"d33c2db4750342a141344925d8b45c9cd22b2bb3","modified":1535169976618},{"_id":"public/2017/01/07/IFE-2016-SP-task33/index.html","hash":"eff5788ca1d360c7b293e2b5a286e1bfc48ed0c5","modified":1535169976618},{"_id":"public/2016/12/26/emoji-cheat-sheet/index.html","hash":"e2f5609a169c0b33f93f65956b6e04c5f1338d6e","modified":1535169976618},{"_id":"public/2016/12/26/IFE-2016-SP-task18/index.html","hash":"69e43110d51a331c3cc02b73afdcb89efb7d5acd","modified":1535169976618},{"_id":"public/2016/12/24/hexo-render-markdown-it-and-its-plugins/index.html","hash":"1b96ff176eb0c31ae0cb432c13f510c5c6fdda28","modified":1535169976618},{"_id":"public/2016/12/24/IFE-2016-SP-task17/index.html","hash":"8ff69c13515f4a499775e9a8122ad07462f1c7b5","modified":1535169976618},{"_id":"public/archives/index.html","hash":"c9bfe5d43756851553cff188e446b2d7e5f91d71","modified":1535169976618},{"_id":"public/archives/page/2/index.html","hash":"9043dc97abcdfb1ea750e9a3ba5a720384405860","modified":1535169976619},{"_id":"public/archives/2017/index.html","hash":"1ccca2e5f7526eb9f92ace224d6ebfd085f0fe74","modified":1535169976619},{"_id":"public/index.html","hash":"9d80aefb97d6e8e91e3c3fd6c68943918a0df150","modified":1535169976619},{"_id":"public/page/2/index.html","hash":"def55dcd3a0dcfa4a538151f0fe0564e2f2dc6e5","modified":1535169976619},{"_id":"public/favicon.ico","hash":"e0f2456131dc7964e6a5bd2286ecf02d58da3227","modified":1535169976623},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1535169976624},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1535169976624},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1535169976624},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1535169976624},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1535169976624},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1535169976624},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1535169976624},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1535169976624},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1535169976624},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1535169976624},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1535169976624},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1535169976624},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535169976624},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1535169976624},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535169976624},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1535169976624},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1535169976624},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1535169976624},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1535169976625},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1535169976625},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1535169977143},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1535169977146},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1535169977157},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1535169977157},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1535169977157},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1535169977157},{"_id":"public/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1535169977243},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1535169977243},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1535169977243},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1535169977243},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1535169977243},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1535169977244},{"_id":"public/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1535169977244},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1535169977244},{"_id":"public/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1535169977244},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1535169977244},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1535169977244},{"_id":"public/css/main.css","hash":"3f98bc2ba5ad14d171dabde4fdc05048cc50e8c5","modified":1535169977245},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1535169977245},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1535169977245},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1535169977245},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1535169977245},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1535169977247},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1535169977247},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1535169977255}],"Category":[],"Data":[],"Page":[{"title":"Tag Cloud","date":"2016-12-25T10:20:07.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tag Cloud\ndate: 2016-12-25 18:20:07\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-08-25T02:22:23.000Z","path":"tags/index.html","layout":"page","_id":"cjl8wkby1001l5xzx527xkr2v","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JavaScript 小技巧（不定期更新）","_content":"\n### 获取当前时间的毫秒数\n\n```javascript\n// Way 1. 直接的方式\nvar time = new Date().getTime();\n\n// Way 2. 利用隐式类型转换\nvar time = +new Date();\n```","source":"_drafts/JavaScript-小技巧（不定期更新）.md","raw":"---\ntitle: JavaScript 小技巧（不定期更新）\ntags: [JavaScript]\n---\n\n### 获取当前时间的毫秒数\n\n```javascript\n// Way 1. 直接的方式\nvar time = new Date().getTime();\n\n// Way 2. 利用隐式类型转换\nvar time = +new Date();\n```","slug":"JavaScript-小技巧（不定期更新）","published":0,"date":"2018-08-25T02:22:23.000Z","updated":"2018-08-25T02:53:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbol00005xzxer7tvdnj","content":"<h3 id=\"获取当前时间的毫秒数\"><a class=\"header-anchor\" href=\"#获取当前时间的毫秒数\">¶</a>获取当前时间的毫秒数</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Way 1. 直接的方式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Way 2. 利用隐式类型转换</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> time = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"获取当前时间的毫秒数\"><a class=\"header-anchor\" href=\"#获取当前时间的毫秒数\">¶</a>获取当前时间的毫秒数</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Way 1. 直接的方式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Way 2. 利用隐式类型转换</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> time = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br></pre></td></tr></table></figure>"},{"title":"es6 let & const","_content":"\n> 无特别说明为 ES2015  \n\n## let\n\n变量名以下划线开头来区分一个变量是由 let 还是 var 声明的：\n![ES2015](http://ohz4k75du.bkt.clouddn.com/markdown/1499352801106.png)\n\nfor 循环内部其实是闭包实现：\n![ES2015](http://ohz4k75du.bkt.clouddn.com/markdown/1499352724942.png)\n\n对于\n\nES2015 的表现：\n![ES2015 的表现](http://ohz4k75du.bkt.clouddn.com/markdown/1499351794964.png)\n\nES2016 的表现：\n![ES2016 的表现](http://ohz4k75du.bkt.clouddn.com/markdown/1499351862008.png)\n\n![暂时性死区（temporal dead zone）](http://ohz4k75du.bkt.clouddn.com/markdown/1499349452842.png)\n\n\n\n","source":"_drafts/es6-let-const.md","raw":"---\ntitle: es6 let & const\ntags: [ECMAScript6]\n---\n\n> 无特别说明为 ES2015  \n\n## let\n\n变量名以下划线开头来区分一个变量是由 let 还是 var 声明的：\n![ES2015](http://ohz4k75du.bkt.clouddn.com/markdown/1499352801106.png)\n\nfor 循环内部其实是闭包实现：\n![ES2015](http://ohz4k75du.bkt.clouddn.com/markdown/1499352724942.png)\n\n对于\n\nES2015 的表现：\n![ES2015 的表现](http://ohz4k75du.bkt.clouddn.com/markdown/1499351794964.png)\n\nES2016 的表现：\n![ES2016 的表现](http://ohz4k75du.bkt.clouddn.com/markdown/1499351862008.png)\n\n![暂时性死区（temporal dead zone）](http://ohz4k75du.bkt.clouddn.com/markdown/1499349452842.png)\n\n\n\n","slug":"es6-let-const","published":0,"date":"2018-08-25T02:22:23.000Z","updated":"2018-08-25T02:53:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbop00015xzxwhb9av5v","content":"<blockquote>\n<p>无特别说明为 ES2015</p>\n</blockquote>\n<h2 id=\"let\"><a class=\"header-anchor\" href=\"#let\">¶</a>let</h2>\n<p>变量名以下划线开头来区分一个变量是由 let 还是 var 声明的：<br>\n<img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1499352801106.png\" alt=\"ES2015\"></p>\n<p>for 循环内部其实是闭包实现：<br>\n<img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1499352724942.png\" alt=\"ES2015\"></p>\n<p>对于</p>\n<p>ES2015 的表现：<br>\n<img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1499351794964.png\" alt=\"ES2015 的表现\"></p>\n<p>ES2016 的表现：<br>\n<img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1499351862008.png\" alt=\"ES2016 的表现\"></p>\n<p><img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1499349452842.png\" alt=\"暂时性死区（temporal dead zone）\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>无特别说明为 ES2015</p>\n</blockquote>\n<h2 id=\"let\"><a class=\"header-anchor\" href=\"#let\">¶</a>let</h2>\n<p>变量名以下划线开头来区分一个变量是由 let 还是 var 声明的：<br>\n<img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1499352801106.png\" alt=\"ES2015\"></p>\n<p>for 循环内部其实是闭包实现：<br>\n<img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1499352724942.png\" alt=\"ES2015\"></p>\n<p>对于</p>\n<p>ES2015 的表现：<br>\n<img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1499351794964.png\" alt=\"ES2015 的表现\"></p>\n<p>ES2016 的表现：<br>\n<img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1499351862008.png\" alt=\"ES2016 的表现\"></p>\n<p><img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1499349452842.png\" alt=\"暂时性死区（temporal dead zone）\"></p>\n"},{"title":"[NOTE] What the heck is the event loop anyway?","_content":"\n单线程\n单并发（single concurrent）\n\nsingle thread runtime\n\nsingle call stack 调用栈\n\nhere comes questions: blocking\n\nasynchronous callbacks\n\nGUI 渲染线程的优先级更高？？？\n\nasync 能够帮助不阻塞 GUI 的渲染\n\nparser Esprima\n\n**event loop's job** is to look at the stack and look at the queue - If the stack is empty it takes the first thing on the queue and pushes it on to the stack, which effectively runs it.\n\n## 参考\n\n* [Philip Roberts: What the heck is the event loop anyway?](http://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html)\n* [可视化 runtime 工具 - loupe](http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D)","source":"_drafts/What-the-heck-is-the-event-loop-anyway.md","raw":"---\ntitle: '[NOTE] What the heck is the event loop anyway?'\ntags: [JavaScript]\n---\n\n单线程\n单并发（single concurrent）\n\nsingle thread runtime\n\nsingle call stack 调用栈\n\nhere comes questions: blocking\n\nasynchronous callbacks\n\nGUI 渲染线程的优先级更高？？？\n\nasync 能够帮助不阻塞 GUI 的渲染\n\nparser Esprima\n\n**event loop's job** is to look at the stack and look at the queue - If the stack is empty it takes the first thing on the queue and pushes it on to the stack, which effectively runs it.\n\n## 参考\n\n* [Philip Roberts: What the heck is the event loop anyway?](http://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html)\n* [可视化 runtime 工具 - loupe](http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D)","slug":"What-the-heck-is-the-event-loop-anyway","published":0,"date":"2018-08-25T02:22:23.000Z","updated":"2018-08-25T02:53:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbov00035xzxuijakto9","content":"<p>单线程<br>\n单并发（single concurrent）</p>\n<p>single thread runtime</p>\n<p>single call stack 调用栈</p>\n<p>here comes questions: blocking</p>\n<p>asynchronous callbacks</p>\n<p>GUI 渲染线程的优先级更高？？？</p>\n<p>async 能够帮助不阻塞 GUI 的渲染</p>\n<p>parser Esprima</p>\n<p><strong>event loop’s job</strong> is to look at the stack and look at the queue - If the stack is empty it takes the first thing on the queue and pushes it on to the stack, which effectively runs it.</p>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h2>\n<ul>\n<li><a href=\"http://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html\" target=\"_blank\" rel=\"noopener\">Philip Roberts: What the heck is the event loop anyway?</a></li>\n<li><a href=\"http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D\" target=\"_blank\" rel=\"noopener\">可视化 runtime 工具 - loupe</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>单线程<br>\n单并发（single concurrent）</p>\n<p>single thread runtime</p>\n<p>single call stack 调用栈</p>\n<p>here comes questions: blocking</p>\n<p>asynchronous callbacks</p>\n<p>GUI 渲染线程的优先级更高？？？</p>\n<p>async 能够帮助不阻塞 GUI 的渲染</p>\n<p>parser Esprima</p>\n<p><strong>event loop’s job</strong> is to look at the stack and look at the queue - If the stack is empty it takes the first thing on the queue and pushes it on to the stack, which effectively runs it.</p>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h2>\n<ul>\n<li><a href=\"http://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html\" target=\"_blank\" rel=\"noopener\">Philip Roberts: What the heck is the event loop anyway?</a></li>\n<li><a href=\"http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D\" target=\"_blank\" rel=\"noopener\">可视化 runtime 工具 - loupe</a></li>\n</ul>\n"},{"title":"setTimeout & setInterval","_content":"\n## 语法 & 参数\n\n```\nsetTimeout(func/code[, delay, param1, param2, ...]);\nsetInterval(func/code, delay[, param1, param2, ...]);\n```\n\n第一个参数可以是 `code` ，即以字符串形式表示的代码。由于其内部使用的是名声狼藉的 `eval` ——[欺骗词法作用域导致性能下降](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch2.md#cheating-lexical)，因此不推荐使用。\n\n第一个参数推荐使用回调函数形式。注意，由于回调函数将在全局作用域中执行的，故**回调函数的 `this` 将指向全局对象**，即使这个回调函数是某个对象的方法。如果想让回调函数的 `this` 指向回调函数所从属的那个对象，可以使用以下两种方法：\n\n1. 匿名函数包裹函数调用；\n2. bind/call/apply 。\n\n```javascript\n    var name = \"global\";\n\n    function User(username) {\n        this.name = username;\n        this.sayName = function() {\n            console.log(this.name);\n        };\n    }\n\n    var user = new User(\"baishu\");\n\n    // 回调函数的 `this` 指向的是全局对象\n    setTimeout(user.sayName, 1000); // \"global\"\n\n    // Way 1. 匿名函数包裹函数调用\n    setTimeout(function() {\n        user.sayName();\n    }, 1000); // \"baishu\"\n\n    // Way 2. bind/call/apply\n    setTimeout(user.sayName.bind(user), 1000); // \"baishu\"\n```\n\n第二个参数，是一个数字，表示毫秒。`setTimeout` 中该参数的最小值取到 0 ； `setInterval` 中该参数的最小值取到 10 。然而实际使用中，该参数的最小值可能更大。\n\n情况一：嵌套多层的 `setTimeout` 。[HTML5 规范](https://html.spec.whatwg.org/multipage/webappapis.html#timers)中有提到：\n\n> 8. If timeout is less than 0, then set timeout to 0.  \n> 如果 timeout 小于 0 ，那么设置 timeout 为 0 。\n> \n> 9. If nesting level is greater than 5, and timeout is less than 4, then set timeout to 4.  \n> 如果嵌套层级大于 5 ，且 timeout 小于 4 ，那么设置 timeout 为 4 。\n\n第三个参数开始的参数，是回调函数的参数。IE9 及以下只支持前两个参数，可以通过：\n\n1. 匿名函数包裹带参数的函数调用；\n2. bind/call/apply 。\n\n```javascript\n// Way 1. 匿名函数包裹带参数的函数调用\nsetTimeout(function() {\n    myFunc(param1, param2, ...);\n}, 1000);\n\n// Way 2. 匿名函数包裹带参数的函数调用\nsetTimeout( function(param1, param2, ...){}.bind(undefined, param1, param2, ...), 1000 );\n```\n\n两种方式解决上述兼容性问题。\n\n## 机制\n\n### 知识储备\n\n[JavaScript has a concurrency model based on an \"event loop\".](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop)\n\nJavaScript 是单线程的（HTML5 提出的 Web Worker）。\n\nJS 有三个主线程，队列（event loop）、GUI 渲染线程、。。。？？？\n\n\n\n一个 JavaScript 运行时（runtime）包含三部分：\n\n* 一个函数调用组成的堆栈帧（a stack of frames）。即[《[翻译] JavaScript 事件循环：说明》](http://baishusama.github.io/2017/04/13/翻译-The-JavaScript-Event-Loop-Explained/)中提到的调用栈（call stack）。\n* 所有对象被分配到的一个堆（heap）。\n* 一个待处理的消息队列（message queue）。\n\n而事件循环（event loop）的工作就是时刻注意（？？？还是空闲时注意？？？）上面说到的“栈”和“队列”的情况（是否为空）。如果“栈”为空，且“队列”中有消息，（由于队列总是先进先出的，）取第一条消息，其回调函数的调用将作为“栈”的初始帧，[并且由于 JavaScript 是单线程的，因此在堆栈上返回所有调用之前暂停进一步的消息的轮询和处理。](http://baishusama.github.io/2017/04/13/翻译-The-JavaScript-Event-Loop-Explained/)\n\n事件循环之所以称为“事件循环”，是因为其实现方式多半是类似如下的形式：\n\n```javascript\nwhile(queue.waitForMessage()){\n  queue.processNextMessage();\n}\n```\n\n### 机制\n\n了解了以上相关知识后，我们就可以一探定时器的机制了。\n\n当执行中的代码，遇到 setTimeout/setInterval 时，会将相关代码入栈，然后立即出栈，并将计时任务转交给浏览器的 Web APIs 计时。调用定时器的代码继续同步（sync）执行。当计时完毕， Web APIs 会将定时器的回调函数作为消息，进入消息队列，等待处理。当同步代码执行完毕，调用栈（stack）为空时，事件循环（event loop）会依次从消息队列中取出消息逐个先后执行。\n\n\n\n特殊的，有 `setTimeout(callback, 0);` 。其机制。。。\n\n## `setInterval` 的缺点\n\n## IMPORTANT\n\n我其实比较想说的是，我的一些发现：\n\n1. alert 阻塞 setInterval ，阻塞终止后，setInterval 仍按照原来的时间间隔执行——点击 alert 的“确定”按钮后，如果原来的 delay 是 5s，那么 5s 后才会有下一个 alert 。\n    * 猜测：alert 造成阻塞，而 js 是单线程的，无法继续进行计时等操作，故阻塞消失之后，计时重新从头开始。\n    * 猜测：出于性能考虑，消息队列中，同一个（不同的可以？？？）定时器的消息最多只能出现一次，即 web API 会判断，队列中是否已经有某个定时器的回调函数的消息了，如果已经有了，就不进入队列。且等到，上一个消息结束，web API 会重新从头开始计时？？？\n2. 事件执行顺序。js 模仿用户点击事件的 click() 的回调函数被视为同步的了。而用户点击触发的一般总是异步的？？？\n\n## 应用\n\n1. 调整事件的发生顺序\n    * 子元素的事件回调函数会早于父元素的事件回调函数。\n    * 用户自定义的回调函数通常在浏览器的默认动作之前触发。e.g. 用户在输入框输入文本，keypress事件会在浏览器接收文本之前触发。\n2. 分片\n3. 防抖（debounce）\n\n## 如何适合使用？？？\n\n## 参考\n\n* [你所不知道的 setTimeout](http://jeffjade.com/2016/01/10/2016-01-10-javacript-setTimeout/)：一些说法存在疏漏。\n* [你所不知道的 setInterval](http://jeffjade.com/2016/01/10/2016-01-10-javaScript-setInterval/)：一些说法存在疏漏。\n* [setTimeout @MDN](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout)\n* [setInterval @MDN](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval)\n","source":"_drafts/setTimeout-setInterval.md","raw":"---\ntitle: setTimeout & setInterval\ntags: [JavaScript]\n---\n\n## 语法 & 参数\n\n```\nsetTimeout(func/code[, delay, param1, param2, ...]);\nsetInterval(func/code, delay[, param1, param2, ...]);\n```\n\n第一个参数可以是 `code` ，即以字符串形式表示的代码。由于其内部使用的是名声狼藉的 `eval` ——[欺骗词法作用域导致性能下降](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch2.md#cheating-lexical)，因此不推荐使用。\n\n第一个参数推荐使用回调函数形式。注意，由于回调函数将在全局作用域中执行的，故**回调函数的 `this` 将指向全局对象**，即使这个回调函数是某个对象的方法。如果想让回调函数的 `this` 指向回调函数所从属的那个对象，可以使用以下两种方法：\n\n1. 匿名函数包裹函数调用；\n2. bind/call/apply 。\n\n```javascript\n    var name = \"global\";\n\n    function User(username) {\n        this.name = username;\n        this.sayName = function() {\n            console.log(this.name);\n        };\n    }\n\n    var user = new User(\"baishu\");\n\n    // 回调函数的 `this` 指向的是全局对象\n    setTimeout(user.sayName, 1000); // \"global\"\n\n    // Way 1. 匿名函数包裹函数调用\n    setTimeout(function() {\n        user.sayName();\n    }, 1000); // \"baishu\"\n\n    // Way 2. bind/call/apply\n    setTimeout(user.sayName.bind(user), 1000); // \"baishu\"\n```\n\n第二个参数，是一个数字，表示毫秒。`setTimeout` 中该参数的最小值取到 0 ； `setInterval` 中该参数的最小值取到 10 。然而实际使用中，该参数的最小值可能更大。\n\n情况一：嵌套多层的 `setTimeout` 。[HTML5 规范](https://html.spec.whatwg.org/multipage/webappapis.html#timers)中有提到：\n\n> 8. If timeout is less than 0, then set timeout to 0.  \n> 如果 timeout 小于 0 ，那么设置 timeout 为 0 。\n> \n> 9. If nesting level is greater than 5, and timeout is less than 4, then set timeout to 4.  \n> 如果嵌套层级大于 5 ，且 timeout 小于 4 ，那么设置 timeout 为 4 。\n\n第三个参数开始的参数，是回调函数的参数。IE9 及以下只支持前两个参数，可以通过：\n\n1. 匿名函数包裹带参数的函数调用；\n2. bind/call/apply 。\n\n```javascript\n// Way 1. 匿名函数包裹带参数的函数调用\nsetTimeout(function() {\n    myFunc(param1, param2, ...);\n}, 1000);\n\n// Way 2. 匿名函数包裹带参数的函数调用\nsetTimeout( function(param1, param2, ...){}.bind(undefined, param1, param2, ...), 1000 );\n```\n\n两种方式解决上述兼容性问题。\n\n## 机制\n\n### 知识储备\n\n[JavaScript has a concurrency model based on an \"event loop\".](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop)\n\nJavaScript 是单线程的（HTML5 提出的 Web Worker）。\n\nJS 有三个主线程，队列（event loop）、GUI 渲染线程、。。。？？？\n\n\n\n一个 JavaScript 运行时（runtime）包含三部分：\n\n* 一个函数调用组成的堆栈帧（a stack of frames）。即[《[翻译] JavaScript 事件循环：说明》](http://baishusama.github.io/2017/04/13/翻译-The-JavaScript-Event-Loop-Explained/)中提到的调用栈（call stack）。\n* 所有对象被分配到的一个堆（heap）。\n* 一个待处理的消息队列（message queue）。\n\n而事件循环（event loop）的工作就是时刻注意（？？？还是空闲时注意？？？）上面说到的“栈”和“队列”的情况（是否为空）。如果“栈”为空，且“队列”中有消息，（由于队列总是先进先出的，）取第一条消息，其回调函数的调用将作为“栈”的初始帧，[并且由于 JavaScript 是单线程的，因此在堆栈上返回所有调用之前暂停进一步的消息的轮询和处理。](http://baishusama.github.io/2017/04/13/翻译-The-JavaScript-Event-Loop-Explained/)\n\n事件循环之所以称为“事件循环”，是因为其实现方式多半是类似如下的形式：\n\n```javascript\nwhile(queue.waitForMessage()){\n  queue.processNextMessage();\n}\n```\n\n### 机制\n\n了解了以上相关知识后，我们就可以一探定时器的机制了。\n\n当执行中的代码，遇到 setTimeout/setInterval 时，会将相关代码入栈，然后立即出栈，并将计时任务转交给浏览器的 Web APIs 计时。调用定时器的代码继续同步（sync）执行。当计时完毕， Web APIs 会将定时器的回调函数作为消息，进入消息队列，等待处理。当同步代码执行完毕，调用栈（stack）为空时，事件循环（event loop）会依次从消息队列中取出消息逐个先后执行。\n\n\n\n特殊的，有 `setTimeout(callback, 0);` 。其机制。。。\n\n## `setInterval` 的缺点\n\n## IMPORTANT\n\n我其实比较想说的是，我的一些发现：\n\n1. alert 阻塞 setInterval ，阻塞终止后，setInterval 仍按照原来的时间间隔执行——点击 alert 的“确定”按钮后，如果原来的 delay 是 5s，那么 5s 后才会有下一个 alert 。\n    * 猜测：alert 造成阻塞，而 js 是单线程的，无法继续进行计时等操作，故阻塞消失之后，计时重新从头开始。\n    * 猜测：出于性能考虑，消息队列中，同一个（不同的可以？？？）定时器的消息最多只能出现一次，即 web API 会判断，队列中是否已经有某个定时器的回调函数的消息了，如果已经有了，就不进入队列。且等到，上一个消息结束，web API 会重新从头开始计时？？？\n2. 事件执行顺序。js 模仿用户点击事件的 click() 的回调函数被视为同步的了。而用户点击触发的一般总是异步的？？？\n\n## 应用\n\n1. 调整事件的发生顺序\n    * 子元素的事件回调函数会早于父元素的事件回调函数。\n    * 用户自定义的回调函数通常在浏览器的默认动作之前触发。e.g. 用户在输入框输入文本，keypress事件会在浏览器接收文本之前触发。\n2. 分片\n3. 防抖（debounce）\n\n## 如何适合使用？？？\n\n## 参考\n\n* [你所不知道的 setTimeout](http://jeffjade.com/2016/01/10/2016-01-10-javacript-setTimeout/)：一些说法存在疏漏。\n* [你所不知道的 setInterval](http://jeffjade.com/2016/01/10/2016-01-10-javaScript-setInterval/)：一些说法存在疏漏。\n* [setTimeout @MDN](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout)\n* [setInterval @MDN](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval)\n","slug":"setTimeout-setInterval","published":0,"date":"2018-08-25T02:22:23.000Z","updated":"2018-08-25T02:53:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbox00045xzxchg0xkc6","content":"<h2 id=\"语法-参数\"><a class=\"header-anchor\" href=\"#语法-参数\">¶</a>语法 &amp; 参数</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(func/code[, delay, param1, param2, ...]);</span><br><span class=\"line\">setInterval(func/code, delay[, param1, param2, ...]);</span><br></pre></td></tr></table></figure>\n<p>第一个参数可以是 <code>code</code> ，即以字符串形式表示的代码。由于其内部使用的是名声狼藉的 <code>eval</code> ——<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch2.md#cheating-lexical\" target=\"_blank\" rel=\"noopener\">欺骗词法作用域导致性能下降</a>，因此不推荐使用。</p>\n<p>第一个参数推荐使用回调函数形式。注意，由于回调函数将在全局作用域中执行的，故<strong>回调函数的 <code>this</code> 将指向全局对象</strong>，即使这个回调函数是某个对象的方法。如果想让回调函数的 <code>this</code> 指向回调函数所从属的那个对象，可以使用以下两种方法：</p>\n<ol>\n<li>匿名函数包裹函数调用；</li>\n<li>bind/call/apply 。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"global\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">username</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = username;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"baishu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 回调函数的 `this` 指向的是全局对象</span></span><br><span class=\"line\">setTimeout(user.sayName, <span class=\"number\">1000</span>); <span class=\"comment\">// \"global\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Way 1. 匿名函数包裹函数调用</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    user.sayName();</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>); <span class=\"comment\">// \"baishu\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Way 2. bind/call/apply</span></span><br><span class=\"line\">setTimeout(user.sayName.bind(user), <span class=\"number\">1000</span>); <span class=\"comment\">// \"baishu\"</span></span><br></pre></td></tr></table></figure>\n<p>第二个参数，是一个数字，表示毫秒。<code>setTimeout</code> 中该参数的最小值取到 0 ； <code>setInterval</code> 中该参数的最小值取到 10 。然而实际使用中，该参数的最小值可能更大。</p>\n<p>情况一：嵌套多层的 <code>setTimeout</code> 。<a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#timers\" target=\"_blank\" rel=\"noopener\">HTML5 规范</a>中有提到：</p>\n<blockquote>\n<ol start=\"8\">\n<li>\n<p>If timeout is less than 0, then set timeout to 0.<br>\n如果 timeout 小于 0 ，那么设置 timeout 为 0 。</p>\n</li>\n<li>\n<p>If nesting level is greater than 5, and timeout is less than 4, then set timeout to 4.<br>\n如果嵌套层级大于 5 ，且 timeout 小于 4 ，那么设置 timeout 为 4 。</p>\n</li>\n</ol>\n</blockquote>\n<p>第三个参数开始的参数，是回调函数的参数。IE9 及以下只支持前两个参数，可以通过：</p>\n<ol>\n<li>匿名函数包裹带参数的函数调用；</li>\n<li>bind/call/apply 。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Way 1. 匿名函数包裹带参数的函数调用</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    myFunc(param1, param2, ...);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Way 2. 匿名函数包裹带参数的函数调用</span></span><br><span class=\"line\">setTimeout( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param1, param2, ...</span>)</span>&#123;&#125;.bind(<span class=\"literal\">undefined</span>, param1, param2, ...), <span class=\"number\">1000</span> );</span><br></pre></td></tr></table></figure>\n<p>两种方式解决上述兼容性问题。</p>\n<h2 id=\"机制\"><a class=\"header-anchor\" href=\"#机制\">¶</a>机制</h2>\n<h3 id=\"知识储备\"><a class=\"header-anchor\" href=\"#知识储备\">¶</a>知识储备</h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"noopener\">JavaScript has a concurrency model based on an “event loop”.</a></p>\n<p>JavaScript 是单线程的（HTML5 提出的 Web Worker）。</p>\n<p>JS 有三个主线程，队列（event loop）、GUI 渲染线程、。。。？？？</p>\n<p>一个 JavaScript 运行时（runtime）包含三部分：</p>\n<ul>\n<li>一个函数调用组成的堆栈帧（a stack of frames）。即<a href=\"http://baishusama.github.io/2017/04/13/%E7%BF%BB%E8%AF%91-The-JavaScript-Event-Loop-Explained/\">《[翻译] JavaScript 事件循环：说明》</a>中提到的调用栈（call stack）。</li>\n<li>所有对象被分配到的一个堆（heap）。</li>\n<li>一个待处理的消息队列（message queue）。</li>\n</ul>\n<p>而事件循环（event loop）的工作就是时刻注意（？？？还是空闲时注意？？？）上面说到的“栈”和“队列”的情况（是否为空）。如果“栈”为空，且“队列”中有消息，（由于队列总是先进先出的，）取第一条消息，其回调函数的调用将作为“栈”的初始帧，<a href=\"http://baishusama.github.io/2017/04/13/%E7%BF%BB%E8%AF%91-The-JavaScript-Event-Loop-Explained/\">并且由于 JavaScript 是单线程的，因此在堆栈上返回所有调用之前暂停进一步的消息的轮询和处理。</a></p>\n<p>事件循环之所以称为“事件循环”，是因为其实现方式多半是类似如下的形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(queue.waitForMessage())&#123;</span><br><span class=\"line\">  queue.processNextMessage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"机制-v2\"><a class=\"header-anchor\" href=\"#机制-v2\">¶</a>机制</h3>\n<p>了解了以上相关知识后，我们就可以一探定时器的机制了。</p>\n<p>当执行中的代码，遇到 setTimeout/setInterval 时，会将相关代码入栈，然后立即出栈，并将计时任务转交给浏览器的 Web APIs 计时。调用定时器的代码继续同步（sync）执行。当计时完毕， Web APIs 会将定时器的回调函数作为消息，进入消息队列，等待处理。当同步代码执行完毕，调用栈（stack）为空时，事件循环（event loop）会依次从消息队列中取出消息逐个先后执行。</p>\n<p>特殊的，有 <code>setTimeout(callback, 0);</code> 。其机制。。。</p>\n<h2 id=\"setinterval-的缺点\"><a class=\"header-anchor\" href=\"#setinterval-的缺点\">¶</a><code>setInterval</code> 的缺点</h2>\n<h2 id=\"important\"><a class=\"header-anchor\" href=\"#important\">¶</a>IMPORTANT</h2>\n<p>我其实比较想说的是，我的一些发现：</p>\n<ol>\n<li>alert 阻塞 setInterval ，阻塞终止后，setInterval 仍按照原来的时间间隔执行——点击 alert 的“确定”按钮后，如果原来的 delay 是 5s，那么 5s 后才会有下一个 alert 。\n<ul>\n<li>猜测：alert 造成阻塞，而 js 是单线程的，无法继续进行计时等操作，故阻塞消失之后，计时重新从头开始。</li>\n<li>猜测：出于性能考虑，消息队列中，同一个（不同的可以？？？）定时器的消息最多只能出现一次，即 web API 会判断，队列中是否已经有某个定时器的回调函数的消息了，如果已经有了，就不进入队列。且等到，上一个消息结束，web API 会重新从头开始计时？？？</li>\n</ul>\n</li>\n<li>事件执行顺序。js 模仿用户点击事件的 click() 的回调函数被视为同步的了。而用户点击触发的一般总是异步的？？？</li>\n</ol>\n<h2 id=\"应用\"><a class=\"header-anchor\" href=\"#应用\">¶</a>应用</h2>\n<ol>\n<li>调整事件的发生顺序\n<ul>\n<li>子元素的事件回调函数会早于父元素的事件回调函数。</li>\n<li>用户自定义的回调函数通常在浏览器的默认动作之前触发。e.g. 用户在输入框输入文本，keypress事件会在浏览器接收文本之前触发。</li>\n</ul>\n</li>\n<li>分片</li>\n<li>防抖（debounce）</li>\n</ol>\n<h2 id=\"如何适合使用？？？\"><a class=\"header-anchor\" href=\"#如何适合使用？？？\">¶</a>如何适合使用？？？</h2>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h2>\n<ul>\n<li><a href=\"http://jeffjade.com/2016/01/10/2016-01-10-javacript-setTimeout/\" target=\"_blank\" rel=\"noopener\">你所不知道的 setTimeout</a>：一些说法存在疏漏。</li>\n<li><a href=\"http://jeffjade.com/2016/01/10/2016-01-10-javaScript-setInterval/\" target=\"_blank\" rel=\"noopener\">你所不知道的 setInterval</a>：一些说法存在疏漏。</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\" target=\"_blank\" rel=\"noopener\">setTimeout @MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval\" target=\"_blank\" rel=\"noopener\">setInterval @MDN</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"语法-参数\"><a class=\"header-anchor\" href=\"#语法-参数\">¶</a>语法 &amp; 参数</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(func/code[, delay, param1, param2, ...]);</span><br><span class=\"line\">setInterval(func/code, delay[, param1, param2, ...]);</span><br></pre></td></tr></table></figure>\n<p>第一个参数可以是 <code>code</code> ，即以字符串形式表示的代码。由于其内部使用的是名声狼藉的 <code>eval</code> ——<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch2.md#cheating-lexical\" target=\"_blank\" rel=\"noopener\">欺骗词法作用域导致性能下降</a>，因此不推荐使用。</p>\n<p>第一个参数推荐使用回调函数形式。注意，由于回调函数将在全局作用域中执行的，故<strong>回调函数的 <code>this</code> 将指向全局对象</strong>，即使这个回调函数是某个对象的方法。如果想让回调函数的 <code>this</code> 指向回调函数所从属的那个对象，可以使用以下两种方法：</p>\n<ol>\n<li>匿名函数包裹函数调用；</li>\n<li>bind/call/apply 。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"global\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">username</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = username;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"baishu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 回调函数的 `this` 指向的是全局对象</span></span><br><span class=\"line\">setTimeout(user.sayName, <span class=\"number\">1000</span>); <span class=\"comment\">// \"global\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Way 1. 匿名函数包裹函数调用</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    user.sayName();</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>); <span class=\"comment\">// \"baishu\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Way 2. bind/call/apply</span></span><br><span class=\"line\">setTimeout(user.sayName.bind(user), <span class=\"number\">1000</span>); <span class=\"comment\">// \"baishu\"</span></span><br></pre></td></tr></table></figure>\n<p>第二个参数，是一个数字，表示毫秒。<code>setTimeout</code> 中该参数的最小值取到 0 ； <code>setInterval</code> 中该参数的最小值取到 10 。然而实际使用中，该参数的最小值可能更大。</p>\n<p>情况一：嵌套多层的 <code>setTimeout</code> 。<a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#timers\" target=\"_blank\" rel=\"noopener\">HTML5 规范</a>中有提到：</p>\n<blockquote>\n<ol start=\"8\">\n<li>\n<p>If timeout is less than 0, then set timeout to 0.<br>\n如果 timeout 小于 0 ，那么设置 timeout 为 0 。</p>\n</li>\n<li>\n<p>If nesting level is greater than 5, and timeout is less than 4, then set timeout to 4.<br>\n如果嵌套层级大于 5 ，且 timeout 小于 4 ，那么设置 timeout 为 4 。</p>\n</li>\n</ol>\n</blockquote>\n<p>第三个参数开始的参数，是回调函数的参数。IE9 及以下只支持前两个参数，可以通过：</p>\n<ol>\n<li>匿名函数包裹带参数的函数调用；</li>\n<li>bind/call/apply 。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Way 1. 匿名函数包裹带参数的函数调用</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    myFunc(param1, param2, ...);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Way 2. 匿名函数包裹带参数的函数调用</span></span><br><span class=\"line\">setTimeout( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param1, param2, ...</span>)</span>&#123;&#125;.bind(<span class=\"literal\">undefined</span>, param1, param2, ...), <span class=\"number\">1000</span> );</span><br></pre></td></tr></table></figure>\n<p>两种方式解决上述兼容性问题。</p>\n<h2 id=\"机制\"><a class=\"header-anchor\" href=\"#机制\">¶</a>机制</h2>\n<h3 id=\"知识储备\"><a class=\"header-anchor\" href=\"#知识储备\">¶</a>知识储备</h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"noopener\">JavaScript has a concurrency model based on an “event loop”.</a></p>\n<p>JavaScript 是单线程的（HTML5 提出的 Web Worker）。</p>\n<p>JS 有三个主线程，队列（event loop）、GUI 渲染线程、。。。？？？</p>\n<p>一个 JavaScript 运行时（runtime）包含三部分：</p>\n<ul>\n<li>一个函数调用组成的堆栈帧（a stack of frames）。即<a href=\"http://baishusama.github.io/2017/04/13/%E7%BF%BB%E8%AF%91-The-JavaScript-Event-Loop-Explained/\">《[翻译] JavaScript 事件循环：说明》</a>中提到的调用栈（call stack）。</li>\n<li>所有对象被分配到的一个堆（heap）。</li>\n<li>一个待处理的消息队列（message queue）。</li>\n</ul>\n<p>而事件循环（event loop）的工作就是时刻注意（？？？还是空闲时注意？？？）上面说到的“栈”和“队列”的情况（是否为空）。如果“栈”为空，且“队列”中有消息，（由于队列总是先进先出的，）取第一条消息，其回调函数的调用将作为“栈”的初始帧，<a href=\"http://baishusama.github.io/2017/04/13/%E7%BF%BB%E8%AF%91-The-JavaScript-Event-Loop-Explained/\">并且由于 JavaScript 是单线程的，因此在堆栈上返回所有调用之前暂停进一步的消息的轮询和处理。</a></p>\n<p>事件循环之所以称为“事件循环”，是因为其实现方式多半是类似如下的形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(queue.waitForMessage())&#123;</span><br><span class=\"line\">  queue.processNextMessage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"机制-v2\"><a class=\"header-anchor\" href=\"#机制-v2\">¶</a>机制</h3>\n<p>了解了以上相关知识后，我们就可以一探定时器的机制了。</p>\n<p>当执行中的代码，遇到 setTimeout/setInterval 时，会将相关代码入栈，然后立即出栈，并将计时任务转交给浏览器的 Web APIs 计时。调用定时器的代码继续同步（sync）执行。当计时完毕， Web APIs 会将定时器的回调函数作为消息，进入消息队列，等待处理。当同步代码执行完毕，调用栈（stack）为空时，事件循环（event loop）会依次从消息队列中取出消息逐个先后执行。</p>\n<p>特殊的，有 <code>setTimeout(callback, 0);</code> 。其机制。。。</p>\n<h2 id=\"setinterval-的缺点\"><a class=\"header-anchor\" href=\"#setinterval-的缺点\">¶</a><code>setInterval</code> 的缺点</h2>\n<h2 id=\"important\"><a class=\"header-anchor\" href=\"#important\">¶</a>IMPORTANT</h2>\n<p>我其实比较想说的是，我的一些发现：</p>\n<ol>\n<li>alert 阻塞 setInterval ，阻塞终止后，setInterval 仍按照原来的时间间隔执行——点击 alert 的“确定”按钮后，如果原来的 delay 是 5s，那么 5s 后才会有下一个 alert 。\n<ul>\n<li>猜测：alert 造成阻塞，而 js 是单线程的，无法继续进行计时等操作，故阻塞消失之后，计时重新从头开始。</li>\n<li>猜测：出于性能考虑，消息队列中，同一个（不同的可以？？？）定时器的消息最多只能出现一次，即 web API 会判断，队列中是否已经有某个定时器的回调函数的消息了，如果已经有了，就不进入队列。且等到，上一个消息结束，web API 会重新从头开始计时？？？</li>\n</ul>\n</li>\n<li>事件执行顺序。js 模仿用户点击事件的 click() 的回调函数被视为同步的了。而用户点击触发的一般总是异步的？？？</li>\n</ol>\n<h2 id=\"应用\"><a class=\"header-anchor\" href=\"#应用\">¶</a>应用</h2>\n<ol>\n<li>调整事件的发生顺序\n<ul>\n<li>子元素的事件回调函数会早于父元素的事件回调函数。</li>\n<li>用户自定义的回调函数通常在浏览器的默认动作之前触发。e.g. 用户在输入框输入文本，keypress事件会在浏览器接收文本之前触发。</li>\n</ul>\n</li>\n<li>分片</li>\n<li>防抖（debounce）</li>\n</ol>\n<h2 id=\"如何适合使用？？？\"><a class=\"header-anchor\" href=\"#如何适合使用？？？\">¶</a>如何适合使用？？？</h2>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h2>\n<ul>\n<li><a href=\"http://jeffjade.com/2016/01/10/2016-01-10-javacript-setTimeout/\" target=\"_blank\" rel=\"noopener\">你所不知道的 setTimeout</a>：一些说法存在疏漏。</li>\n<li><a href=\"http://jeffjade.com/2016/01/10/2016-01-10-javaScript-setInterval/\" target=\"_blank\" rel=\"noopener\">你所不知道的 setInterval</a>：一些说法存在疏漏。</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\" target=\"_blank\" rel=\"noopener\">setTimeout @MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval\" target=\"_blank\" rel=\"noopener\">setInterval @MDN</a></li>\n</ul>\n"},{"title":"event loop & message queue","_content":"\n","source":"_drafts/event-loop-message-queue.md","raw":"---\ntitle: event loop & message queue\ntags: [JavaScript]\n---\n\n","slug":"event-loop-message-queue","published":0,"date":"2018-08-25T02:22:23.000Z","updated":"2018-08-25T02:53:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkboy00055xzxfj6de82c","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"移动端点击穿透问题小结","_content":"\n<!-- more -->\n\n<!-- 找机会统一一下 文件名.md 和 title。 -->\n\n<!-- 曾经，移动端的 click 事件存在 300ms 左右的延迟，其目的是为了判断一个 click 是单击还是双击。 -->","source":"_drafts/移动端点击穿透问题小结.md","raw":"---\ntitle: 移动端点击穿透问题小结\ntags:\n---\n\n<!-- more -->\n\n<!-- 找机会统一一下 文件名.md 和 title。 -->\n\n<!-- 曾经，移动端的 click 事件存在 300ms 左右的延迟，其目的是为了判断一个 click 是单击还是双击。 -->","slug":"移动端点击穿透问题小结","published":0,"date":"2018-08-25T02:22:23.000Z","updated":"2018-08-25T02:22:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbp100085xzxd1rth8dv","content":"<a id=\"more\"></a>\n<!-- 找机会统一一下 文件名.md 和 title。 -->\n<!-- 曾经，移动端的 click 事件存在 300ms 左右的延迟，其目的是为了判断一个 click 是单击还是双击。 -->","site":{"data":{}},"excerpt":"","more":"<!-- 找机会统一一下 文件名.md 和 title。 -->\n<!-- 曾经，移动端的 click 事件存在 300ms 左右的延迟，其目的是为了判断一个 click 是单击还是双击。 -->"},{"title":"9 CSS Hearts for Valentine's","date":"2017-02-14T15:56:36.000Z","_content":"\n在情人节的尾巴，献上本篇。（今天，你比心了嘛？/w\\）\n\n在线 demo 请戳[这里](https://baishusama.github.io/stockyard/heart-for-valentines/index.html)。","source":"_posts/9-CSS-Hearts-for-Valentine.md","raw":"---\ntitle: 9 CSS Hearts for Valentine's\ndate: 2017-02-14 23:56:36\ntags: [CSS]\n---\n\n在情人节的尾巴，献上本篇。（今天，你比心了嘛？/w\\）\n\n在线 demo 请戳[这里](https://baishusama.github.io/stockyard/heart-for-valentines/index.html)。","slug":"9-CSS-Hearts-for-Valentine","published":1,"updated":"2018-08-25T02:54:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbp3000a5xzx6yxoq8kz","content":"<p>在情人节的尾巴，献上本篇。（今天，你比心了嘛？/w\\）</p>\n<p>在线 demo 请戳<a href=\"https://baishusama.github.io/stockyard/heart-for-valentines/index.html\">这里</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在情人节的尾巴，献上本篇。（今天，你比心了嘛？/w\\）</p>\n<p>在线 demo 请戳<a href=\"https://baishusama.github.io/stockyard/heart-for-valentines/index.html\">这里</a>。</p>\n"},{"title":"IFE-2016-SP-task17 AQI Histogram","date":"2016-12-24T09:19:46.000Z","_content":"\n## My Solution\n\nMy solution to task17 is available on jsfiddle: \n{% jsfiddle 7txop9gL 'default' 'light' '100%' '400px' %}\n\n<!-- more -->\n\n## Compared with others'\n\nIn [top-three team solutions](http://ife.baidu.com/task/detail?taskId=17) to this task, [the third one](http://ife.baidu.com/review/detail?workId=8045) is very similar to my solution except for [the code snippet](https://github.com/Phoebe-Perry/ife_baidu_2016/blob/gh-pages/second_phase/ife-baidu_task_17/task_17.js) below:\n\n```javascript\n//跨浏览器事件绑定\nfunction addEventHandler(ele, event, hanlder) {\n  if (ele.addEventListener) {\n    ele.addEventListener(event, hanlder, false);\n  } else if (ele.attachEvent) {\n    ele.attachEvent(\"on\"+event, hanlder);\n  } else  {\n    ele[\"on\" + event] = hanlder;\n  }\n}\n```\n\nwhich also takes **browser compatibilities** into consideration. Note that: **`attachEvent` is for IE and `addEventListener` is for the others**.\n\n## To Do\n\n- [ ]  Plus, the top-two solution's UI and animation (or interaction) are very nice and worthwhile **to do** study in the near future.\n- [ ]  Further, the part judging if some days are in a week/month is not a general way due to dates in data are continuous specially.","source":"_posts/IFE-2016-SP-task17.md","raw":"---\ntitle: IFE-2016-SP-task17 AQI Histogram\ndate: 2016-12-24 17:19:46\ntags: [IFE]\n---\n\n## My Solution\n\nMy solution to task17 is available on jsfiddle: \n{% jsfiddle 7txop9gL 'default' 'light' '100%' '400px' %}\n\n<!-- more -->\n\n## Compared with others'\n\nIn [top-three team solutions](http://ife.baidu.com/task/detail?taskId=17) to this task, [the third one](http://ife.baidu.com/review/detail?workId=8045) is very similar to my solution except for [the code snippet](https://github.com/Phoebe-Perry/ife_baidu_2016/blob/gh-pages/second_phase/ife-baidu_task_17/task_17.js) below:\n\n```javascript\n//跨浏览器事件绑定\nfunction addEventHandler(ele, event, hanlder) {\n  if (ele.addEventListener) {\n    ele.addEventListener(event, hanlder, false);\n  } else if (ele.attachEvent) {\n    ele.attachEvent(\"on\"+event, hanlder);\n  } else  {\n    ele[\"on\" + event] = hanlder;\n  }\n}\n```\n\nwhich also takes **browser compatibilities** into consideration. Note that: **`attachEvent` is for IE and `addEventListener` is for the others**.\n\n## To Do\n\n- [ ]  Plus, the top-two solution's UI and animation (or interaction) are very nice and worthwhile **to do** study in the near future.\n- [ ]  Further, the part judging if some days are in a week/month is not a general way due to dates in data are continuous specially.","slug":"IFE-2016-SP-task17","published":1,"updated":"2018-08-25T02:22:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbp7000d5xzxlikvntqo","content":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task17 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"400px\" src=\"//jsfiddle.net/7txop9gL/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>\n<a id=\"more\"></a>\n<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<p>In <a href=\"http://ife.baidu.com/task/detail?taskId=17\" target=\"_blank\" rel=\"noopener\">top-three team solutions</a> to this task, <a href=\"http://ife.baidu.com/review/detail?workId=8045\" target=\"_blank\" rel=\"noopener\">the third one</a> is very similar to my solution except for <a href=\"https://github.com/Phoebe-Perry/ife_baidu_2016/blob/gh-pages/second_phase/ife-baidu_task_17/task_17.js\" target=\"_blank\" rel=\"noopener\">the code snippet</a> below:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//跨浏览器事件绑定</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEventHandler</span>(<span class=\"params\">ele, event, hanlder</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ele.addEventListener) &#123;</span><br><span class=\"line\">    ele.addEventListener(event, hanlder, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ele.attachEvent) &#123;</span><br><span class=\"line\">    ele.attachEvent(<span class=\"string\">\"on\"</span>+event, hanlder);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span>  &#123;</span><br><span class=\"line\">    ele[<span class=\"string\">\"on\"</span> + event] = hanlder;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>which also takes <strong>browser compatibilities</strong> into consideration. Note that: <strong><code>attachEvent</code> is for IE and <code>addEventListener</code> is for the others</strong>.</p>\n<h2 id=\"to-do\"><a class=\"header-anchor\" href=\"#to-do\">¶</a>To Do</h2>\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox0\"><label for=\"checkbox0\"> Plus, the top-two solution’s UI and animation (or interaction) are very nice and worthwhile </label><strong>to do</strong> study in the near future.</li>\n<li><input type=\"checkbox\" id=\"checkbox1\"><label for=\"checkbox1\"> Further, the part judging if some days are in a week/month is not a general way due to dates in data are continuous specially.</label></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task17 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"400px\" src=\"//jsfiddle.net/7txop9gL/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>","more":"<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<p>In <a href=\"http://ife.baidu.com/task/detail?taskId=17\" target=\"_blank\" rel=\"noopener\">top-three team solutions</a> to this task, <a href=\"http://ife.baidu.com/review/detail?workId=8045\" target=\"_blank\" rel=\"noopener\">the third one</a> is very similar to my solution except for <a href=\"https://github.com/Phoebe-Perry/ife_baidu_2016/blob/gh-pages/second_phase/ife-baidu_task_17/task_17.js\" target=\"_blank\" rel=\"noopener\">the code snippet</a> below:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//跨浏览器事件绑定</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEventHandler</span>(<span class=\"params\">ele, event, hanlder</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ele.addEventListener) &#123;</span><br><span class=\"line\">    ele.addEventListener(event, hanlder, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ele.attachEvent) &#123;</span><br><span class=\"line\">    ele.attachEvent(<span class=\"string\">\"on\"</span>+event, hanlder);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span>  &#123;</span><br><span class=\"line\">    ele[<span class=\"string\">\"on\"</span> + event] = hanlder;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>which also takes <strong>browser compatibilities</strong> into consideration. Note that: <strong><code>attachEvent</code> is for IE and <code>addEventListener</code> is for the others</strong>.</p>\n<h2 id=\"to-do\"><a class=\"header-anchor\" href=\"#to-do\">¶</a>To Do</h2>\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox0\"><label for=\"checkbox0\"> Plus, the top-two solution’s UI and animation (or interaction) are very nice and worthwhile </label><strong>to do</strong> study in the near future.</li>\n<li><input type=\"checkbox\" id=\"checkbox1\"><label for=\"checkbox1\"> Further, the part judging if some days are in a week/month is not a general way due to dates in data are continuous specially.</label></li>\n</ul>"},{"title":"IFE-2016-SP-task18 Simulate Queue","date":"2016-12-26T13:34:40.000Z","_content":"\n## My Solution\n\nMy solution to task18 is available on jsfiddle:\n{% jsfiddle L81pe3r6 'default' 'light' '100%' '400px' %}\n\n<!-- more -->\n\n## Compared with others'\n\n### [任务得分第一的团队的 solution](http://ife.baidu.com/review/detail?workId=2673)\n\n* :bookmark: AGAIN：事件绑定函数的兼容性\n\n    ```javascript\n    function addEvent(element, event, handler) {\n      if (element.addEventListener) {\n        element.addEventListener(event, handler, false);\n      } else if (element.attachEvent) {\n        element.attachEvent(\"on\" + event, handler);\n      } else {\n        element[\"on\" + event] = handler;\n      }\n    }\n    ```\n\n* :ribbon: 将数据 queue 和与之相关的方法封装成了一个对象\n\n    > :/ 要挑刺的话，我觉得最好不要把 `queue` 对象内部的数据命名为 `str` 。  \n    > `str` 让人马上想到字符串而不是数组，而且 `paint` 方法内部的局部变量也名为 `str` 难免让人产生混淆（比如我读 `paint` 方法的相关代码的时候确实弄混了Orz）。  \n    \n    ```javascript\n    //遍历数组的方法，针对数组中每一个元素执行fn函数，并将数组索引和元素作为参数传递，后面用\n    function each(arr, fn) {\n      for (var cur = 0; cur < arr.length; cur++) {\n        fn(arr[cur], cur);\n      }\n    }\n    window.onload = function() {\n      ...\n      var queue = {\n        queue: [],\n        ...\n        paint: function() {\n          var str = \"\";\n          each(this.queue, function(item){str += (\"<div>\" + parseInt(item) + \"</div>\")});\n          queueWrapper.innerHTML = str;\n          addDivDelEvent();\n        },\n        ...\n      };\n    }\n    ```\n\n* :bookmark: [`Array.prototype.splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)\n    \n    > 语法：`array.splice(start, deleteCount, item1ToAdd, item2ToAdd, ...)`\n    \n    可以使用 `arr.splice(index, 1)` 来删除 `index` 位置上的数组元素（而不用像我那样使用 `filter` 方法）。\n\n* :ribbon: 循环绑定事件 & 闭包\n\n```javascript\nfunction addDivDelEvent() {\n  for (var cur = 0; cur < queueWrapper.childNodes.length; cur++) {\n    //这里要使用闭包，否则永远绑定到指定 div 上的 delete 函数的参数永远等于跳出时的 cur 值(length);\n    addEvent(queueWrapper.childNodes[cur], \"click\", function(cur) {\n      return function() {\n        return queue.deleteID(cur)\n      };\n    }(cur));\n  }\n}\n```\n\n### [任务得分第二的团队的 solution](http://ife.baidu.com/review/detail?workId=2592)\n\n* :bookmark: `nodeName` VS `tagName`\n\n    > [nodeName 和 tagName 的区别](http://blog.csdn.net/borishuai/article/details/5719227)\n\n* :ribbon: 定义简单的 `$` 函数来减少 `document.getElementXXX` 的输入（以偷懒 :P）\n\n    ```javascript\n    var $ = function (id) {\n      return document.getElementById(id);\n    };\n    ```\n\n* :ribbon: 面向对象的封装（逻辑略复杂 :sweat_smile: - 加入 To Do 豪华午餐）\n\n### [任务得分第三的团队的 solution](http://ife.baidu.com/review/detail?workId=2753)\n\n* :bookmark: AGAIN：定义简单的 `$` 函数来减少 `document.getElementXXX` 的输入（以偷懒 :P）\n\n    ```javascript\n    $ = function (el) { return document.querySelector(el); };\n    ```\n\n* :bookmark: 利用了数组的 `map` 和 `join` 方法，避开了不必要的循环\n\n    ```javascript\n    function render() {\n      $('#result').innerHTML =\n      data.map(function(d) { return \"<div>\" + d + \"</div>\"; })\n        .join('');\n    }\n    ```\n\n    另外注意上面代码中的类似于 jQuery 中的 **“链式”写法** 的写法！\n\n* :ribbon: 通过 `[].slice` 和 `.call/.apply` 来使类数组也可以使用数组的方法 & 将 `[].方法名` 作为参数传入函数增强了代码复用\n\n    e.g. Line 36:`var args = [].slice.call(arguments, 2);`，其中 `arguments` 是函数 `deal` 的参数（类数组）。\n\n* :ribbon: 将四个按钮和队列中元素的五种点击事件抽象为了 `deal` 函数\n\n* :ribbon: `try/catch` 的合理使用\n\n* :ribbon: `parseInt()` 使得 `007` 这样的输入（变为 `7` ）\n\n* :ribbon: 通过 `[].indexOf` 和 `.call` 来得出当前节点是父元素的第几个子节点\n\n    ```javascript\n    function getClickIndex(e) {\n      var node = e.target;\n      return [].indexOf.call(node.parentNode.children, node);\n    }\n    ```\n\n* :pensive: 小疏忽\n\n    > 1. 移除的逻辑没有队列为空的检验：最后弹窗为空时，点击“左侧出/右侧出”会弹出 `undefined` 。\n    > 2. 从用户体验的角度考虑，对输入的字符串 `.trim()` 一下会比较好。\n    > \n    > P.S. 内心 OS：看到这么简洁的代码真的忍不住想跪舔一下。因某位“缺注释、看不懂”等理由给了 5 分而位列第三实在可惜。以及“五个非洲人”（一本正经的 Five-African）的队名，够我笑一个星期了XD。\n\n## To Do\n\n[ ] 理清[任务得分第二的团队的 solution](http://ife.baidu.com/review/detail?workId=2592)的逻辑（[JS代码](https://github.com/zp1996/ife-2016/blob/master/task_2_18/task_2_18.js)）\n\n> P.S. 出于易读性的考虑，以上代码的命名和缩进可能有所修改。","source":"_posts/IFE-2016-SP-task18.md","raw":"---\ntitle: IFE-2016-SP-task18 Simulate Queue\ndate: 2016-12-26 21:34:40\ntags: [IFE]\n---\n\n## My Solution\n\nMy solution to task18 is available on jsfiddle:\n{% jsfiddle L81pe3r6 'default' 'light' '100%' '400px' %}\n\n<!-- more -->\n\n## Compared with others'\n\n### [任务得分第一的团队的 solution](http://ife.baidu.com/review/detail?workId=2673)\n\n* :bookmark: AGAIN：事件绑定函数的兼容性\n\n    ```javascript\n    function addEvent(element, event, handler) {\n      if (element.addEventListener) {\n        element.addEventListener(event, handler, false);\n      } else if (element.attachEvent) {\n        element.attachEvent(\"on\" + event, handler);\n      } else {\n        element[\"on\" + event] = handler;\n      }\n    }\n    ```\n\n* :ribbon: 将数据 queue 和与之相关的方法封装成了一个对象\n\n    > :/ 要挑刺的话，我觉得最好不要把 `queue` 对象内部的数据命名为 `str` 。  \n    > `str` 让人马上想到字符串而不是数组，而且 `paint` 方法内部的局部变量也名为 `str` 难免让人产生混淆（比如我读 `paint` 方法的相关代码的时候确实弄混了Orz）。  \n    \n    ```javascript\n    //遍历数组的方法，针对数组中每一个元素执行fn函数，并将数组索引和元素作为参数传递，后面用\n    function each(arr, fn) {\n      for (var cur = 0; cur < arr.length; cur++) {\n        fn(arr[cur], cur);\n      }\n    }\n    window.onload = function() {\n      ...\n      var queue = {\n        queue: [],\n        ...\n        paint: function() {\n          var str = \"\";\n          each(this.queue, function(item){str += (\"<div>\" + parseInt(item) + \"</div>\")});\n          queueWrapper.innerHTML = str;\n          addDivDelEvent();\n        },\n        ...\n      };\n    }\n    ```\n\n* :bookmark: [`Array.prototype.splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)\n    \n    > 语法：`array.splice(start, deleteCount, item1ToAdd, item2ToAdd, ...)`\n    \n    可以使用 `arr.splice(index, 1)` 来删除 `index` 位置上的数组元素（而不用像我那样使用 `filter` 方法）。\n\n* :ribbon: 循环绑定事件 & 闭包\n\n```javascript\nfunction addDivDelEvent() {\n  for (var cur = 0; cur < queueWrapper.childNodes.length; cur++) {\n    //这里要使用闭包，否则永远绑定到指定 div 上的 delete 函数的参数永远等于跳出时的 cur 值(length);\n    addEvent(queueWrapper.childNodes[cur], \"click\", function(cur) {\n      return function() {\n        return queue.deleteID(cur)\n      };\n    }(cur));\n  }\n}\n```\n\n### [任务得分第二的团队的 solution](http://ife.baidu.com/review/detail?workId=2592)\n\n* :bookmark: `nodeName` VS `tagName`\n\n    > [nodeName 和 tagName 的区别](http://blog.csdn.net/borishuai/article/details/5719227)\n\n* :ribbon: 定义简单的 `$` 函数来减少 `document.getElementXXX` 的输入（以偷懒 :P）\n\n    ```javascript\n    var $ = function (id) {\n      return document.getElementById(id);\n    };\n    ```\n\n* :ribbon: 面向对象的封装（逻辑略复杂 :sweat_smile: - 加入 To Do 豪华午餐）\n\n### [任务得分第三的团队的 solution](http://ife.baidu.com/review/detail?workId=2753)\n\n* :bookmark: AGAIN：定义简单的 `$` 函数来减少 `document.getElementXXX` 的输入（以偷懒 :P）\n\n    ```javascript\n    $ = function (el) { return document.querySelector(el); };\n    ```\n\n* :bookmark: 利用了数组的 `map` 和 `join` 方法，避开了不必要的循环\n\n    ```javascript\n    function render() {\n      $('#result').innerHTML =\n      data.map(function(d) { return \"<div>\" + d + \"</div>\"; })\n        .join('');\n    }\n    ```\n\n    另外注意上面代码中的类似于 jQuery 中的 **“链式”写法** 的写法！\n\n* :ribbon: 通过 `[].slice` 和 `.call/.apply` 来使类数组也可以使用数组的方法 & 将 `[].方法名` 作为参数传入函数增强了代码复用\n\n    e.g. Line 36:`var args = [].slice.call(arguments, 2);`，其中 `arguments` 是函数 `deal` 的参数（类数组）。\n\n* :ribbon: 将四个按钮和队列中元素的五种点击事件抽象为了 `deal` 函数\n\n* :ribbon: `try/catch` 的合理使用\n\n* :ribbon: `parseInt()` 使得 `007` 这样的输入（变为 `7` ）\n\n* :ribbon: 通过 `[].indexOf` 和 `.call` 来得出当前节点是父元素的第几个子节点\n\n    ```javascript\n    function getClickIndex(e) {\n      var node = e.target;\n      return [].indexOf.call(node.parentNode.children, node);\n    }\n    ```\n\n* :pensive: 小疏忽\n\n    > 1. 移除的逻辑没有队列为空的检验：最后弹窗为空时，点击“左侧出/右侧出”会弹出 `undefined` 。\n    > 2. 从用户体验的角度考虑，对输入的字符串 `.trim()` 一下会比较好。\n    > \n    > P.S. 内心 OS：看到这么简洁的代码真的忍不住想跪舔一下。因某位“缺注释、看不懂”等理由给了 5 分而位列第三实在可惜。以及“五个非洲人”（一本正经的 Five-African）的队名，够我笑一个星期了XD。\n\n## To Do\n\n[ ] 理清[任务得分第二的团队的 solution](http://ife.baidu.com/review/detail?workId=2592)的逻辑（[JS代码](https://github.com/zp1996/ife-2016/blob/master/task_2_18/task_2_18.js)）\n\n> P.S. 出于易读性的考虑，以上代码的命名和缩进可能有所修改。","slug":"IFE-2016-SP-task18","published":1,"updated":"2018-08-25T02:22:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbp8000f5xzxcklbr1nd","content":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task18 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"400px\" src=\"//jsfiddle.net/L81pe3r6/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>\n<a id=\"more\"></a>\n<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<h3 id=\"任务得分第一的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第一的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/review/detail?workId=2673\" target=\"_blank\" rel=\"noopener\">任务得分第一的团队的 solution</a></h3>\n<ul>\n<li>\n<p>🔖 AGAIN：事件绑定函数的兼容性</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEvent</span>(<span class=\"params\">element, event, handler</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">    element.addEventListener(event, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent) &#123;</span><br><span class=\"line\">    element.attachEvent(<span class=\"string\">\"on\"</span> + event, handler);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    element[<span class=\"string\">\"on\"</span> + event] = handler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>🎀 将数据 queue 和与之相关的方法封装成了一个对象</p>\n<blockquote>\n<p>😕 要挑刺的话，我觉得最好不要把 <code>queue</code> 对象内部的数据命名为 <code>str</code> 。<br>\n<code>str</code> 让人马上想到字符串而不是数组，而且 <code>paint</code> 方法内部的局部变量也名为 <code>str</code> 难免让人产生混淆（比如我读 <code>paint</code> 方法的相关代码的时候确实弄混了Orz）。</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//遍历数组的方法，针对数组中每一个元素执行fn函数，并将数组索引和元素作为参数传递，后面用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">each</span>(<span class=\"params\">arr, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> cur = <span class=\"number\">0</span>; cur &lt; arr.length; cur++) &#123;</span><br><span class=\"line\">    fn(arr[cur], cur);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queue = &#123;</span><br><span class=\"line\">    queue: [],</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    paint: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      each(<span class=\"keyword\">this</span>.queue, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;str += (<span class=\"string\">\"&lt;div&gt;\"</span> + <span class=\"built_in\">parseInt</span>(item) + <span class=\"string\">\"&lt;/div&gt;\"</span>)&#125;);</span><br><span class=\"line\">      queueWrapper.innerHTML = str;</span><br><span class=\"line\">      addDivDelEvent();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>🔖 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\" target=\"_blank\" rel=\"noopener\"><code>Array.prototype.splice()</code></a></p>\n<blockquote>\n<p>语法：<code>array.splice(start, deleteCount, item1ToAdd, item2ToAdd, ...)</code></p>\n</blockquote>\n<p>可以使用 <code>arr.splice(index, 1)</code> 来删除 <code>index</code> 位置上的数组元素（而不用像我那样使用 <code>filter</code> 方法）。</p>\n</li>\n<li>\n<p>🎀 循环绑定事件 &amp; 闭包</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addDivDelEvent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> cur = <span class=\"number\">0</span>; cur &lt; queueWrapper.childNodes.length; cur++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里要使用闭包，否则永远绑定到指定 div 上的 delete 函数的参数永远等于跳出时的 cur 值(length);</span></span><br><span class=\"line\">    addEvent(queueWrapper.childNodes[cur], <span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cur</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queue.deleteID(cur)</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;(cur));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"任务得分第二的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第二的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/review/detail?workId=2592\" target=\"_blank\" rel=\"noopener\">任务得分第二的团队的 solution</a></h3>\n<ul>\n<li>\n<p>🔖 <code>nodeName</code> VS <code>tagName</code></p>\n<blockquote>\n<p><a href=\"http://blog.csdn.net/borishuai/article/details/5719227\" target=\"_blank\" rel=\"noopener\">nodeName 和 tagName 的区别</a></p>\n</blockquote>\n</li>\n<li>\n<p>🎀 定义简单的 <code>$</code> 函数来减少 <code>document.getElementXXX</code> 的输入（以偷懒 😛）</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(id);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>🎀 面向对象的封装（逻辑略复杂 😅 - 加入 To Do 豪华午餐）</p>\n</li>\n</ul>\n<h3 id=\"任务得分第三的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第三的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/review/detail?workId=2753\" target=\"_blank\" rel=\"noopener\">任务得分第三的团队的 solution</a></h3>\n<ul>\n<li>\n<p>🔖 AGAIN：定义简单的 <code>$</code> 函数来减少 <code>document.getElementXXX</code> 的输入（以偷懒 😛）</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(el); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>🔖 利用了数组的 <code>map</code> 和 <code>join</code> 方法，避开了不必要的循环</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'#result'</span>).innerHTML =</span><br><span class=\"line\">  data.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;div&gt;\"</span> + d + <span class=\"string\">\"&lt;/div&gt;\"</span>; &#125;)</span><br><span class=\"line\">    .join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外注意上面代码中的类似于 jQuery 中的 <strong>“链式”写法</strong> 的写法！</p>\n</li>\n<li>\n<p>🎀 通过 <code>[].slice</code> 和 <code>.call/.apply</code> 来使类数组也可以使用数组的方法 &amp; 将 <code>[].方法名</code> 作为参数传入函数增强了代码复用</p>\n<p>e.g. Line 36:<code>var args = [].slice.call(arguments, 2);</code>，其中 <code>arguments</code> 是函数 <code>deal</code> 的参数（类数组）。</p>\n</li>\n<li>\n<p>🎀 将四个按钮和队列中元素的五种点击事件抽象为了 <code>deal</code> 函数</p>\n</li>\n<li>\n<p>🎀 <code>try/catch</code> 的合理使用</p>\n</li>\n<li>\n<p>🎀 <code>parseInt()</code> 使得 <code>007</code> 这样的输入（变为 <code>7</code> ）</p>\n</li>\n<li>\n<p>🎀 通过 <code>[].indexOf</code> 和 <code>.call</code> 来得出当前节点是父元素的第几个子节点</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getClickIndex</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> node = e.target;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [].indexOf.call(node.parentNode.children, node);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>😔 小疏忽</p>\n<blockquote>\n<ol>\n<li>移除的逻辑没有队列为空的检验：最后弹窗为空时，点击“左侧出/右侧出”会弹出 <code>undefined</code> 。</li>\n<li>从用户体验的角度考虑，对输入的字符串 <code>.trim()</code> 一下会比较好。</li>\n</ol>\n<p>P.S. 内心 OS：看到这么简洁的代码真的忍不住想跪舔一下。因某位“缺注释、看不懂”等理由给了 5 分而位列第三实在可惜。以及“五个非洲人”（一本正经的 Five-African）的队名，够我笑一个星期了XD。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"to-do\"><a class=\"header-anchor\" href=\"#to-do\">¶</a>To Do</h2>\n<p><input type=\"checkbox\" id=\"checkbox0\"><label for=\"checkbox0\">理清</label><a href=\"http://ife.baidu.com/review/detail?workId=2592\" target=\"_blank\" rel=\"noopener\">任务得分第二的团队的 solution</a>的逻辑（<a href=\"https://github.com/zp1996/ife-2016/blob/master/task_2_18/task_2_18.js\" target=\"_blank\" rel=\"noopener\">JS代码</a>）</p>\n<blockquote>\n<p>P.S. 出于易读性的考虑，以上代码的命名和缩进可能有所修改。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task18 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"400px\" src=\"//jsfiddle.net/L81pe3r6/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>","more":"<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<h3 id=\"任务得分第一的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第一的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/review/detail?workId=2673\" target=\"_blank\" rel=\"noopener\">任务得分第一的团队的 solution</a></h3>\n<ul>\n<li>\n<p>🔖 AGAIN：事件绑定函数的兼容性</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEvent</span>(<span class=\"params\">element, event, handler</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">    element.addEventListener(event, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent) &#123;</span><br><span class=\"line\">    element.attachEvent(<span class=\"string\">\"on\"</span> + event, handler);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    element[<span class=\"string\">\"on\"</span> + event] = handler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>🎀 将数据 queue 和与之相关的方法封装成了一个对象</p>\n<blockquote>\n<p>😕 要挑刺的话，我觉得最好不要把 <code>queue</code> 对象内部的数据命名为 <code>str</code> 。<br>\n<code>str</code> 让人马上想到字符串而不是数组，而且 <code>paint</code> 方法内部的局部变量也名为 <code>str</code> 难免让人产生混淆（比如我读 <code>paint</code> 方法的相关代码的时候确实弄混了Orz）。</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//遍历数组的方法，针对数组中每一个元素执行fn函数，并将数组索引和元素作为参数传递，后面用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">each</span>(<span class=\"params\">arr, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> cur = <span class=\"number\">0</span>; cur &lt; arr.length; cur++) &#123;</span><br><span class=\"line\">    fn(arr[cur], cur);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queue = &#123;</span><br><span class=\"line\">    queue: [],</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    paint: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      each(<span class=\"keyword\">this</span>.queue, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;str += (<span class=\"string\">\"&lt;div&gt;\"</span> + <span class=\"built_in\">parseInt</span>(item) + <span class=\"string\">\"&lt;/div&gt;\"</span>)&#125;);</span><br><span class=\"line\">      queueWrapper.innerHTML = str;</span><br><span class=\"line\">      addDivDelEvent();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>🔖 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\" target=\"_blank\" rel=\"noopener\"><code>Array.prototype.splice()</code></a></p>\n<blockquote>\n<p>语法：<code>array.splice(start, deleteCount, item1ToAdd, item2ToAdd, ...)</code></p>\n</blockquote>\n<p>可以使用 <code>arr.splice(index, 1)</code> 来删除 <code>index</code> 位置上的数组元素（而不用像我那样使用 <code>filter</code> 方法）。</p>\n</li>\n<li>\n<p>🎀 循环绑定事件 &amp; 闭包</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addDivDelEvent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> cur = <span class=\"number\">0</span>; cur &lt; queueWrapper.childNodes.length; cur++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里要使用闭包，否则永远绑定到指定 div 上的 delete 函数的参数永远等于跳出时的 cur 值(length);</span></span><br><span class=\"line\">    addEvent(queueWrapper.childNodes[cur], <span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cur</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queue.deleteID(cur)</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;(cur));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"任务得分第二的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第二的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/review/detail?workId=2592\" target=\"_blank\" rel=\"noopener\">任务得分第二的团队的 solution</a></h3>\n<ul>\n<li>\n<p>🔖 <code>nodeName</code> VS <code>tagName</code></p>\n<blockquote>\n<p><a href=\"http://blog.csdn.net/borishuai/article/details/5719227\" target=\"_blank\" rel=\"noopener\">nodeName 和 tagName 的区别</a></p>\n</blockquote>\n</li>\n<li>\n<p>🎀 定义简单的 <code>$</code> 函数来减少 <code>document.getElementXXX</code> 的输入（以偷懒 😛）</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(id);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>🎀 面向对象的封装（逻辑略复杂 😅 - 加入 To Do 豪华午餐）</p>\n</li>\n</ul>\n<h3 id=\"任务得分第三的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第三的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/review/detail?workId=2753\" target=\"_blank\" rel=\"noopener\">任务得分第三的团队的 solution</a></h3>\n<ul>\n<li>\n<p>🔖 AGAIN：定义简单的 <code>$</code> 函数来减少 <code>document.getElementXXX</code> 的输入（以偷懒 😛）</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(el); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>🔖 利用了数组的 <code>map</code> 和 <code>join</code> 方法，避开了不必要的循环</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'#result'</span>).innerHTML =</span><br><span class=\"line\">  data.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;div&gt;\"</span> + d + <span class=\"string\">\"&lt;/div&gt;\"</span>; &#125;)</span><br><span class=\"line\">    .join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外注意上面代码中的类似于 jQuery 中的 <strong>“链式”写法</strong> 的写法！</p>\n</li>\n<li>\n<p>🎀 通过 <code>[].slice</code> 和 <code>.call/.apply</code> 来使类数组也可以使用数组的方法 &amp; 将 <code>[].方法名</code> 作为参数传入函数增强了代码复用</p>\n<p>e.g. Line 36:<code>var args = [].slice.call(arguments, 2);</code>，其中 <code>arguments</code> 是函数 <code>deal</code> 的参数（类数组）。</p>\n</li>\n<li>\n<p>🎀 将四个按钮和队列中元素的五种点击事件抽象为了 <code>deal</code> 函数</p>\n</li>\n<li>\n<p>🎀 <code>try/catch</code> 的合理使用</p>\n</li>\n<li>\n<p>🎀 <code>parseInt()</code> 使得 <code>007</code> 这样的输入（变为 <code>7</code> ）</p>\n</li>\n<li>\n<p>🎀 通过 <code>[].indexOf</code> 和 <code>.call</code> 来得出当前节点是父元素的第几个子节点</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getClickIndex</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> node = e.target;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [].indexOf.call(node.parentNode.children, node);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>😔 小疏忽</p>\n<blockquote>\n<ol>\n<li>移除的逻辑没有队列为空的检验：最后弹窗为空时，点击“左侧出/右侧出”会弹出 <code>undefined</code> 。</li>\n<li>从用户体验的角度考虑，对输入的字符串 <code>.trim()</code> 一下会比较好。</li>\n</ol>\n<p>P.S. 内心 OS：看到这么简洁的代码真的忍不住想跪舔一下。因某位“缺注释、看不懂”等理由给了 5 分而位列第三实在可惜。以及“五个非洲人”（一本正经的 Five-African）的队名，够我笑一个星期了XD。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"to-do\"><a class=\"header-anchor\" href=\"#to-do\">¶</a>To Do</h2>\n<p><input type=\"checkbox\" id=\"checkbox0\"><label for=\"checkbox0\">理清</label><a href=\"http://ife.baidu.com/review/detail?workId=2592\" target=\"_blank\" rel=\"noopener\">任务得分第二的团队的 solution</a>的逻辑（<a href=\"https://github.com/zp1996/ife-2016/blob/master/task_2_18/task_2_18.js\" target=\"_blank\" rel=\"noopener\">JS代码</a>）</p>\n<blockquote>\n<p>P.S. 出于易读性的考虑，以上代码的命名和缩进可能有所修改。</p>\n</blockquote>"},{"title":"IFE-2016-SP-task29 Verify Input","date":"2017-01-11T11:44:24.000Z","_content":"\n## My Solution\n\nMy solution to task29 is available on jsfiddle: \n{% jsfiddle 16nbyx5z 'default' 'light' '100%' '400px' %}\n\n<!-- more -->\n\n* 多层嵌套的 `if` 语句可以通过 `else if` 语句来简化\n    - :confused: 我原来的代码：\n        \n        ```javascript\n        if (val) {\n          if (notContainWhitespace(val)) {\n            if (isValidLength(val)) {} else {\n              information = \"用户名长度要在 4 ~ 16 个字符内！\";\n            }\n          } else {\n            information = \"用户名不能包含空格！\";\n          }\n        } else {\n          information = \"用户名不能为空！\";\n        }\n        ```\n\n    - :blush: 修改后的代码：\n\n        ```javascript\n        if (!val) {\n          information = \"用户名不能为空！\";\n        } else if (!notContainWhitespace(val)) {\n          information = \"用户名不能包含空格！\";\n        } else if (!isValidLength(val)) {\n          information = \"用户名长度要在 4 ~ 16 个字符内！\";\n        }\n        ```\n\n* 其他：姓名 vs 用户名\n    \n    这里我想当然地把原任务中要求的“姓名”改成了“用户名”，现在觉得有不妥 :confused: 。\n\n    1. 首先，当然，两者的含义不一样。\n    2. 更重要的是，姓名中间可以包含空格——比如，英文名至少是两部分，甚至更多。所以我的 solution 比别的团队的（按照要求来的）多了一个空格的判断，因为一般而言用户名中是不允许有空格的。\n\n## Compared with others'\n\n### [任务得分第一的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=8390) 和 [任务得分第二的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=4872)\n\n* :bookmark: 利用字符串的 [`charCodeAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt) 方法来计算字符串长度：\n\n```javascript\nfunction countLength(str) {\n  var inputLength = 0;\n  for (var i = 0; i < str.length; i++) {\n    var countCode = str.charCodeAt(i);\n    if (countCode >= 0 && countCode <=128) {\n      inputLength += 1;\n    } else {\n      inputLength += 2;\n    }\n  }\n  return inputLength;\n}\n```\n\n* :question: 用两行三列的 `table` 来布局\n    \n    和该团队一样，这种写法我也见过。客观地说，是可以保持提示信息的宽度总是不超过正上方的输入框的。但是，由于过去 `table` 一度被滥用于全站布局，导致我对使用 `table` 来布局有些抵触 :no_mouth: 。关于这里用好还是不用好，这个我先保留意见 :pensive: 。\n\n### [任务得分第三的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=3421)\n\n* 将提示信息和相应的类封装成了一个对象，并作为 UI 更新接口的参数\n\n    比起我的相关逻辑而言，分工更加明确 ~~，而且入口单一（弱耦合）【后半句我不太确定，特别是“耦合性”，这里暂时先去掉】~~。\n\n    - 第一部分的判断还算相似：\n        + 我的代码：\n\n            ```javascript\n            if (!val) {\n              information = \"用户名不能为空！\";\n            } else if (!notContainWhitespace(val)) {\n              information = \"用户名不能包含空格！\";\n            } else if (!isValidLength(val)) {\n              information = \"用户名长度要在 4 ~ 16 个字符内！\";\n            }\n            ```\n\n        + 该团队的代码：\n\n            ```javascript\n            if(testStr.length === 0 ){\n              paramObj = msgs.error_required;// 不能为空 “姓名不能为空”\n            }else if( !lenReg.test(testStr)){\n              paramObj = msgs.error_length;// 字符长度不对 “长度为4~16个字符”\n            }else{\n              paramObj = msgs.right;// 格式正确\n            }\n            ```\n\n    - 第二部分，我用了一个 `if` 判断，而该团队得益于将提示信息视作一个对象（其实，真正避免了 `if` 语句的是其 `UIInterface` 方法里对 `className` 的粗暴操作，这点个人认为我的做法更稳妥 :flushed: ），而直接将其做为一个接口的参数：\n        + 我的代码：\n\n            ```javascript\n            if (information) {\n              invalidStylish(information);\n            } else { validStylish(); }\n            ```\n\n        + 该团队的代码：\n\n            ```javascript\n            UIInterface(veBoxEle, paramObj); \n            ```\n\n* :no_mouth: ~~`console.debug()` 这个在 MDN 上已经不推荐使用了~~  \n* 一句话评价：能用正则的都用正则了 :joy:\n\n## 正则匹配中文 \n\n* :exclamation: 判断中文和 **编码** 有关\n    \n    > 做的时候因为犯懒没研究各种说法不一的本质原因，现在得知问题出在 **编码** 上。我做 task 的时候用的基本是 Sublime Text 3，而 Sublime 的默认编码是 `UTF-8` （详见 `Preferences->Settings Default->\"default_encoding\": \"UTF-8\"`）。\n    > \n    > 关于字符编码的历史，[知乎上这个回答](https://www.zhihu.com/question/23374078/answer/69732605)描述得很生动易懂。\n\n    所以，下面，我使用的正则对应的编码是 `GB2312` ；而考虑到 Sublime 的编码，我应该改为使用 `/[\\u4E00-\\u9FA5]/` 这样的 UTF-8 对应的正则。\n\n* 我一开始直接匹配的双字节字符：`/[^x00-xff]/`：\n\n    ```javascript\n    var enReg = /[x00-xff]/g;\n    var zhReg = /[^x00-xff]/g;\n    var length = 0;\n    length += value.match(enReg) && value.match(enReg).length;\n    length += value.match(zhReg) && value.match(zhReg).length * 2;\n    ```\n\n* 上面这种写法可以改进为：\n\n    ```javascript\n    var zhReg = /[^x00-xff]/g;\n    var length = zhReg.replace(zhReg, \"aa\").length;\n    ```\n\n    > 我在控制台测试的时候，`~` `-` `!` 等也被视为双字节字符了 OAO ！\n    > 究其原因估计是遵循 `GB2312` 编码的时候，`~` `-` `!` 等在双字节字符中也存在对应编码。\n\n* 前二团队将 `ASCII` 码以外的都：\n    \n    ```javascript\n    // 在 for 循环内部\n    var countCode = str.charCodeAt(i);\n    if (countCode >= 0 && countCode <=128) {\n      inputLength += 1;\n    } else {\n      inputLength += 2;\n    }\n    ```\n\n* 第三团队匹配的是中文字符（应该不是全部，但基本涵盖常用？）：\n\n    ```javascript\n    var chineseReg = /[\\u4E00-\\uFA29]|[\\uE7C7-\\uE7F3]/g;\n    var validLength = /^.{4,16}$/.test(trimmedStr.replace(chineseReg, '--'));\n    ```\n    \n> **To be read**\n> [ ] [What's the complete range for Chinese characters in Unicode? @SO](http://stackoverflow.com/questions/1366068/whats-the-complete-range-for-chinese-characters-in-unicode)\n> [ ] [UTF-8 @wiki](https://www.wikiwand.com/zh/UTF-8)\n> [ ] [GB2312 @wiki](https://www.wikiwand.com/zh/GB_2312)\n","source":"_posts/IFE-2016-SP-task29.md","raw":"---\ntitle: IFE-2016-SP-task29 Verify Input\ndate: 2017-01-11 19:44:24\ntags: [IFE]\n---\n\n## My Solution\n\nMy solution to task29 is available on jsfiddle: \n{% jsfiddle 16nbyx5z 'default' 'light' '100%' '400px' %}\n\n<!-- more -->\n\n* 多层嵌套的 `if` 语句可以通过 `else if` 语句来简化\n    - :confused: 我原来的代码：\n        \n        ```javascript\n        if (val) {\n          if (notContainWhitespace(val)) {\n            if (isValidLength(val)) {} else {\n              information = \"用户名长度要在 4 ~ 16 个字符内！\";\n            }\n          } else {\n            information = \"用户名不能包含空格！\";\n          }\n        } else {\n          information = \"用户名不能为空！\";\n        }\n        ```\n\n    - :blush: 修改后的代码：\n\n        ```javascript\n        if (!val) {\n          information = \"用户名不能为空！\";\n        } else if (!notContainWhitespace(val)) {\n          information = \"用户名不能包含空格！\";\n        } else if (!isValidLength(val)) {\n          information = \"用户名长度要在 4 ~ 16 个字符内！\";\n        }\n        ```\n\n* 其他：姓名 vs 用户名\n    \n    这里我想当然地把原任务中要求的“姓名”改成了“用户名”，现在觉得有不妥 :confused: 。\n\n    1. 首先，当然，两者的含义不一样。\n    2. 更重要的是，姓名中间可以包含空格——比如，英文名至少是两部分，甚至更多。所以我的 solution 比别的团队的（按照要求来的）多了一个空格的判断，因为一般而言用户名中是不允许有空格的。\n\n## Compared with others'\n\n### [任务得分第一的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=8390) 和 [任务得分第二的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=4872)\n\n* :bookmark: 利用字符串的 [`charCodeAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt) 方法来计算字符串长度：\n\n```javascript\nfunction countLength(str) {\n  var inputLength = 0;\n  for (var i = 0; i < str.length; i++) {\n    var countCode = str.charCodeAt(i);\n    if (countCode >= 0 && countCode <=128) {\n      inputLength += 1;\n    } else {\n      inputLength += 2;\n    }\n  }\n  return inputLength;\n}\n```\n\n* :question: 用两行三列的 `table` 来布局\n    \n    和该团队一样，这种写法我也见过。客观地说，是可以保持提示信息的宽度总是不超过正上方的输入框的。但是，由于过去 `table` 一度被滥用于全站布局，导致我对使用 `table` 来布局有些抵触 :no_mouth: 。关于这里用好还是不用好，这个我先保留意见 :pensive: 。\n\n### [任务得分第三的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=3421)\n\n* 将提示信息和相应的类封装成了一个对象，并作为 UI 更新接口的参数\n\n    比起我的相关逻辑而言，分工更加明确 ~~，而且入口单一（弱耦合）【后半句我不太确定，特别是“耦合性”，这里暂时先去掉】~~。\n\n    - 第一部分的判断还算相似：\n        + 我的代码：\n\n            ```javascript\n            if (!val) {\n              information = \"用户名不能为空！\";\n            } else if (!notContainWhitespace(val)) {\n              information = \"用户名不能包含空格！\";\n            } else if (!isValidLength(val)) {\n              information = \"用户名长度要在 4 ~ 16 个字符内！\";\n            }\n            ```\n\n        + 该团队的代码：\n\n            ```javascript\n            if(testStr.length === 0 ){\n              paramObj = msgs.error_required;// 不能为空 “姓名不能为空”\n            }else if( !lenReg.test(testStr)){\n              paramObj = msgs.error_length;// 字符长度不对 “长度为4~16个字符”\n            }else{\n              paramObj = msgs.right;// 格式正确\n            }\n            ```\n\n    - 第二部分，我用了一个 `if` 判断，而该团队得益于将提示信息视作一个对象（其实，真正避免了 `if` 语句的是其 `UIInterface` 方法里对 `className` 的粗暴操作，这点个人认为我的做法更稳妥 :flushed: ），而直接将其做为一个接口的参数：\n        + 我的代码：\n\n            ```javascript\n            if (information) {\n              invalidStylish(information);\n            } else { validStylish(); }\n            ```\n\n        + 该团队的代码：\n\n            ```javascript\n            UIInterface(veBoxEle, paramObj); \n            ```\n\n* :no_mouth: ~~`console.debug()` 这个在 MDN 上已经不推荐使用了~~  \n* 一句话评价：能用正则的都用正则了 :joy:\n\n## 正则匹配中文 \n\n* :exclamation: 判断中文和 **编码** 有关\n    \n    > 做的时候因为犯懒没研究各种说法不一的本质原因，现在得知问题出在 **编码** 上。我做 task 的时候用的基本是 Sublime Text 3，而 Sublime 的默认编码是 `UTF-8` （详见 `Preferences->Settings Default->\"default_encoding\": \"UTF-8\"`）。\n    > \n    > 关于字符编码的历史，[知乎上这个回答](https://www.zhihu.com/question/23374078/answer/69732605)描述得很生动易懂。\n\n    所以，下面，我使用的正则对应的编码是 `GB2312` ；而考虑到 Sublime 的编码，我应该改为使用 `/[\\u4E00-\\u9FA5]/` 这样的 UTF-8 对应的正则。\n\n* 我一开始直接匹配的双字节字符：`/[^x00-xff]/`：\n\n    ```javascript\n    var enReg = /[x00-xff]/g;\n    var zhReg = /[^x00-xff]/g;\n    var length = 0;\n    length += value.match(enReg) && value.match(enReg).length;\n    length += value.match(zhReg) && value.match(zhReg).length * 2;\n    ```\n\n* 上面这种写法可以改进为：\n\n    ```javascript\n    var zhReg = /[^x00-xff]/g;\n    var length = zhReg.replace(zhReg, \"aa\").length;\n    ```\n\n    > 我在控制台测试的时候，`~` `-` `!` 等也被视为双字节字符了 OAO ！\n    > 究其原因估计是遵循 `GB2312` 编码的时候，`~` `-` `!` 等在双字节字符中也存在对应编码。\n\n* 前二团队将 `ASCII` 码以外的都：\n    \n    ```javascript\n    // 在 for 循环内部\n    var countCode = str.charCodeAt(i);\n    if (countCode >= 0 && countCode <=128) {\n      inputLength += 1;\n    } else {\n      inputLength += 2;\n    }\n    ```\n\n* 第三团队匹配的是中文字符（应该不是全部，但基本涵盖常用？）：\n\n    ```javascript\n    var chineseReg = /[\\u4E00-\\uFA29]|[\\uE7C7-\\uE7F3]/g;\n    var validLength = /^.{4,16}$/.test(trimmedStr.replace(chineseReg, '--'));\n    ```\n    \n> **To be read**\n> [ ] [What's the complete range for Chinese characters in Unicode? @SO](http://stackoverflow.com/questions/1366068/whats-the-complete-range-for-chinese-characters-in-unicode)\n> [ ] [UTF-8 @wiki](https://www.wikiwand.com/zh/UTF-8)\n> [ ] [GB2312 @wiki](https://www.wikiwand.com/zh/GB_2312)\n","slug":"IFE-2016-SP-task29","published":1,"updated":"2018-08-25T02:22:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbpa000h5xzxgxhpambm","content":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task29 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"400px\" src=\"//jsfiddle.net/16nbyx5z/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>\n<a id=\"more\"></a>\n<ul>\n<li>\n<p>多层嵌套的 <code>if</code> 语句可以通过 <code>else if</code> 语句来简化</p>\n<ul>\n<li>\n<p>😕 我原来的代码：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (val) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (notContainWhitespace(val)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isValidLength(val)) &#123;&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      information = <span class=\"string\">\"用户名长度要在 4 ~ 16 个字符内！\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    information = <span class=\"string\">\"用户名不能包含空格！\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  information = <span class=\"string\">\"用户名不能为空！\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>😊 修改后的代码：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!val) &#123;</span><br><span class=\"line\">  information = <span class=\"string\">\"用户名不能为空！\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!notContainWhitespace(val)) &#123;</span><br><span class=\"line\">  information = <span class=\"string\">\"用户名不能包含空格！\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isValidLength(val)) &#123;</span><br><span class=\"line\">  information = <span class=\"string\">\"用户名长度要在 4 ~ 16 个字符内！\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>其他：姓名 vs 用户名</p>\n<p>这里我想当然地把原任务中要求的“姓名”改成了“用户名”，现在觉得有不妥 😕 。</p>\n<ol>\n<li>首先，当然，两者的含义不一样。</li>\n<li>更重要的是，姓名中间可以包含空格——比如，英文名至少是两部分，甚至更多。所以我的 solution 比别的团队的（按照要求来的）多了一个空格的判断，因为一般而言用户名中是不允许有空格的。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<h3 id=\"任务得分第一的团队的-solution-和-任务得分第二的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第一的团队的-solution-和-任务得分第二的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=8390\" target=\"_blank\" rel=\"noopener\">任务得分第一的团队的 solution</a> 和 <a href=\"http://ife.baidu.com/2016/review/detail?workId=4872\" target=\"_blank\" rel=\"noopener\">任务得分第二的团队的 solution</a></h3>\n<ul>\n<li>🔖 利用字符串的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\" target=\"_blank\" rel=\"noopener\"><code>charCodeAt()</code></a> 方法来计算字符串长度：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countLength</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> inputLength = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> countCode = str.charCodeAt(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (countCode &gt;= <span class=\"number\">0</span> &amp;&amp; countCode &lt;=<span class=\"number\">128</span>) &#123;</span><br><span class=\"line\">      inputLength += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      inputLength += <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> inputLength;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>❓ 用两行三列的 <code>table</code> 来布局</p>\n<p>和该团队一样，这种写法我也见过。客观地说，是可以保持提示信息的宽度总是不超过正上方的输入框的。但是，由于过去 <code>table</code> 一度被滥用于全站布局，导致我对使用 <code>table</code> 来布局有些抵触 😶 。关于这里用好还是不用好，这个我先保留意见 😔 。</p>\n</li>\n</ul>\n<h3 id=\"任务得分第三的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第三的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=3421\" target=\"_blank\" rel=\"noopener\">任务得分第三的团队的 solution</a></h3>\n<ul>\n<li>\n<p>将提示信息和相应的类封装成了一个对象，并作为 UI 更新接口的参数</p>\n<p>比起我的相关逻辑而言，分工更加明确 <s>，而且入口单一（弱耦合）【后半句我不太确定，特别是“耦合性”，这里暂时先去掉】</s>。</p>\n<ul>\n<li>\n<p>第一部分的判断还算相似：</p>\n<ul>\n<li>\n<p>我的代码：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!val) &#123;</span><br><span class=\"line\">  information = <span class=\"string\">\"用户名不能为空！\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!notContainWhitespace(val)) &#123;</span><br><span class=\"line\">  information = <span class=\"string\">\"用户名不能包含空格！\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isValidLength(val)) &#123;</span><br><span class=\"line\">  information = <span class=\"string\">\"用户名长度要在 4 ~ 16 个字符内！\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>该团队的代码：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(testStr.length === <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">  paramObj = msgs.error_required;<span class=\"comment\">// 不能为空 “姓名不能为空”</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( !lenReg.test(testStr))&#123;</span><br><span class=\"line\">  paramObj = msgs.error_length;<span class=\"comment\">// 字符长度不对 “长度为4~16个字符”</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  paramObj = msgs.right;<span class=\"comment\">// 格式正确</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>第二部分，我用了一个 <code>if</code> 判断，而该团队得益于将提示信息视作一个对象（其实，真正避免了 <code>if</code> 语句的是其 <code>UIInterface</code> 方法里对 <code>className</code> 的粗暴操作，这点个人认为我的做法更稳妥 😳 ），而直接将其做为一个接口的参数：</p>\n<ul>\n<li>\n<p>我的代码：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (information) &#123;</span><br><span class=\"line\">  invalidStylish(information);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; validStylish(); &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>该团队的代码：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIInterface(veBoxEle, paramObj);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>😶 <s><code>console.debug()</code> 这个在 MDN 上已经不推荐使用了</s></p>\n</li>\n<li>\n<p>一句话评价：能用正则的都用正则了 😂</p>\n</li>\n</ul>\n<h2 id=\"正则匹配中文\"><a class=\"header-anchor\" href=\"#正则匹配中文\">¶</a>正则匹配中文</h2>\n<ul>\n<li>\n<p>❗️ 判断中文和 <strong>编码</strong> 有关</p>\n<blockquote>\n<p>做的时候因为犯懒没研究各种说法不一的本质原因，现在得知问题出在 <strong>编码</strong> 上。我做 task 的时候用的基本是 Sublime Text 3，而 Sublime 的默认编码是 <code>UTF-8</code> （详见 <code>Preferences-&gt;Settings Default-&gt;&quot;default_encoding&quot;: &quot;UTF-8&quot;</code>）。</p>\n<p>关于字符编码的历史，<a href=\"https://www.zhihu.com/question/23374078/answer/69732605\" target=\"_blank\" rel=\"noopener\">知乎上这个回答</a>描述得很生动易懂。</p>\n</blockquote>\n<p>所以，下面，我使用的正则对应的编码是 <code>GB2312</code> ；而考虑到 Sublime 的编码，我应该改为使用 <code>/[\\u4E00-\\u9FA5]/</code> 这样的 UTF-8 对应的正则。</p>\n</li>\n<li>\n<p>我一开始直接匹配的双字节字符：<code>/[^x00-xff]/</code>：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> enReg = <span class=\"regexp\">/[x00-xff]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> zhReg = <span class=\"regexp\">/[^x00-xff]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">length += value.match(enReg) &amp;&amp; value.match(enReg).length;</span><br><span class=\"line\">length += value.match(zhReg) &amp;&amp; value.match(zhReg).length * <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>上面这种写法可以改进为：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zhReg = <span class=\"regexp\">/[^x00-xff]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> length = zhReg.replace(zhReg, <span class=\"string\">\"aa\"</span>).length;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我在控制台测试的时候，<code>~</code> <code>-</code> <code>!</code> 等也被视为双字节字符了 OAO ！<br>\n究其原因估计是遵循 <code>GB2312</code> 编码的时候，<code>~</code> <code>-</code> <code>!</code> 等在双字节字符中也存在对应编码。</p>\n</blockquote>\n</li>\n<li>\n<p>前二团队将 <code>ASCII</code> 码以外的都：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在 for 循环内部</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countCode = str.charCodeAt(i);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (countCode &gt;= <span class=\"number\">0</span> &amp;&amp; countCode &lt;=<span class=\"number\">128</span>) &#123;</span><br><span class=\"line\">  inputLength += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  inputLength += <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>第三团队匹配的是中文字符（应该不是全部，但基本涵盖常用？）：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> chineseReg = <span class=\"regexp\">/[\\u4E00-\\uFA29]|[\\uE7C7-\\uE7F3]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> validLength = <span class=\"regexp\">/^.&#123;4,16&#125;$/</span>.test(trimmedStr.replace(chineseReg, <span class=\"string\">'--'</span>));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><strong>To be read</strong><br>\n<input type=\"checkbox\" id=\"checkbox2\"><label for=\"checkbox2\"></label><a href=\"http://stackoverflow.com/questions/1366068/whats-the-complete-range-for-chinese-characters-in-unicode\" target=\"_blank\" rel=\"noopener\">What’s the complete range for Chinese characters in Unicode? @SO</a><br>\n<input type=\"checkbox\" id=\"checkbox1\"><label for=\"checkbox1\"></label><a href=\"https://www.wikiwand.com/zh/UTF-8\" target=\"_blank\" rel=\"noopener\">UTF-8 @wiki</a><br>\n<input type=\"checkbox\" id=\"checkbox0\"><label for=\"checkbox0\"></label><a href=\"https://www.wikiwand.com/zh/GB_2312\" target=\"_blank\" rel=\"noopener\">GB2312 @wiki</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task29 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"400px\" src=\"//jsfiddle.net/16nbyx5z/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>","more":"<ul>\n<li>\n<p>多层嵌套的 <code>if</code> 语句可以通过 <code>else if</code> 语句来简化</p>\n<ul>\n<li>\n<p>😕 我原来的代码：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (val) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (notContainWhitespace(val)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isValidLength(val)) &#123;&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      information = <span class=\"string\">\"用户名长度要在 4 ~ 16 个字符内！\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    information = <span class=\"string\">\"用户名不能包含空格！\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  information = <span class=\"string\">\"用户名不能为空！\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>😊 修改后的代码：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!val) &#123;</span><br><span class=\"line\">  information = <span class=\"string\">\"用户名不能为空！\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!notContainWhitespace(val)) &#123;</span><br><span class=\"line\">  information = <span class=\"string\">\"用户名不能包含空格！\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isValidLength(val)) &#123;</span><br><span class=\"line\">  information = <span class=\"string\">\"用户名长度要在 4 ~ 16 个字符内！\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>其他：姓名 vs 用户名</p>\n<p>这里我想当然地把原任务中要求的“姓名”改成了“用户名”，现在觉得有不妥 😕 。</p>\n<ol>\n<li>首先，当然，两者的含义不一样。</li>\n<li>更重要的是，姓名中间可以包含空格——比如，英文名至少是两部分，甚至更多。所以我的 solution 比别的团队的（按照要求来的）多了一个空格的判断，因为一般而言用户名中是不允许有空格的。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<h3 id=\"任务得分第一的团队的-solution-和-任务得分第二的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第一的团队的-solution-和-任务得分第二的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=8390\" target=\"_blank\" rel=\"noopener\">任务得分第一的团队的 solution</a> 和 <a href=\"http://ife.baidu.com/2016/review/detail?workId=4872\" target=\"_blank\" rel=\"noopener\">任务得分第二的团队的 solution</a></h3>\n<ul>\n<li>🔖 利用字符串的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\" target=\"_blank\" rel=\"noopener\"><code>charCodeAt()</code></a> 方法来计算字符串长度：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countLength</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> inputLength = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> countCode = str.charCodeAt(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (countCode &gt;= <span class=\"number\">0</span> &amp;&amp; countCode &lt;=<span class=\"number\">128</span>) &#123;</span><br><span class=\"line\">      inputLength += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      inputLength += <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> inputLength;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>❓ 用两行三列的 <code>table</code> 来布局</p>\n<p>和该团队一样，这种写法我也见过。客观地说，是可以保持提示信息的宽度总是不超过正上方的输入框的。但是，由于过去 <code>table</code> 一度被滥用于全站布局，导致我对使用 <code>table</code> 来布局有些抵触 😶 。关于这里用好还是不用好，这个我先保留意见 😔 。</p>\n</li>\n</ul>\n<h3 id=\"任务得分第三的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第三的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=3421\" target=\"_blank\" rel=\"noopener\">任务得分第三的团队的 solution</a></h3>\n<ul>\n<li>\n<p>将提示信息和相应的类封装成了一个对象，并作为 UI 更新接口的参数</p>\n<p>比起我的相关逻辑而言，分工更加明确 <s>，而且入口单一（弱耦合）【后半句我不太确定，特别是“耦合性”，这里暂时先去掉】</s>。</p>\n<ul>\n<li>\n<p>第一部分的判断还算相似：</p>\n<ul>\n<li>\n<p>我的代码：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!val) &#123;</span><br><span class=\"line\">  information = <span class=\"string\">\"用户名不能为空！\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!notContainWhitespace(val)) &#123;</span><br><span class=\"line\">  information = <span class=\"string\">\"用户名不能包含空格！\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isValidLength(val)) &#123;</span><br><span class=\"line\">  information = <span class=\"string\">\"用户名长度要在 4 ~ 16 个字符内！\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>该团队的代码：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(testStr.length === <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">  paramObj = msgs.error_required;<span class=\"comment\">// 不能为空 “姓名不能为空”</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( !lenReg.test(testStr))&#123;</span><br><span class=\"line\">  paramObj = msgs.error_length;<span class=\"comment\">// 字符长度不对 “长度为4~16个字符”</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  paramObj = msgs.right;<span class=\"comment\">// 格式正确</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>第二部分，我用了一个 <code>if</code> 判断，而该团队得益于将提示信息视作一个对象（其实，真正避免了 <code>if</code> 语句的是其 <code>UIInterface</code> 方法里对 <code>className</code> 的粗暴操作，这点个人认为我的做法更稳妥 😳 ），而直接将其做为一个接口的参数：</p>\n<ul>\n<li>\n<p>我的代码：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (information) &#123;</span><br><span class=\"line\">  invalidStylish(information);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; validStylish(); &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>该团队的代码：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIInterface(veBoxEle, paramObj);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>😶 <s><code>console.debug()</code> 这个在 MDN 上已经不推荐使用了</s></p>\n</li>\n<li>\n<p>一句话评价：能用正则的都用正则了 😂</p>\n</li>\n</ul>\n<h2 id=\"正则匹配中文\"><a class=\"header-anchor\" href=\"#正则匹配中文\">¶</a>正则匹配中文</h2>\n<ul>\n<li>\n<p>❗️ 判断中文和 <strong>编码</strong> 有关</p>\n<blockquote>\n<p>做的时候因为犯懒没研究各种说法不一的本质原因，现在得知问题出在 <strong>编码</strong> 上。我做 task 的时候用的基本是 Sublime Text 3，而 Sublime 的默认编码是 <code>UTF-8</code> （详见 <code>Preferences-&gt;Settings Default-&gt;&quot;default_encoding&quot;: &quot;UTF-8&quot;</code>）。</p>\n<p>关于字符编码的历史，<a href=\"https://www.zhihu.com/question/23374078/answer/69732605\" target=\"_blank\" rel=\"noopener\">知乎上这个回答</a>描述得很生动易懂。</p>\n</blockquote>\n<p>所以，下面，我使用的正则对应的编码是 <code>GB2312</code> ；而考虑到 Sublime 的编码，我应该改为使用 <code>/[\\u4E00-\\u9FA5]/</code> 这样的 UTF-8 对应的正则。</p>\n</li>\n<li>\n<p>我一开始直接匹配的双字节字符：<code>/[^x00-xff]/</code>：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> enReg = <span class=\"regexp\">/[x00-xff]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> zhReg = <span class=\"regexp\">/[^x00-xff]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">length += value.match(enReg) &amp;&amp; value.match(enReg).length;</span><br><span class=\"line\">length += value.match(zhReg) &amp;&amp; value.match(zhReg).length * <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>上面这种写法可以改进为：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zhReg = <span class=\"regexp\">/[^x00-xff]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> length = zhReg.replace(zhReg, <span class=\"string\">\"aa\"</span>).length;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我在控制台测试的时候，<code>~</code> <code>-</code> <code>!</code> 等也被视为双字节字符了 OAO ！<br>\n究其原因估计是遵循 <code>GB2312</code> 编码的时候，<code>~</code> <code>-</code> <code>!</code> 等在双字节字符中也存在对应编码。</p>\n</blockquote>\n</li>\n<li>\n<p>前二团队将 <code>ASCII</code> 码以外的都：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在 for 循环内部</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countCode = str.charCodeAt(i);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (countCode &gt;= <span class=\"number\">0</span> &amp;&amp; countCode &lt;=<span class=\"number\">128</span>) &#123;</span><br><span class=\"line\">  inputLength += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  inputLength += <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>第三团队匹配的是中文字符（应该不是全部，但基本涵盖常用？）：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> chineseReg = <span class=\"regexp\">/[\\u4E00-\\uFA29]|[\\uE7C7-\\uE7F3]/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> validLength = <span class=\"regexp\">/^.&#123;4,16&#125;$/</span>.test(trimmedStr.replace(chineseReg, <span class=\"string\">'--'</span>));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><strong>To be read</strong><br>\n<input type=\"checkbox\" id=\"checkbox2\"><label for=\"checkbox2\"></label><a href=\"http://stackoverflow.com/questions/1366068/whats-the-complete-range-for-chinese-characters-in-unicode\" target=\"_blank\" rel=\"noopener\">What’s the complete range for Chinese characters in Unicode? @SO</a><br>\n<input type=\"checkbox\" id=\"checkbox1\"><label for=\"checkbox1\"></label><a href=\"https://www.wikiwand.com/zh/UTF-8\" target=\"_blank\" rel=\"noopener\">UTF-8 @wiki</a><br>\n<input type=\"checkbox\" id=\"checkbox0\"><label for=\"checkbox0\"></label><a href=\"https://www.wikiwand.com/zh/GB_2312\" target=\"_blank\" rel=\"noopener\">GB2312 @wiki</a></p>\n</blockquote>"},{"title":"IFE-2016-SP-task20 Simulate Queue with Multi-Inputs & Search","date":"2017-02-03T07:22:24.000Z","_content":"\n## My Solution\n\nMy solution to task20 is available on jsfiddle:\n{% jsfiddle zz0etu5d 'default' 'light' '100%' '400px' %}\n\n<!-- more -->\n\n## Compared with others'\n\n### [任务得分第一的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=8582)\n\n* :ribbon: 更加简洁的用于偷懒的 $ 方法：\n\n  ```javascript\n  $ = function(elem) {\n    return document.querySelector(elem);\n  }\n  ```\n  \n*\n","source":"_posts/IFE-2016-SP-task20.md","raw":"---\ntitle: IFE-2016-SP-task20 Simulate Queue with Multi-Inputs & Search\ndate: 2017-02-03 15:22:24\ntags: [IFE]\n---\n\n## My Solution\n\nMy solution to task20 is available on jsfiddle:\n{% jsfiddle zz0etu5d 'default' 'light' '100%' '400px' %}\n\n<!-- more -->\n\n## Compared with others'\n\n### [任务得分第一的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=8582)\n\n* :ribbon: 更加简洁的用于偷懒的 $ 方法：\n\n  ```javascript\n  $ = function(elem) {\n    return document.querySelector(elem);\n  }\n  ```\n  \n*\n","slug":"IFE-2016-SP-task20","published":1,"updated":"2018-08-25T02:22:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbpc000j5xzx5j9r18pn","content":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task20 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"400px\" src=\"//jsfiddle.net/zz0etu5d/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>\n<a id=\"more\"></a>\n<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<h3 id=\"任务得分第一的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第一的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=8582\" target=\"_blank\" rel=\"noopener\">任务得分第一的团队的 solution</a></h3>\n<ul>\n<li>\n<p>🎀 更加简洁的用于偷懒的 $ 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(elem);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task20 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"400px\" src=\"//jsfiddle.net/zz0etu5d/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>","more":"<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<h3 id=\"任务得分第一的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第一的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=8582\" target=\"_blank\" rel=\"noopener\">任务得分第一的团队的 solution</a></h3>\n<ul>\n<li>\n<p>🎀 更加简洁的用于偷懒的 $ 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(elem);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li></li>\n</ul>"},{"title":"IFE-2016-SP-task31 Linkage Inputs","date":"2017-01-27T07:25:32.000Z","_content":"\n## My Solution\n\nMy solution to task31 is available on jsfiddle: \n{% jsfiddle 45v3nuLc 'default' 'light' '100%' '400px' %}\n\n<!-- more -->\n\n### 利用“复选框 hack”来实现类似标签页的切换效果\n\n`input[type=\"radio\"]:checked ~ section.class` 来切换 `section` 的显示/隐藏。\n\n```css\n/* 下面的 #student 和 #notStudent 是两个 input[type=\"radio\"] */\n/* 下面的 .s1 和 .s2 是两个 section */\n#student:checked ~ .s1 {\n  display: block;\n}\n\n#notStudent:checked ~ .s2 {\n  display: block;\n}\n\nsection {\n  display: none;\n}\n```\n\n> 《CSS 揭秘》P152\n\n## Compared with others'\n\n### [任务得分第一的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=4198)\n\n* 获取 `select` 当前值（见本文最后）\n\n### [任务得分第二的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=4198) 和 [任务得分第三的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=4198)\n\n* :grey_question: （“城市”“学校”相关）数据存储在？：数组 VS 对象\n    - [存储在数组](https://github.com/Sakitama/Sakitama.github.io/blob/master/js/task-31.js)：\n        + 顺序有保证\n        + 结构不是那么清晰\n    - [存储在对象](https://jsfiddle.net/baishusama/45v3nuLc/)：\n        + `for-in` 可能顺序不理想\n        + 结构更清晰（城市学校的对应关系明了）\n    - [存储在数组和对象的嵌套结构中](https://github.com/SublimeUs/sublimeus.github.io/blob/master/task31/frank/js/task.js)：\n* :question: 事件代理的兼容性处理（必要？？？）\n    ```javascript\n    function delegateEvent(elem, tag, event, listener) {\n      addEventHandler(elem, event, function () {\n        var e = arguments[0] || window.event,\n            target = e.target || e.srcElement;\n        if (target && target.tagName === tag.toUpperCase()) {\n          listener.call(target, e);\n        }\n      });\n    }\n    ```\n\n## 一些知识点\n\n### :bookmark: 获取 `select` 当前值\n\n> [Get Value or Selected Option in Select Box](http://www.dyn-web.com/tutorials/forms/select/selected.php)\n> [Get selected value in dropdown list using JavaScript? @SO](http://stackoverflow.com/questions/1085801/get-selected-value-in-dropdown-list-using-javascript)\n\n#### 多种方式\n\n> P.S. 仅适用于 `sel.type === \"select-one\"` 的 `select`；不适用于 `sel.type === \"select-multiple\"` 的 `select`。同时适用于两种 `type` 的 `select` 值的获取方式可以参考最后 jQuery 的代码片段。\n\n* 方式一：`.value`\n    - 存在兼容性问题：IE9 以下在 `option` 没有 `value` 值的情况下，无法像别的浏览器那样返回 `option` 的文本内容。\n* ~~方式二：`selectedOptions`（这个方法是我自己试出来的。。好像提到的不多，可能不可靠？？）~~\n    ```javascript\n    sel.selectedOptions[0].value\n    sel.selectedOptions[0].text\n    ```\n* 方式三：`selectedIndex`（:bookmark: 常用方法）\n    ```javascript\n    sel.options[sel.selectedIndex].value\n    sel.options[sel.selectedIndex].text\n    ```\n* 方式四：`for` 循环判断 `option` 的 `selected` 值\n\n#### 扩展阅读：jQuery 中 `select` 的 `.val()` 方法的实现\n\n```javascript\nselect: {\n  get: function( elem ) {\n    var value, option,\n        options = elem.options,\n        index = elem.selectedIndex,\n        one = elem.type === \"select-one\",\n        values = one ? null : [],\n        max = one ? index + 1 : options.length,\n        i = index < 0 ?\n            max :\n            one ? index : 0;\n\n    // Loop through all the selected options\n    for ( ; i < max; i++ ) {\n      option = options[ i ];\n\n      // Support: IE <=9 only\n      // IE8-9 doesn't update selected after form reset (#2551)\n      if ( ( option.selected || i === index ) &&\n\n            // Don't return options that are disabled or in a disabled optgroup\n            !option.disabled &&\n            ( !option.parentNode.disabled ||\n              !jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n        // Get the specific value for the option\n        value = jQuery( option ).val();\n\n        // We don't need an array for one selects\n        if ( one ) {\n          return value;\n        }\n\n        // Multi-Selects return an array\n        values.push( value );\n      }\n    }\n\n    return values;\n  },\n\n  set: function( elem, value ) {\n    // Omitted owing to the limitation of space\n  }\n}\n```\n\n\n","source":"_posts/IFE-2016-SP-task31.md","raw":"---\ntitle: IFE-2016-SP-task31 Linkage Inputs\ndate: 2017-01-27 15:25:32\ntags: [IFE]\n---\n\n## My Solution\n\nMy solution to task31 is available on jsfiddle: \n{% jsfiddle 45v3nuLc 'default' 'light' '100%' '400px' %}\n\n<!-- more -->\n\n### 利用“复选框 hack”来实现类似标签页的切换效果\n\n`input[type=\"radio\"]:checked ~ section.class` 来切换 `section` 的显示/隐藏。\n\n```css\n/* 下面的 #student 和 #notStudent 是两个 input[type=\"radio\"] */\n/* 下面的 .s1 和 .s2 是两个 section */\n#student:checked ~ .s1 {\n  display: block;\n}\n\n#notStudent:checked ~ .s2 {\n  display: block;\n}\n\nsection {\n  display: none;\n}\n```\n\n> 《CSS 揭秘》P152\n\n## Compared with others'\n\n### [任务得分第一的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=4198)\n\n* 获取 `select` 当前值（见本文最后）\n\n### [任务得分第二的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=4198) 和 [任务得分第三的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=4198)\n\n* :grey_question: （“城市”“学校”相关）数据存储在？：数组 VS 对象\n    - [存储在数组](https://github.com/Sakitama/Sakitama.github.io/blob/master/js/task-31.js)：\n        + 顺序有保证\n        + 结构不是那么清晰\n    - [存储在对象](https://jsfiddle.net/baishusama/45v3nuLc/)：\n        + `for-in` 可能顺序不理想\n        + 结构更清晰（城市学校的对应关系明了）\n    - [存储在数组和对象的嵌套结构中](https://github.com/SublimeUs/sublimeus.github.io/blob/master/task31/frank/js/task.js)：\n* :question: 事件代理的兼容性处理（必要？？？）\n    ```javascript\n    function delegateEvent(elem, tag, event, listener) {\n      addEventHandler(elem, event, function () {\n        var e = arguments[0] || window.event,\n            target = e.target || e.srcElement;\n        if (target && target.tagName === tag.toUpperCase()) {\n          listener.call(target, e);\n        }\n      });\n    }\n    ```\n\n## 一些知识点\n\n### :bookmark: 获取 `select` 当前值\n\n> [Get Value or Selected Option in Select Box](http://www.dyn-web.com/tutorials/forms/select/selected.php)\n> [Get selected value in dropdown list using JavaScript? @SO](http://stackoverflow.com/questions/1085801/get-selected-value-in-dropdown-list-using-javascript)\n\n#### 多种方式\n\n> P.S. 仅适用于 `sel.type === \"select-one\"` 的 `select`；不适用于 `sel.type === \"select-multiple\"` 的 `select`。同时适用于两种 `type` 的 `select` 值的获取方式可以参考最后 jQuery 的代码片段。\n\n* 方式一：`.value`\n    - 存在兼容性问题：IE9 以下在 `option` 没有 `value` 值的情况下，无法像别的浏览器那样返回 `option` 的文本内容。\n* ~~方式二：`selectedOptions`（这个方法是我自己试出来的。。好像提到的不多，可能不可靠？？）~~\n    ```javascript\n    sel.selectedOptions[0].value\n    sel.selectedOptions[0].text\n    ```\n* 方式三：`selectedIndex`（:bookmark: 常用方法）\n    ```javascript\n    sel.options[sel.selectedIndex].value\n    sel.options[sel.selectedIndex].text\n    ```\n* 方式四：`for` 循环判断 `option` 的 `selected` 值\n\n#### 扩展阅读：jQuery 中 `select` 的 `.val()` 方法的实现\n\n```javascript\nselect: {\n  get: function( elem ) {\n    var value, option,\n        options = elem.options,\n        index = elem.selectedIndex,\n        one = elem.type === \"select-one\",\n        values = one ? null : [],\n        max = one ? index + 1 : options.length,\n        i = index < 0 ?\n            max :\n            one ? index : 0;\n\n    // Loop through all the selected options\n    for ( ; i < max; i++ ) {\n      option = options[ i ];\n\n      // Support: IE <=9 only\n      // IE8-9 doesn't update selected after form reset (#2551)\n      if ( ( option.selected || i === index ) &&\n\n            // Don't return options that are disabled or in a disabled optgroup\n            !option.disabled &&\n            ( !option.parentNode.disabled ||\n              !jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n        // Get the specific value for the option\n        value = jQuery( option ).val();\n\n        // We don't need an array for one selects\n        if ( one ) {\n          return value;\n        }\n\n        // Multi-Selects return an array\n        values.push( value );\n      }\n    }\n\n    return values;\n  },\n\n  set: function( elem, value ) {\n    // Omitted owing to the limitation of space\n  }\n}\n```\n\n\n","slug":"IFE-2016-SP-task31","published":1,"updated":"2018-08-25T02:22:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbpe000l5xzx67b1nq2o","content":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task31 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"400px\" src=\"//jsfiddle.net/45v3nuLc/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>\n<a id=\"more\"></a>\n<h3 id=\"利用-复选框-hack-来实现类似标签页的切换效果\"><a class=\"header-anchor\" href=\"#利用-复选框-hack-来实现类似标签页的切换效果\">¶</a>利用“复选框 hack”来实现类似标签页的切换效果</h3>\n<p><code>input[type=&quot;radio&quot;]:checked ~ section.class</code> 来切换 <code>section</code> 的显示/隐藏。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 下面的 #student 和 #notStudent 是两个 input[type=\"radio\"] */</span></span><br><span class=\"line\"><span class=\"comment\">/* 下面的 .s1 和 .s2 是两个 section */</span></span><br><span class=\"line\"><span class=\"selector-id\">#student</span><span class=\"selector-pseudo\">:checked</span> ~ <span class=\"selector-class\">.s1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#notStudent</span><span class=\"selector-pseudo\">:checked</span> ~ <span class=\"selector-class\">.s2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">section</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>《CSS 揭秘》P152</p>\n</blockquote>\n<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<h3 id=\"任务得分第一的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第一的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=4198\" target=\"_blank\" rel=\"noopener\">任务得分第一的团队的 solution</a></h3>\n<ul>\n<li>获取 <code>select</code> 当前值（见本文最后）</li>\n</ul>\n<h3 id=\"任务得分第二的团队的-solution-和-任务得分第三的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第二的团队的-solution-和-任务得分第三的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=4198\" target=\"_blank\" rel=\"noopener\">任务得分第二的团队的 solution</a> 和 <a href=\"http://ife.baidu.com/2016/review/detail?workId=4198\" target=\"_blank\" rel=\"noopener\">任务得分第三的团队的 solution</a></h3>\n<ul>\n<li>❔ （“城市”“学校”相关）数据存储在？：数组 VS 对象\n<ul>\n<li><a href=\"https://github.com/Sakitama/Sakitama.github.io/blob/master/js/task-31.js\" target=\"_blank\" rel=\"noopener\">存储在数组</a>：\n<ul>\n<li>顺序有保证</li>\n<li>结构不是那么清晰</li>\n</ul>\n</li>\n<li><a href=\"https://jsfiddle.net/baishusama/45v3nuLc/\" target=\"_blank\" rel=\"noopener\">存储在对象</a>：\n<ul>\n<li><code>for-in</code> 可能顺序不理想</li>\n<li>结构更清晰（城市学校的对应关系明了）</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/SublimeUs/sublimeus.github.io/blob/master/task31/frank/js/task.js\" target=\"_blank\" rel=\"noopener\">存储在数组和对象的嵌套结构中</a>：</li>\n</ul>\n</li>\n<li>❓ 事件代理的兼容性处理（必要？？？）  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delegateEvent</span>(<span class=\"params\">elem, tag, event, listener</span>) </span>&#123;</span><br><span class=\"line\">  addEventHandler(elem, event, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] || <span class=\"built_in\">window</span>.event,</span><br><span class=\"line\">        target = e.target || e.srcElement;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &amp;&amp; target.tagName === tag.toUpperCase()) &#123;</span><br><span class=\"line\">      listener.call(target, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"一些知识点\"><a class=\"header-anchor\" href=\"#一些知识点\">¶</a>一些知识点</h2>\n<h3 id=\"🔖-获取-select-当前值\"><a class=\"header-anchor\" href=\"#🔖-获取-select-当前值\">¶</a>🔖 获取 <code>select</code> 当前值</h3>\n<blockquote>\n<p><a href=\"http://www.dyn-web.com/tutorials/forms/select/selected.php\" target=\"_blank\" rel=\"noopener\">Get Value or Selected Option in Select Box</a><br>\n<a href=\"http://stackoverflow.com/questions/1085801/get-selected-value-in-dropdown-list-using-javascript\" target=\"_blank\" rel=\"noopener\">Get selected value in dropdown list using JavaScript? @SO</a></p>\n</blockquote>\n<h4 id=\"多种方式\"><a class=\"header-anchor\" href=\"#多种方式\">¶</a>多种方式</h4>\n<blockquote>\n<p>P.S. 仅适用于 <code>sel.type === &quot;select-one&quot;</code> 的 <code>select</code>；不适用于 <code>sel.type === &quot;select-multiple&quot;</code> 的 <code>select</code>。同时适用于两种 <code>type</code> 的 <code>select</code> 值的获取方式可以参考最后 jQuery 的代码片段。</p>\n</blockquote>\n<ul>\n<li>\n<p>方式一：<code>.value</code></p>\n<ul>\n<li>存在兼容性问题：IE9 以下在 <code>option</code> 没有 <code>value</code> 值的情况下，无法像别的浏览器那样返回 <code>option</code> 的文本内容。</li>\n</ul>\n</li>\n<li>\n<p><s>方式二：<code>selectedOptions</code>（这个方法是我自己试出来的。。好像提到的不多，可能不可靠？？）</s></p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sel.selectedOptions[<span class=\"number\">0</span>].value</span><br><span class=\"line\">sel.selectedOptions[<span class=\"number\">0</span>].text</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>方式三：<code>selectedIndex</code>（🔖 常用方法）</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sel.options[sel.selectedIndex].value</span><br><span class=\"line\">sel.options[sel.selectedIndex].text</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>方式四：<code>for</code> 循环判断 <code>option</code> 的 <code>selected</code> 值</p>\n</li>\n</ul>\n<h4 id=\"扩展阅读：jquery-中-select-的-val-方法的实现\"><a class=\"header-anchor\" href=\"#扩展阅读：jquery-中-select-的-val-方法的实现\">¶</a>扩展阅读：jQuery 中 <code>select</code> 的 <code>.val()</code> 方法的实现</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select: &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> elem </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value, option,</span><br><span class=\"line\">        options = elem.options,</span><br><span class=\"line\">        index = elem.selectedIndex,</span><br><span class=\"line\">        one = elem.type === <span class=\"string\">\"select-one\"</span>,</span><br><span class=\"line\">        values = one ? <span class=\"literal\">null</span> : [],</span><br><span class=\"line\">        max = one ? index + <span class=\"number\">1</span> : options.length,</span><br><span class=\"line\">        i = index &lt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">            max :</span><br><span class=\"line\">            one ? index : <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Loop through all the selected options</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( ; i &lt; max; i++ ) &#123;</span><br><span class=\"line\">      option = options[ i ];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Support: IE &lt;=9 only</span></span><br><span class=\"line\">      <span class=\"comment\">// IE8-9 doesn't update selected after form reset (#2551)</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( ( option.selected || i === index ) &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Don't return options that are disabled or in a disabled optgroup</span></span><br><span class=\"line\">            !option.disabled &amp;&amp;</span><br><span class=\"line\">            ( !option.parentNode.disabled ||</span><br><span class=\"line\">              !jQuery.nodeName( option.parentNode, <span class=\"string\">\"optgroup\"</span> ) ) ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Get the specific value for the option</span></span><br><span class=\"line\">        value = jQuery( option ).val();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// We don't need an array for one selects</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( one ) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Multi-Selects return an array</span></span><br><span class=\"line\">        values.push( value );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> values;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> elem, value </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Omitted owing to the limitation of space</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task31 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"400px\" src=\"//jsfiddle.net/45v3nuLc/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>","more":"<h3 id=\"利用-复选框-hack-来实现类似标签页的切换效果\"><a class=\"header-anchor\" href=\"#利用-复选框-hack-来实现类似标签页的切换效果\">¶</a>利用“复选框 hack”来实现类似标签页的切换效果</h3>\n<p><code>input[type=&quot;radio&quot;]:checked ~ section.class</code> 来切换 <code>section</code> 的显示/隐藏。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 下面的 #student 和 #notStudent 是两个 input[type=\"radio\"] */</span></span><br><span class=\"line\"><span class=\"comment\">/* 下面的 .s1 和 .s2 是两个 section */</span></span><br><span class=\"line\"><span class=\"selector-id\">#student</span><span class=\"selector-pseudo\">:checked</span> ~ <span class=\"selector-class\">.s1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#notStudent</span><span class=\"selector-pseudo\">:checked</span> ~ <span class=\"selector-class\">.s2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">section</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>《CSS 揭秘》P152</p>\n</blockquote>\n<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<h3 id=\"任务得分第一的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第一的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=4198\" target=\"_blank\" rel=\"noopener\">任务得分第一的团队的 solution</a></h3>\n<ul>\n<li>获取 <code>select</code> 当前值（见本文最后）</li>\n</ul>\n<h3 id=\"任务得分第二的团队的-solution-和-任务得分第三的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第二的团队的-solution-和-任务得分第三的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=4198\" target=\"_blank\" rel=\"noopener\">任务得分第二的团队的 solution</a> 和 <a href=\"http://ife.baidu.com/2016/review/detail?workId=4198\" target=\"_blank\" rel=\"noopener\">任务得分第三的团队的 solution</a></h3>\n<ul>\n<li>❔ （“城市”“学校”相关）数据存储在？：数组 VS 对象\n<ul>\n<li><a href=\"https://github.com/Sakitama/Sakitama.github.io/blob/master/js/task-31.js\" target=\"_blank\" rel=\"noopener\">存储在数组</a>：\n<ul>\n<li>顺序有保证</li>\n<li>结构不是那么清晰</li>\n</ul>\n</li>\n<li><a href=\"https://jsfiddle.net/baishusama/45v3nuLc/\" target=\"_blank\" rel=\"noopener\">存储在对象</a>：\n<ul>\n<li><code>for-in</code> 可能顺序不理想</li>\n<li>结构更清晰（城市学校的对应关系明了）</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/SublimeUs/sublimeus.github.io/blob/master/task31/frank/js/task.js\" target=\"_blank\" rel=\"noopener\">存储在数组和对象的嵌套结构中</a>：</li>\n</ul>\n</li>\n<li>❓ 事件代理的兼容性处理（必要？？？）  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delegateEvent</span>(<span class=\"params\">elem, tag, event, listener</span>) </span>&#123;</span><br><span class=\"line\">  addEventHandler(elem, event, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] || <span class=\"built_in\">window</span>.event,</span><br><span class=\"line\">        target = e.target || e.srcElement;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &amp;&amp; target.tagName === tag.toUpperCase()) &#123;</span><br><span class=\"line\">      listener.call(target, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"一些知识点\"><a class=\"header-anchor\" href=\"#一些知识点\">¶</a>一些知识点</h2>\n<h3 id=\"🔖-获取-select-当前值\"><a class=\"header-anchor\" href=\"#🔖-获取-select-当前值\">¶</a>🔖 获取 <code>select</code> 当前值</h3>\n<blockquote>\n<p><a href=\"http://www.dyn-web.com/tutorials/forms/select/selected.php\" target=\"_blank\" rel=\"noopener\">Get Value or Selected Option in Select Box</a><br>\n<a href=\"http://stackoverflow.com/questions/1085801/get-selected-value-in-dropdown-list-using-javascript\" target=\"_blank\" rel=\"noopener\">Get selected value in dropdown list using JavaScript? @SO</a></p>\n</blockquote>\n<h4 id=\"多种方式\"><a class=\"header-anchor\" href=\"#多种方式\">¶</a>多种方式</h4>\n<blockquote>\n<p>P.S. 仅适用于 <code>sel.type === &quot;select-one&quot;</code> 的 <code>select</code>；不适用于 <code>sel.type === &quot;select-multiple&quot;</code> 的 <code>select</code>。同时适用于两种 <code>type</code> 的 <code>select</code> 值的获取方式可以参考最后 jQuery 的代码片段。</p>\n</blockquote>\n<ul>\n<li>\n<p>方式一：<code>.value</code></p>\n<ul>\n<li>存在兼容性问题：IE9 以下在 <code>option</code> 没有 <code>value</code> 值的情况下，无法像别的浏览器那样返回 <code>option</code> 的文本内容。</li>\n</ul>\n</li>\n<li>\n<p><s>方式二：<code>selectedOptions</code>（这个方法是我自己试出来的。。好像提到的不多，可能不可靠？？）</s></p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sel.selectedOptions[<span class=\"number\">0</span>].value</span><br><span class=\"line\">sel.selectedOptions[<span class=\"number\">0</span>].text</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>方式三：<code>selectedIndex</code>（🔖 常用方法）</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sel.options[sel.selectedIndex].value</span><br><span class=\"line\">sel.options[sel.selectedIndex].text</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>方式四：<code>for</code> 循环判断 <code>option</code> 的 <code>selected</code> 值</p>\n</li>\n</ul>\n<h4 id=\"扩展阅读：jquery-中-select-的-val-方法的实现\"><a class=\"header-anchor\" href=\"#扩展阅读：jquery-中-select-的-val-方法的实现\">¶</a>扩展阅读：jQuery 中 <code>select</code> 的 <code>.val()</code> 方法的实现</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select: &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> elem </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value, option,</span><br><span class=\"line\">        options = elem.options,</span><br><span class=\"line\">        index = elem.selectedIndex,</span><br><span class=\"line\">        one = elem.type === <span class=\"string\">\"select-one\"</span>,</span><br><span class=\"line\">        values = one ? <span class=\"literal\">null</span> : [],</span><br><span class=\"line\">        max = one ? index + <span class=\"number\">1</span> : options.length,</span><br><span class=\"line\">        i = index &lt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">            max :</span><br><span class=\"line\">            one ? index : <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Loop through all the selected options</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( ; i &lt; max; i++ ) &#123;</span><br><span class=\"line\">      option = options[ i ];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Support: IE &lt;=9 only</span></span><br><span class=\"line\">      <span class=\"comment\">// IE8-9 doesn't update selected after form reset (#2551)</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( ( option.selected || i === index ) &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Don't return options that are disabled or in a disabled optgroup</span></span><br><span class=\"line\">            !option.disabled &amp;&amp;</span><br><span class=\"line\">            ( !option.parentNode.disabled ||</span><br><span class=\"line\">              !jQuery.nodeName( option.parentNode, <span class=\"string\">\"optgroup\"</span> ) ) ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Get the specific value for the option</span></span><br><span class=\"line\">        value = jQuery( option ).val();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// We don't need an array for one selects</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( one ) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Multi-Selects return an array</span></span><br><span class=\"line\">        values.push( value );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> values;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> elem, value </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Omitted owing to the limitation of space</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"IFE-2016-SP-task30 Verify Multiple Inputs","date":"2017-01-26T14:08:56.000Z","_content":"\n## My Solution\n\nMy solution to task30 is available on jsfiddle: \n{% jsfiddle q989o3nm 'default' 'light' '100%' '400px' %}\n\n<!-- more -->\n\n* :confused: 这个实现中不太优雅的地方：\n    - 分别为每个 `input` 都定义了一个 `check 函数`，虽然有利用 `checkValue` 复用一部分代码。。\n    - 为了改变 `this` 使用了很多很多的 `.call()` 方法。。\n    - `blur` 的事件委托（历史遗留问题）。。\n* :confused: 这个实现中不太可靠的地方：\n    - 各项的验证规则（正则）\n    - 寄生组合式继承\n      + [ ] 直接给 `Error` 构造函数传递 `message` 参数无效。。（See Line 91）\n\n## Compared with others'\n\n### [任务得分第一的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=8817)\n\n* :ribbon: 巧妙地各种运用数组及其方法\n    - `hintText` 数组\n        ```javascript\n        var hintText = [{ hint: \"必填，长度为4~16位字符\", right: \"名称格式正确\", wrong: \"名称格式有误\", isPassed: false },\n          { hint: \"必填，长度为4~16位字符,包含字母和数字\", right: \"密码可用\", wrong: \"密码不可用\", isPassed: false },\n          { hint: \"必填，必须与密码相同\", right: \"密码输入一致\", wrong: \"密码输入不一致\", isPassed: false },\n          { hint: \"填写正确的邮箱格式\", right: \"邮箱格式正确\", wrong: \"邮箱格式错误\", isPassed: false },\n          { hint: \"必填，长度为4~16位字符\", right: \"手机格式正确\", wrong: \"手机格式错误\", isPassed: false }\n        ];\n        ```\n    - 利用数组的 `.forEach()` 和 `.every()` 方法来验证所有输入\n        ```javascript\n        // 我的写法不优雅之处：\n        // 1. 为每个 input 分别定义了检查函数，需要传入相关 dom 元素。\n        // 2. 提交验证时，if 判断条件由一堆很长的 && 组成。\n        addEventHandler(verifyBtn, \"click\", function() {\n          var rawVal = nameDOM.value;\n          if (checkName.call(nameDOM) && checkPwd.call(pwdDOM) && checkRepeatPwd.call(repeatPwdDOM) && checkEmail.call(emailDOM) && checkMobile.call(mobileDOM)) {\n            alert(\"提交（验证)成功！\");\n          } else {\n            alert(\"请按提示输入正确的信息后，再提交。\");\n          }\n        });\n        // 该团队的写法：\n        // 1. 由于在 html 中定义了包含数字的 id 作为钩子，\n        //    其检查函数只需传入对应的序号做参数即可找到相关 dom ，而不需要像我那样传入 dom 作为参数。\n        // 2. hintText 在存储提示信息的同时存储了检查状态。\n        //    在提交时，先是 .forEach() 地 checkValue 一遍，再利用 .every() 得到验证结果的 flag 值。\n        addEventHandler(document.getElementById(\"submit\"), \"click\", function(e) {\n          e.preventDefault();\n          [1, 2, 3, 4, 5].forEach(function(el) {\n            checkValue(el);\n          });\n          var flag = hintText.every(function(singleHint) {\n            return singleHint.isPassed;\n          });\n          if (flag)\n            alert(\"提交成功\");\n          else\n            alert(\"提交失败\");\n        });\n        ```\n    - **事件循环绑定** 可以利用数组的 `.forEach()` 方法 **避开闭包**（虽然这里真正避开闭包的原因是使用了节点的 id 中包含的数字，而没有使用 for 循环中的计数器 i ，但是使用`数组的循环方法`取代`通常的 for 循环`，确实是避开闭包的一种可行方案。）：\n        ```javascript\n        var inputs = document.getElementsByTagName(\"input\");\n        [].forEach.call(inputs, function(elem) {\n          var id = elem.getAttribute(\"id\").slice(1);\n          var hintID = \"h\" + elem.getAttribute(\"id\").slice(1);\n          addEventHandler(elem, \"focus\", function() {\n            document.getElementById(hintID).style.display = \"table-row\";\n          });\n          addEventHandler(elem, \"blur\", function() { checkValue(id) });\n        });\n        ```\n\n### [任务得分第二的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=8842)\n\n* **事件循环绑定** 利用事件回调函数的 `e.target` 避开使用 for 循环的计数器 i （从而 **避开闭包**）\n\n### [任务得分第三的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=2691)\n\n* [ ] `ES6` 待读。。\n\n## 各项验证\n\n### 手机号\n\n* 我的 `/^\\d{11}$/` ：11 位纯数字\n* `/^1\\d{10}$/` ：第一位为 1 的 11 位纯数字\n* `/^1(3|4|5|7|8)\\d{9}$/` ：考虑到前两位的 11 位纯数字\n","source":"_posts/IFE-2016-SP-task30.md","raw":"---\ntitle: IFE-2016-SP-task30 Verify Multiple Inputs\ndate: 2017-01-26 22:08:56\ntags: [IFE]\n---\n\n## My Solution\n\nMy solution to task30 is available on jsfiddle: \n{% jsfiddle q989o3nm 'default' 'light' '100%' '400px' %}\n\n<!-- more -->\n\n* :confused: 这个实现中不太优雅的地方：\n    - 分别为每个 `input` 都定义了一个 `check 函数`，虽然有利用 `checkValue` 复用一部分代码。。\n    - 为了改变 `this` 使用了很多很多的 `.call()` 方法。。\n    - `blur` 的事件委托（历史遗留问题）。。\n* :confused: 这个实现中不太可靠的地方：\n    - 各项的验证规则（正则）\n    - 寄生组合式继承\n      + [ ] 直接给 `Error` 构造函数传递 `message` 参数无效。。（See Line 91）\n\n## Compared with others'\n\n### [任务得分第一的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=8817)\n\n* :ribbon: 巧妙地各种运用数组及其方法\n    - `hintText` 数组\n        ```javascript\n        var hintText = [{ hint: \"必填，长度为4~16位字符\", right: \"名称格式正确\", wrong: \"名称格式有误\", isPassed: false },\n          { hint: \"必填，长度为4~16位字符,包含字母和数字\", right: \"密码可用\", wrong: \"密码不可用\", isPassed: false },\n          { hint: \"必填，必须与密码相同\", right: \"密码输入一致\", wrong: \"密码输入不一致\", isPassed: false },\n          { hint: \"填写正确的邮箱格式\", right: \"邮箱格式正确\", wrong: \"邮箱格式错误\", isPassed: false },\n          { hint: \"必填，长度为4~16位字符\", right: \"手机格式正确\", wrong: \"手机格式错误\", isPassed: false }\n        ];\n        ```\n    - 利用数组的 `.forEach()` 和 `.every()` 方法来验证所有输入\n        ```javascript\n        // 我的写法不优雅之处：\n        // 1. 为每个 input 分别定义了检查函数，需要传入相关 dom 元素。\n        // 2. 提交验证时，if 判断条件由一堆很长的 && 组成。\n        addEventHandler(verifyBtn, \"click\", function() {\n          var rawVal = nameDOM.value;\n          if (checkName.call(nameDOM) && checkPwd.call(pwdDOM) && checkRepeatPwd.call(repeatPwdDOM) && checkEmail.call(emailDOM) && checkMobile.call(mobileDOM)) {\n            alert(\"提交（验证)成功！\");\n          } else {\n            alert(\"请按提示输入正确的信息后，再提交。\");\n          }\n        });\n        // 该团队的写法：\n        // 1. 由于在 html 中定义了包含数字的 id 作为钩子，\n        //    其检查函数只需传入对应的序号做参数即可找到相关 dom ，而不需要像我那样传入 dom 作为参数。\n        // 2. hintText 在存储提示信息的同时存储了检查状态。\n        //    在提交时，先是 .forEach() 地 checkValue 一遍，再利用 .every() 得到验证结果的 flag 值。\n        addEventHandler(document.getElementById(\"submit\"), \"click\", function(e) {\n          e.preventDefault();\n          [1, 2, 3, 4, 5].forEach(function(el) {\n            checkValue(el);\n          });\n          var flag = hintText.every(function(singleHint) {\n            return singleHint.isPassed;\n          });\n          if (flag)\n            alert(\"提交成功\");\n          else\n            alert(\"提交失败\");\n        });\n        ```\n    - **事件循环绑定** 可以利用数组的 `.forEach()` 方法 **避开闭包**（虽然这里真正避开闭包的原因是使用了节点的 id 中包含的数字，而没有使用 for 循环中的计数器 i ，但是使用`数组的循环方法`取代`通常的 for 循环`，确实是避开闭包的一种可行方案。）：\n        ```javascript\n        var inputs = document.getElementsByTagName(\"input\");\n        [].forEach.call(inputs, function(elem) {\n          var id = elem.getAttribute(\"id\").slice(1);\n          var hintID = \"h\" + elem.getAttribute(\"id\").slice(1);\n          addEventHandler(elem, \"focus\", function() {\n            document.getElementById(hintID).style.display = \"table-row\";\n          });\n          addEventHandler(elem, \"blur\", function() { checkValue(id) });\n        });\n        ```\n\n### [任务得分第二的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=8842)\n\n* **事件循环绑定** 利用事件回调函数的 `e.target` 避开使用 for 循环的计数器 i （从而 **避开闭包**）\n\n### [任务得分第三的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=2691)\n\n* [ ] `ES6` 待读。。\n\n## 各项验证\n\n### 手机号\n\n* 我的 `/^\\d{11}$/` ：11 位纯数字\n* `/^1\\d{10}$/` ：第一位为 1 的 11 位纯数字\n* `/^1(3|4|5|7|8)\\d{9}$/` ：考虑到前两位的 11 位纯数字\n","slug":"IFE-2016-SP-task30","published":1,"updated":"2018-08-25T02:22:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbpg000n5xzx9e0jjlcl","content":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task30 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"400px\" src=\"//jsfiddle.net/q989o3nm/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>\n<a id=\"more\"></a>\n<ul>\n<li>😕 这个实现中不太优雅的地方：\n<ul>\n<li>分别为每个 <code>input</code> 都定义了一个 <code>check 函数</code>，虽然有利用 <code>checkValue</code> 复用一部分代码。。</li>\n<li>为了改变 <code>this</code> 使用了很多很多的 <code>.call()</code> 方法。。</li>\n<li><code>blur</code> 的事件委托（历史遗留问题）。。</li>\n</ul>\n</li>\n<li>😕 这个实现中不太可靠的地方：\n<ul>\n<li>各项的验证规则（正则）</li>\n<li>寄生组合式继承\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox0\"><label for=\"checkbox0\">直接给 </label><code>Error</code> 构造函数传递 <code>message</code> 参数无效。。（See Line 91）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<h3 id=\"任务得分第一的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第一的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=8817\" target=\"_blank\" rel=\"noopener\">任务得分第一的团队的 solution</a></h3>\n<ul>\n<li>🎀 巧妙地各种运用数组及其方法\n<ul>\n<li>\n<p><code>hintText</code> 数组</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hintText = [&#123; <span class=\"attr\">hint</span>: <span class=\"string\">\"必填，长度为4~16位字符\"</span>, <span class=\"attr\">right</span>: <span class=\"string\">\"名称格式正确\"</span>, <span class=\"attr\">wrong</span>: <span class=\"string\">\"名称格式有误\"</span>, <span class=\"attr\">isPassed</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">hint</span>: <span class=\"string\">\"必填，长度为4~16位字符,包含字母和数字\"</span>, <span class=\"attr\">right</span>: <span class=\"string\">\"密码可用\"</span>, <span class=\"attr\">wrong</span>: <span class=\"string\">\"密码不可用\"</span>, <span class=\"attr\">isPassed</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">hint</span>: <span class=\"string\">\"必填，必须与密码相同\"</span>, <span class=\"attr\">right</span>: <span class=\"string\">\"密码输入一致\"</span>, <span class=\"attr\">wrong</span>: <span class=\"string\">\"密码输入不一致\"</span>, <span class=\"attr\">isPassed</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">hint</span>: <span class=\"string\">\"填写正确的邮箱格式\"</span>, <span class=\"attr\">right</span>: <span class=\"string\">\"邮箱格式正确\"</span>, <span class=\"attr\">wrong</span>: <span class=\"string\">\"邮箱格式错误\"</span>, <span class=\"attr\">isPassed</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">hint</span>: <span class=\"string\">\"必填，长度为4~16位字符\"</span>, <span class=\"attr\">right</span>: <span class=\"string\">\"手机格式正确\"</span>, <span class=\"attr\">wrong</span>: <span class=\"string\">\"手机格式错误\"</span>, <span class=\"attr\">isPassed</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>利用数组的 <code>.forEach()</code> 和 <code>.every()</code> 方法来验证所有输入</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我的写法不优雅之处：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 为每个 input 分别定义了检查函数，需要传入相关 dom 元素。</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 提交验证时，if 判断条件由一堆很长的 &amp;&amp; 组成。</span></span><br><span class=\"line\">addEventHandler(verifyBtn, <span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rawVal = nameDOM.value;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (checkName.call(nameDOM) &amp;&amp; checkPwd.call(pwdDOM) &amp;&amp; checkRepeatPwd.call(repeatPwdDOM) &amp;&amp; checkEmail.call(emailDOM) &amp;&amp; checkMobile.call(mobileDOM)) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"提交（验证)成功！\"</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"请按提示输入正确的信息后，再提交。\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 该团队的写法：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 由于在 html 中定义了包含数字的 id 作为钩子，</span></span><br><span class=\"line\"><span class=\"comment\">//    其检查函数只需传入对应的序号做参数即可找到相关 dom ，而不需要像我那样传入 dom 作为参数。</span></span><br><span class=\"line\"><span class=\"comment\">// 2. hintText 在存储提示信息的同时存储了检查状态。</span></span><br><span class=\"line\"><span class=\"comment\">//    在提交时，先是 .forEach() 地 checkValue 一遍，再利用 .every() 得到验证结果的 flag 值。</span></span><br><span class=\"line\">addEventHandler(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"submit\"</span>), <span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">    checkValue(el);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> flag = hintText.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">singleHint</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleHint.isPassed;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (flag)</span><br><span class=\"line\">    alert(<span class=\"string\">\"提交成功\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    alert(<span class=\"string\">\"提交失败\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>事件循环绑定</strong> 可以利用数组的 <code>.forEach()</code> 方法 <strong>避开闭包</strong>（虽然这里真正避开闭包的原因是使用了节点的 id 中包含的数字，而没有使用 for 循环中的计数器 i ，但是使用<code>数组的循环方法</code>取代<code>通常的 for 循环</code>，确实是避开闭包的一种可行方案。）：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inputs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"input\"</span>);</span><br><span class=\"line\">[].forEach.call(inputs, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> id = elem.getAttribute(<span class=\"string\">\"id\"</span>).slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hintID = <span class=\"string\">\"h\"</span> + elem.getAttribute(<span class=\"string\">\"id\"</span>).slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">  addEventHandler(elem, <span class=\"string\">\"focus\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(hintID).style.display = <span class=\"string\">\"table-row\"</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  addEventHandler(elem, <span class=\"string\">\"blur\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; checkValue(id) &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"任务得分第二的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第二的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=8842\" target=\"_blank\" rel=\"noopener\">任务得分第二的团队的 solution</a></h3>\n<ul>\n<li><strong>事件循环绑定</strong> 利用事件回调函数的 <code>e.target</code> 避开使用 for 循环的计数器 i （从而 <strong>避开闭包</strong>）</li>\n</ul>\n<h3 id=\"任务得分第三的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第三的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=2691\" target=\"_blank\" rel=\"noopener\">任务得分第三的团队的 solution</a></h3>\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox1\"><label for=\"checkbox1\"></label><code>ES6</code> 待读。。</li>\n</ul>\n<h2 id=\"各项验证\"><a class=\"header-anchor\" href=\"#各项验证\">¶</a>各项验证</h2>\n<h3 id=\"手机号\"><a class=\"header-anchor\" href=\"#手机号\">¶</a>手机号</h3>\n<ul>\n<li>我的 <code>/^\\d{11}$/</code> ：11 位纯数字</li>\n<li><code>/^1\\d{10}$/</code> ：第一位为 1 的 11 位纯数字</li>\n<li><code>/^1(3|4|5|7|8)\\d{9}$/</code> ：考虑到前两位的 11 位纯数字</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task30 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"400px\" src=\"//jsfiddle.net/q989o3nm/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>","more":"<ul>\n<li>😕 这个实现中不太优雅的地方：\n<ul>\n<li>分别为每个 <code>input</code> 都定义了一个 <code>check 函数</code>，虽然有利用 <code>checkValue</code> 复用一部分代码。。</li>\n<li>为了改变 <code>this</code> 使用了很多很多的 <code>.call()</code> 方法。。</li>\n<li><code>blur</code> 的事件委托（历史遗留问题）。。</li>\n</ul>\n</li>\n<li>😕 这个实现中不太可靠的地方：\n<ul>\n<li>各项的验证规则（正则）</li>\n<li>寄生组合式继承\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox0\"><label for=\"checkbox0\">直接给 </label><code>Error</code> 构造函数传递 <code>message</code> 参数无效。。（See Line 91）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<h3 id=\"任务得分第一的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第一的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=8817\" target=\"_blank\" rel=\"noopener\">任务得分第一的团队的 solution</a></h3>\n<ul>\n<li>🎀 巧妙地各种运用数组及其方法\n<ul>\n<li>\n<p><code>hintText</code> 数组</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hintText = [&#123; <span class=\"attr\">hint</span>: <span class=\"string\">\"必填，长度为4~16位字符\"</span>, <span class=\"attr\">right</span>: <span class=\"string\">\"名称格式正确\"</span>, <span class=\"attr\">wrong</span>: <span class=\"string\">\"名称格式有误\"</span>, <span class=\"attr\">isPassed</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">hint</span>: <span class=\"string\">\"必填，长度为4~16位字符,包含字母和数字\"</span>, <span class=\"attr\">right</span>: <span class=\"string\">\"密码可用\"</span>, <span class=\"attr\">wrong</span>: <span class=\"string\">\"密码不可用\"</span>, <span class=\"attr\">isPassed</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">hint</span>: <span class=\"string\">\"必填，必须与密码相同\"</span>, <span class=\"attr\">right</span>: <span class=\"string\">\"密码输入一致\"</span>, <span class=\"attr\">wrong</span>: <span class=\"string\">\"密码输入不一致\"</span>, <span class=\"attr\">isPassed</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">hint</span>: <span class=\"string\">\"填写正确的邮箱格式\"</span>, <span class=\"attr\">right</span>: <span class=\"string\">\"邮箱格式正确\"</span>, <span class=\"attr\">wrong</span>: <span class=\"string\">\"邮箱格式错误\"</span>, <span class=\"attr\">isPassed</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">hint</span>: <span class=\"string\">\"必填，长度为4~16位字符\"</span>, <span class=\"attr\">right</span>: <span class=\"string\">\"手机格式正确\"</span>, <span class=\"attr\">wrong</span>: <span class=\"string\">\"手机格式错误\"</span>, <span class=\"attr\">isPassed</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>利用数组的 <code>.forEach()</code> 和 <code>.every()</code> 方法来验证所有输入</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我的写法不优雅之处：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 为每个 input 分别定义了检查函数，需要传入相关 dom 元素。</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 提交验证时，if 判断条件由一堆很长的 &amp;&amp; 组成。</span></span><br><span class=\"line\">addEventHandler(verifyBtn, <span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rawVal = nameDOM.value;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (checkName.call(nameDOM) &amp;&amp; checkPwd.call(pwdDOM) &amp;&amp; checkRepeatPwd.call(repeatPwdDOM) &amp;&amp; checkEmail.call(emailDOM) &amp;&amp; checkMobile.call(mobileDOM)) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"提交（验证)成功！\"</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"请按提示输入正确的信息后，再提交。\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 该团队的写法：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 由于在 html 中定义了包含数字的 id 作为钩子，</span></span><br><span class=\"line\"><span class=\"comment\">//    其检查函数只需传入对应的序号做参数即可找到相关 dom ，而不需要像我那样传入 dom 作为参数。</span></span><br><span class=\"line\"><span class=\"comment\">// 2. hintText 在存储提示信息的同时存储了检查状态。</span></span><br><span class=\"line\"><span class=\"comment\">//    在提交时，先是 .forEach() 地 checkValue 一遍，再利用 .every() 得到验证结果的 flag 值。</span></span><br><span class=\"line\">addEventHandler(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"submit\"</span>), <span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">    checkValue(el);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> flag = hintText.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">singleHint</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleHint.isPassed;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (flag)</span><br><span class=\"line\">    alert(<span class=\"string\">\"提交成功\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    alert(<span class=\"string\">\"提交失败\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>事件循环绑定</strong> 可以利用数组的 <code>.forEach()</code> 方法 <strong>避开闭包</strong>（虽然这里真正避开闭包的原因是使用了节点的 id 中包含的数字，而没有使用 for 循环中的计数器 i ，但是使用<code>数组的循环方法</code>取代<code>通常的 for 循环</code>，确实是避开闭包的一种可行方案。）：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inputs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"input\"</span>);</span><br><span class=\"line\">[].forEach.call(inputs, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> id = elem.getAttribute(<span class=\"string\">\"id\"</span>).slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hintID = <span class=\"string\">\"h\"</span> + elem.getAttribute(<span class=\"string\">\"id\"</span>).slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">  addEventHandler(elem, <span class=\"string\">\"focus\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(hintID).style.display = <span class=\"string\">\"table-row\"</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  addEventHandler(elem, <span class=\"string\">\"blur\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; checkValue(id) &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"任务得分第二的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第二的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=8842\" target=\"_blank\" rel=\"noopener\">任务得分第二的团队的 solution</a></h3>\n<ul>\n<li><strong>事件循环绑定</strong> 利用事件回调函数的 <code>e.target</code> 避开使用 for 循环的计数器 i （从而 <strong>避开闭包</strong>）</li>\n</ul>\n<h3 id=\"任务得分第三的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第三的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=2691\" target=\"_blank\" rel=\"noopener\">任务得分第三的团队的 solution</a></h3>\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox1\"><label for=\"checkbox1\"></label><code>ES6</code> 待读。。</li>\n</ul>\n<h2 id=\"各项验证\"><a class=\"header-anchor\" href=\"#各项验证\">¶</a>各项验证</h2>\n<h3 id=\"手机号\"><a class=\"header-anchor\" href=\"#手机号\">¶</a>手机号</h3>\n<ul>\n<li>我的 <code>/^\\d{11}$/</code> ：11 位纯数字</li>\n<li><code>/^1\\d{10}$/</code> ：第一位为 1 的 11 位纯数字</li>\n<li><code>/^1(3|4|5|7|8)\\d{9}$/</code> ：考虑到前两位的 11 位纯数字</li>\n</ul>"},{"title":"IFE-2016-SP-task33 Square Following Directives I","date":"2017-01-07T13:04:03.000Z","_content":"\n## My Solution\n\nMy solution to task33 is available on jsfiddle: \n{% jsfiddle 0953w48r 'default' 'light' '100%' '400px' %}\n\n<!-- more -->\n\n### Circular Indexing - Modulus vs Remainder\n\n> [(In Javascript) The **% operator is not mod**, even though that's how everyone reads it. **It's actually remainder**. But we need mod](http://www.sitecrafting.com/blog/modulus-remainder/)...\n> \n> [JavaScript's numeric operators are +, -, *, / and **% — which is the remainder operator**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript) ([which is not the same as modulo.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder_%28%29)) \n\n#### Solution 1\n\n```javascript\n// This solution is from the first link quoted above.\n// Note the use of Math.floor ! It also takes 'The mod operator returns a float' into consideration, which I'm not quite sure...(???)\nfunction mod(num, mod){\n  var remain = num % mod;\n  return Math.floor(remain > 0 ? remain : remain + mod);\n}\n```\n\n> \"[The modulus operator in JavaScript is also different from the one in other programming languages. It operates not only on integers but also on floating point numbers. You should be aware that the modulus operator occasionally returns inaccurate results. ](http://ods.com.ua/win/eng/web-tech/js/htm/07-01.phtml)\" as said, but I'm not sure when % operates only on integers will it occasionally returns inaccurate results ???\n\n#### Solution 2\n\n```javascript\n// My Solution\n(num % mod + mod) % mod\n```\n\n### Dealing with CSS Property with Prefixes\n\n```javascript\n// Inspired by jquery-3.1.0.js\nfunction getProperName(cssPropertyName) {\n  var name = cssPropertyName;\n  var cssPrefixes = [\"Webkit\", \"Moz\", \"ms\"];\n  var emptyStyle = document.createElement(\"div\").style;\n  if (name in emptyStyle) {\n    return name;\n  }\n\n  var capName = name[0].toUpperCase + name.slice(1);\n  var i = cssPrefixes.length;\n  while (i--) {\n    name = cssPrefixes[i] + capName;\n    if (name in emptyStyle) {\n      return name;\n    }\n  }\n}\n\n// var PROPERTY = getProperName(\"transform\");\n```\n\n## Compared with others'\n\n### [任务得分第三的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=2097)\n\n* :no_mouth: Some differences compared with my solution\n    - :ribbon: Much shorter `HTML` and `CSS`; `JS` bears much more responsibilities.\n        + Each cell in the board only has `border-right` and `border-bottom` `CSS` styles and even less when appears on the rightmost or downmost added with class by `JS`. \n        + In the task's case, making cells `box-sizing: border-box;` is not a good try :(. In other word, it's better remain cells default `box-sizing: content-box;` .\n        + Leftmost cells are added with `clear: both;` to change line instead of fixing the size of their parent div, which takes extra calculation.\n        + All cells in the board are generated by `JS` instead of `HTML` , which is much more flexible when you want a board of different size.\n    - :star2: Random position generated when document loaded initially makes the game more interesting.\n    - :/ Using two variable ( `turn` and `rotate` ) having something in common instead of one to record direction as well as degrees should the square rotate. If the direction valiable is able to be negative, then it can figures out the degree valiable if only times 90.\n* :bookmark: `document.createElement` vs `document.createDocumentFragment`\n\n### [任务得分前三的其他团队的 solution](http://ife.baidu.com/2016/task/detail?taskId=33)\n\n* :no_mouth: Using `table` tag for layout of the board.\n\n### [任务得分第四的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=2067)\n\n* :ribbon: `outline` together with `background: #fff;` instead of `border`\n\n* :bookmark: 水平垂直居中\n\n    ```css\n    .content {\n      position: absolute;/* 相对于视窗 */\n      left: 0;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      margin: auto;\n      height: 300px;\n      width: 300px;\n    }\n    ```\n\n* :bookmark: 去掉 `inline-block` 元素间间隙\n    \n    ```css\n    .row-ol {\n      height: 30px;\n      width: 300px;\n      line-height: 30px;\n      letter-spacing: -0.5em;/* inline-block 元素的父元素设置 letter-spacing 为负 */\n    }\n    .row-ol li {\n      display: inline-block;/* inline-block 元素 */\n      width: 30px;\n      text-align: center;\n      letter-spacing: 0;/* inline-block 元素设置 letter-spacing 为零 */\n    }\n    ```\n\n* :bookmark: `counter-increment` - 用来自动生成 `::before` 或 `::after` 的 `content`\n    \n    ```css\n    /* 写法一：该团队原本的写法 */\n    .column-ol li {\n      counter-increment: lineIndex;\n    }\n    .column-ol li::before {\n      content: counter(lineIndex);\n    }\n    \n    /* 写法二：MDN 例子里的写法 */\n    .column-ol {\n      counter-reset: lineIndex;\n    }\n    .column-ol li::before {\n      counter-increment: lineIndex;\n      content: counter(lineIndex);\n    }\n    ```\n\n    > [Using CSS counters @MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Lists_and_Counters/Using_CSS_counters)\n\n\n* :star2: 彩蛋 - “方向键盘乱搓可开启灵车飘逸模式OvO”\n\n    ```javascript\n    // 键盘控制方向\n    document.onkeydown = function(event){\n      var e = event || window.event;\n      switch(e.keyCode){\n        case 37:\n          return command.exportLeft();\n          break;\n        case 38:\n          return command.exportGo();\n          break;\n        case 39:\n          return command.exportRight();\n          break;\n        case 40:\n          return command.exportBack();\n          break;\n      }\n    }\n    ```\n\n\n","source":"_posts/IFE-2016-SP-task33.md","raw":"---\ntitle: IFE-2016-SP-task33 Square Following Directives I\ndate: 2017-01-07 21:04:03\ntags: [IFE]\n---\n\n## My Solution\n\nMy solution to task33 is available on jsfiddle: \n{% jsfiddle 0953w48r 'default' 'light' '100%' '400px' %}\n\n<!-- more -->\n\n### Circular Indexing - Modulus vs Remainder\n\n> [(In Javascript) The **% operator is not mod**, even though that's how everyone reads it. **It's actually remainder**. But we need mod](http://www.sitecrafting.com/blog/modulus-remainder/)...\n> \n> [JavaScript's numeric operators are +, -, *, / and **% — which is the remainder operator**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript) ([which is not the same as modulo.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder_%28%29)) \n\n#### Solution 1\n\n```javascript\n// This solution is from the first link quoted above.\n// Note the use of Math.floor ! It also takes 'The mod operator returns a float' into consideration, which I'm not quite sure...(???)\nfunction mod(num, mod){\n  var remain = num % mod;\n  return Math.floor(remain > 0 ? remain : remain + mod);\n}\n```\n\n> \"[The modulus operator in JavaScript is also different from the one in other programming languages. It operates not only on integers but also on floating point numbers. You should be aware that the modulus operator occasionally returns inaccurate results. ](http://ods.com.ua/win/eng/web-tech/js/htm/07-01.phtml)\" as said, but I'm not sure when % operates only on integers will it occasionally returns inaccurate results ???\n\n#### Solution 2\n\n```javascript\n// My Solution\n(num % mod + mod) % mod\n```\n\n### Dealing with CSS Property with Prefixes\n\n```javascript\n// Inspired by jquery-3.1.0.js\nfunction getProperName(cssPropertyName) {\n  var name = cssPropertyName;\n  var cssPrefixes = [\"Webkit\", \"Moz\", \"ms\"];\n  var emptyStyle = document.createElement(\"div\").style;\n  if (name in emptyStyle) {\n    return name;\n  }\n\n  var capName = name[0].toUpperCase + name.slice(1);\n  var i = cssPrefixes.length;\n  while (i--) {\n    name = cssPrefixes[i] + capName;\n    if (name in emptyStyle) {\n      return name;\n    }\n  }\n}\n\n// var PROPERTY = getProperName(\"transform\");\n```\n\n## Compared with others'\n\n### [任务得分第三的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=2097)\n\n* :no_mouth: Some differences compared with my solution\n    - :ribbon: Much shorter `HTML` and `CSS`; `JS` bears much more responsibilities.\n        + Each cell in the board only has `border-right` and `border-bottom` `CSS` styles and even less when appears on the rightmost or downmost added with class by `JS`. \n        + In the task's case, making cells `box-sizing: border-box;` is not a good try :(. In other word, it's better remain cells default `box-sizing: content-box;` .\n        + Leftmost cells are added with `clear: both;` to change line instead of fixing the size of their parent div, which takes extra calculation.\n        + All cells in the board are generated by `JS` instead of `HTML` , which is much more flexible when you want a board of different size.\n    - :star2: Random position generated when document loaded initially makes the game more interesting.\n    - :/ Using two variable ( `turn` and `rotate` ) having something in common instead of one to record direction as well as degrees should the square rotate. If the direction valiable is able to be negative, then it can figures out the degree valiable if only times 90.\n* :bookmark: `document.createElement` vs `document.createDocumentFragment`\n\n### [任务得分前三的其他团队的 solution](http://ife.baidu.com/2016/task/detail?taskId=33)\n\n* :no_mouth: Using `table` tag for layout of the board.\n\n### [任务得分第四的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=2067)\n\n* :ribbon: `outline` together with `background: #fff;` instead of `border`\n\n* :bookmark: 水平垂直居中\n\n    ```css\n    .content {\n      position: absolute;/* 相对于视窗 */\n      left: 0;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      margin: auto;\n      height: 300px;\n      width: 300px;\n    }\n    ```\n\n* :bookmark: 去掉 `inline-block` 元素间间隙\n    \n    ```css\n    .row-ol {\n      height: 30px;\n      width: 300px;\n      line-height: 30px;\n      letter-spacing: -0.5em;/* inline-block 元素的父元素设置 letter-spacing 为负 */\n    }\n    .row-ol li {\n      display: inline-block;/* inline-block 元素 */\n      width: 30px;\n      text-align: center;\n      letter-spacing: 0;/* inline-block 元素设置 letter-spacing 为零 */\n    }\n    ```\n\n* :bookmark: `counter-increment` - 用来自动生成 `::before` 或 `::after` 的 `content`\n    \n    ```css\n    /* 写法一：该团队原本的写法 */\n    .column-ol li {\n      counter-increment: lineIndex;\n    }\n    .column-ol li::before {\n      content: counter(lineIndex);\n    }\n    \n    /* 写法二：MDN 例子里的写法 */\n    .column-ol {\n      counter-reset: lineIndex;\n    }\n    .column-ol li::before {\n      counter-increment: lineIndex;\n      content: counter(lineIndex);\n    }\n    ```\n\n    > [Using CSS counters @MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Lists_and_Counters/Using_CSS_counters)\n\n\n* :star2: 彩蛋 - “方向键盘乱搓可开启灵车飘逸模式OvO”\n\n    ```javascript\n    // 键盘控制方向\n    document.onkeydown = function(event){\n      var e = event || window.event;\n      switch(e.keyCode){\n        case 37:\n          return command.exportLeft();\n          break;\n        case 38:\n          return command.exportGo();\n          break;\n        case 39:\n          return command.exportRight();\n          break;\n        case 40:\n          return command.exportBack();\n          break;\n      }\n    }\n    ```\n\n\n","slug":"IFE-2016-SP-task33","published":1,"updated":"2018-08-25T02:22:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbpi000q5xzxjun49804","content":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task33 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"400px\" src=\"//jsfiddle.net/0953w48r/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>\n<a id=\"more\"></a>\n<h3 id=\"circular-indexing-modulus-vs-remainder\"><a class=\"header-anchor\" href=\"#circular-indexing-modulus-vs-remainder\">¶</a>Circular Indexing - Modulus vs Remainder</h3>\n<blockquote>\n<p><a href=\"http://www.sitecrafting.com/blog/modulus-remainder/\" target=\"_blank\" rel=\"noopener\">(In Javascript) The <strong>% operator is not mod</strong>, even though that’s how everyone reads it. <strong>It’s actually remainder</strong>. But we need mod</a>…</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\" target=\"_blank\" rel=\"noopener\">JavaScript’s numeric operators are +, -, *, / and <strong>% — which is the remainder operator</strong></a> (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder_%28%29\" target=\"_blank\" rel=\"noopener\">which is not the same as modulo.</a>)</p>\n</blockquote>\n<h4 id=\"solution-1\"><a class=\"header-anchor\" href=\"#solution-1\">¶</a>Solution 1</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This solution is from the first link quoted above.</span></span><br><span class=\"line\"><span class=\"comment\">// Note the use of Math.floor ! It also takes 'The mod operator returns a float' into consideration, which I'm not quite sure...(???)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mod</span>(<span class=\"params\">num, mod</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> remain = num % mod;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(remain &gt; <span class=\"number\">0</span> ? remain : remain + mod);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>&quot;<a href=\"http://ods.com.ua/win/eng/web-tech/js/htm/07-01.phtml\" target=\"_blank\" rel=\"noopener\">The modulus operator in JavaScript is also different from the one in other programming languages. It operates not only on integers but also on floating point numbers. You should be aware that the modulus operator occasionally returns inaccurate results. </a>&quot; as said, but I’m not sure when % operates only on integers will it occasionally returns inaccurate results ???</p>\n</blockquote>\n<h4 id=\"solution-2\"><a class=\"header-anchor\" href=\"#solution-2\">¶</a>Solution 2</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// My Solution</span></span><br><span class=\"line\">(num % mod + mod) % mod</span><br></pre></td></tr></table></figure>\n<h3 id=\"dealing-with-css-property-with-prefixes\"><a class=\"header-anchor\" href=\"#dealing-with-css-property-with-prefixes\">¶</a>Dealing with CSS Property with Prefixes</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Inspired by jquery-3.1.0.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProperName</span>(<span class=\"params\">cssPropertyName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = cssPropertyName;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cssPrefixes = [<span class=\"string\">\"Webkit\"</span>, <span class=\"string\">\"Moz\"</span>, <span class=\"string\">\"ms\"</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> emptyStyle = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>).style;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> emptyStyle) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> capName = name[<span class=\"number\">0</span>].toUpperCase + name.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = cssPrefixes.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">    name = cssPrefixes[i] + capName;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> emptyStyle) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// var PROPERTY = getProperName(\"transform\");</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<h3 id=\"任务得分第三的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第三的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=2097\" target=\"_blank\" rel=\"noopener\">任务得分第三的团队的 solution</a></h3>\n<ul>\n<li>😶 Some differences compared with my solution\n<ul>\n<li>🎀 Much shorter <code>HTML</code> and <code>CSS</code>; <code>JS</code> bears much more responsibilities.\n<ul>\n<li>Each cell in the board only has <code>border-right</code> and <code>border-bottom</code> <code>CSS</code> styles and even less when appears on the rightmost or downmost added with class by <code>JS</code>.</li>\n<li>In the task’s case, making cells <code>box-sizing: border-box;</code> is not a good try 😦. In other word, it’s better remain cells default <code>box-sizing: content-box;</code> .</li>\n<li>Leftmost cells are added with <code>clear: both;</code> to change line instead of fixing the size of their parent div, which takes extra calculation.</li>\n<li>All cells in the board are generated by <code>JS</code> instead of <code>HTML</code> , which is much more flexible when you want a board of different size.</li>\n</ul>\n</li>\n<li>🌟 Random position generated when document loaded initially makes the game more interesting.</li>\n<li>😕 Using two variable ( <code>turn</code> and <code>rotate</code> ) having something in common instead of one to record direction as well as degrees should the square rotate. If the direction valiable is able to be negative, then it can figures out the degree valiable if only times 90.</li>\n</ul>\n</li>\n<li>🔖 <code>document.createElement</code> vs <code>document.createDocumentFragment</code></li>\n</ul>\n<h3 id=\"任务得分前三的其他团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分前三的其他团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/task/detail?taskId=33\" target=\"_blank\" rel=\"noopener\">任务得分前三的其他团队的 solution</a></h3>\n<ul>\n<li>😶 Using <code>table</code> tag for layout of the board.</li>\n</ul>\n<h3 id=\"任务得分第四的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第四的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=2067\" target=\"_blank\" rel=\"noopener\">任务得分第四的团队的 solution</a></h3>\n<ul>\n<li>\n<p>🎀 <code>outline</code> together with <code>background: #fff;</code> instead of <code>border</code></p>\n</li>\n<li>\n<p>🔖 水平垂直居中</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;<span class=\"comment\">/* 相对于视窗 */</span></span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>🔖 去掉 <code>inline-block</code> 元素间间隙</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.row-ol</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">letter-spacing</span>: -<span class=\"number\">0.5em</span>;<span class=\"comment\">/* inline-block 元素的父元素设置 letter-spacing 为负 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.row-ol</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;<span class=\"comment\">/* inline-block 元素 */</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0</span>;<span class=\"comment\">/* inline-block 元素设置 letter-spacing 为零 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>🔖 <code>counter-increment</code> - 用来自动生成 <code>::before</code> 或 <code>::after</code> 的 <code>content</code></p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 写法一：该团队原本的写法 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.column-ol</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-increment</span>: lineIndex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.column-ol</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(lineIndex);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 写法二：MDN 例子里的写法 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.column-ol</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-reset</span>: lineIndex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.column-ol</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-increment</span>: lineIndex;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(lineIndex);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Lists_and_Counters/Using_CSS_counters\" target=\"_blank\" rel=\"noopener\">Using CSS counters @MDN</a></p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>\n<p>🌟 彩蛋 - “方向键盘乱搓可开启灵车飘逸模式OvO”</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 键盘控制方向</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.onkeydown = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> e = event || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(e.keyCode)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">37</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> command.exportLeft();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">38</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> command.exportGo();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">39</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> command.exportRight();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">40</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> command.exportBack();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task33 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"400px\" src=\"//jsfiddle.net/0953w48r/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>","more":"<h3 id=\"circular-indexing-modulus-vs-remainder\"><a class=\"header-anchor\" href=\"#circular-indexing-modulus-vs-remainder\">¶</a>Circular Indexing - Modulus vs Remainder</h3>\n<blockquote>\n<p><a href=\"http://www.sitecrafting.com/blog/modulus-remainder/\" target=\"_blank\" rel=\"noopener\">(In Javascript) The <strong>% operator is not mod</strong>, even though that’s how everyone reads it. <strong>It’s actually remainder</strong>. But we need mod</a>…</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\" target=\"_blank\" rel=\"noopener\">JavaScript’s numeric operators are +, -, *, / and <strong>% — which is the remainder operator</strong></a> (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder_%28%29\" target=\"_blank\" rel=\"noopener\">which is not the same as modulo.</a>)</p>\n</blockquote>\n<h4 id=\"solution-1\"><a class=\"header-anchor\" href=\"#solution-1\">¶</a>Solution 1</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This solution is from the first link quoted above.</span></span><br><span class=\"line\"><span class=\"comment\">// Note the use of Math.floor ! It also takes 'The mod operator returns a float' into consideration, which I'm not quite sure...(???)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mod</span>(<span class=\"params\">num, mod</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> remain = num % mod;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(remain &gt; <span class=\"number\">0</span> ? remain : remain + mod);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>&quot;<a href=\"http://ods.com.ua/win/eng/web-tech/js/htm/07-01.phtml\" target=\"_blank\" rel=\"noopener\">The modulus operator in JavaScript is also different from the one in other programming languages. It operates not only on integers but also on floating point numbers. You should be aware that the modulus operator occasionally returns inaccurate results. </a>&quot; as said, but I’m not sure when % operates only on integers will it occasionally returns inaccurate results ???</p>\n</blockquote>\n<h4 id=\"solution-2\"><a class=\"header-anchor\" href=\"#solution-2\">¶</a>Solution 2</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// My Solution</span></span><br><span class=\"line\">(num % mod + mod) % mod</span><br></pre></td></tr></table></figure>\n<h3 id=\"dealing-with-css-property-with-prefixes\"><a class=\"header-anchor\" href=\"#dealing-with-css-property-with-prefixes\">¶</a>Dealing with CSS Property with Prefixes</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Inspired by jquery-3.1.0.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProperName</span>(<span class=\"params\">cssPropertyName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = cssPropertyName;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cssPrefixes = [<span class=\"string\">\"Webkit\"</span>, <span class=\"string\">\"Moz\"</span>, <span class=\"string\">\"ms\"</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> emptyStyle = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>).style;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> emptyStyle) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> capName = name[<span class=\"number\">0</span>].toUpperCase + name.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = cssPrefixes.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">    name = cssPrefixes[i] + capName;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> emptyStyle) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// var PROPERTY = getProperName(\"transform\");</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<h3 id=\"任务得分第三的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第三的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=2097\" target=\"_blank\" rel=\"noopener\">任务得分第三的团队的 solution</a></h3>\n<ul>\n<li>😶 Some differences compared with my solution\n<ul>\n<li>🎀 Much shorter <code>HTML</code> and <code>CSS</code>; <code>JS</code> bears much more responsibilities.\n<ul>\n<li>Each cell in the board only has <code>border-right</code> and <code>border-bottom</code> <code>CSS</code> styles and even less when appears on the rightmost or downmost added with class by <code>JS</code>.</li>\n<li>In the task’s case, making cells <code>box-sizing: border-box;</code> is not a good try 😦. In other word, it’s better remain cells default <code>box-sizing: content-box;</code> .</li>\n<li>Leftmost cells are added with <code>clear: both;</code> to change line instead of fixing the size of their parent div, which takes extra calculation.</li>\n<li>All cells in the board are generated by <code>JS</code> instead of <code>HTML</code> , which is much more flexible when you want a board of different size.</li>\n</ul>\n</li>\n<li>🌟 Random position generated when document loaded initially makes the game more interesting.</li>\n<li>😕 Using two variable ( <code>turn</code> and <code>rotate</code> ) having something in common instead of one to record direction as well as degrees should the square rotate. If the direction valiable is able to be negative, then it can figures out the degree valiable if only times 90.</li>\n</ul>\n</li>\n<li>🔖 <code>document.createElement</code> vs <code>document.createDocumentFragment</code></li>\n</ul>\n<h3 id=\"任务得分前三的其他团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分前三的其他团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/task/detail?taskId=33\" target=\"_blank\" rel=\"noopener\">任务得分前三的其他团队的 solution</a></h3>\n<ul>\n<li>😶 Using <code>table</code> tag for layout of the board.</li>\n</ul>\n<h3 id=\"任务得分第四的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第四的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=2067\" target=\"_blank\" rel=\"noopener\">任务得分第四的团队的 solution</a></h3>\n<ul>\n<li>\n<p>🎀 <code>outline</code> together with <code>background: #fff;</code> instead of <code>border</code></p>\n</li>\n<li>\n<p>🔖 水平垂直居中</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;<span class=\"comment\">/* 相对于视窗 */</span></span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>🔖 去掉 <code>inline-block</code> 元素间间隙</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.row-ol</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">letter-spacing</span>: -<span class=\"number\">0.5em</span>;<span class=\"comment\">/* inline-block 元素的父元素设置 letter-spacing 为负 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.row-ol</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;<span class=\"comment\">/* inline-block 元素 */</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0</span>;<span class=\"comment\">/* inline-block 元素设置 letter-spacing 为零 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>🔖 <code>counter-increment</code> - 用来自动生成 <code>::before</code> 或 <code>::after</code> 的 <code>content</code></p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 写法一：该团队原本的写法 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.column-ol</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-increment</span>: lineIndex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.column-ol</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(lineIndex);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 写法二：MDN 例子里的写法 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.column-ol</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-reset</span>: lineIndex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.column-ol</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-increment</span>: lineIndex;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(lineIndex);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Lists_and_Counters/Using_CSS_counters\" target=\"_blank\" rel=\"noopener\">Using CSS counters @MDN</a></p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>\n<p>🌟 彩蛋 - “方向键盘乱搓可开启灵车飘逸模式OvO”</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 键盘控制方向</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.onkeydown = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> e = event || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(e.keyCode)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">37</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> command.exportLeft();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">38</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> command.exportGo();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">39</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> command.exportRight();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">40</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> command.exportBack();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"IFE-2016-SP-task34 Square Following Directives II","date":"2017-01-08T12:57:49.000Z","_content":"\n## My Solution\n\nMy solution to task34 is available on jsfiddle: \n{% jsfiddle yo8udddy 'default' 'light' '100%' '400px' %}\n\n<!-- more -->\n\n## Compared with others'\n\n### [任务得分第一的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=2118)\n\n* :ribbon: 判断对象是否含有某属性 \n    \n    ```javascript\n    // 我也不记得自己当初为何脑抽写得这么繁琐了。。:/\n    var getValidDirective = function(rawValue) {\n      var possibleValue = [];\n      for (var key in square) {\n        possibleValue.push(key);\n      }\n      // 为“判断对象是否含有某属性”，我啰哩啰嗦地写了上面一大堆外加下面的 if 判断条件 :/\n      var value = rawValue.trim().replace(/\\s/g, '').toLowerCase();\n      if (possibleValue.indexOf(value) > -1) {\n        return value;\n      }\n      throw new Error(\"非法指令，请重新尝试 :(\");\n    };\n\n    /* 化简如下：*/\n\n    var getValidDirective = function(rawValue) {\n      var value = rawValue.trim().replace(/\\s/g, '').toLowerCase();\n      if (square[value]) {// 现在“判断对象是否含有某属性”化简为仅仅一行代码\n        return value;\n      }\n      throw new Error(\"非法指令，请重新尝试 :(\");\n    };\n    ```\n\n* :no_mouth: [其他见 task33 时和该团队的比较](http://baishusama.github.io/2017/01/07/IFE-2016-SP-task33/#任务得分第三的团队的-solution)\n\n### [任务得分第二的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=8025)\n\n* :mask: 评论说：“按照 task34 题意，（在四个死角，） MOV 指令执行失败的时候，应该既不旋转也不前进。”\n    - [x] ToDo: 改进 MOV 相关逻辑\n\n## 做 task34 时遇到的个别难点\n\n大家 task34 的完成度都不是很高的样子。。我这里对我做 task34 的时候遇到的最难点，进行一下说明。\n\n### 方向变量\n\n我的小方块的方向 `sqDir` (squareDirection 的缩写）的定义借鉴了 css 中 top, right, bottom, left 的书写顺序。这里我规定：默认朝上的时候，`sqDir` 的值为 0 ，每顺时针旋转 90 度， `sqDir` 值加一，逆时针则减一。理论上，`sqDir` 的值可以为所有整数（当然是在 JS 数字范围内）。遵循这种规定的 `sqDir` 值能很好地对应到（只需乘以 90 便能得到） `transform` 属性的 `rotate` 的角度值。`sqDir` 的部分值的含义及和 `rotate` 角度的对应如下表：\n\n| ... |  -4 |  -3 |  -2 |  -1 |**0**|**1**|**2**|**3**|  4  | ... |\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n| …… | 朝上 | 朝右 | 朝下 | 朝左 |**朝上**|**朝右**|**朝下**|**朝左**| 朝上 | …… |\n|...|-360deg|-270deg|-180deg|-90deg|0deg|90deg|180deg|270deg|360deg| ... |\n\n### 朝向何方\n\n那么如何判定一个小方块是朝向什么方向的呢？\n\n这里，我们需要数学含义上的取模运算，而不是 JavaScript 中的 `%` 运算。取模和取余的差别，在[上一篇](http://baishusama.github.io/2017/01/07/IFE-2016-SP-task33/)中提到过，这里也就不再多说了。于是，我定义了如下取模函数，用来将 `sqDir` 的值映射到 `0,1,2,3` 以便判断方向：\n\n```javascript\n// 真正的取模，而不是取余\nvar directionMod4 = function(direction) {\n  return (direction % 4 + 4) % 4;\n};\n```\n\n### 就近转向（往哪边转）\n\n以上对于 `GO`、`TUN` 和 `TRA` 三种指令已经足够用了，但是 `MOV` 指令能任性地转向！然而，我不想让自己的小方块显得很蠢，多做一些无用功——转多余的角度才转到指定方向。\n\n为了使小方块显得更加聪明，我们需要就 `0,1,2,3` （即往上转，往右转，往下转，往左转）这四种输入找到小方块在当前朝向（`directionMod4(sqDir)`）下，往哪边（顺时针还是逆时针）转向能最快地转到位。\n\n这里最好的办法应当是能找到一个类似循环链表的数据结构，然后同时向左和向右查找，类似深度优先地返回最\n短路径——所转角度最小的转向。\n\n可惜我没有找到理想的数据结构，就用了两个 `while` 循环来实现上述逻辑，代码如下：\n\n```javascript\n// 返回转到某方向的最小角度\nvar turnTo = function(direction) {\n  var curDir = directionMod4(sqDir);// 小方块的当前朝向\n  // if(curDir === direction) return 0;\n\n  /* 就近转向 */\n  var cwStep = 0,// 顺时针（clockwise）所需转向次数\n    anticwStep = 0;// 逆时针（anticlockwise）所需转向次数\n  while (true) {\n    if ((curDir + cwStep) % 4 === direction) {\n      break;\n    }\n    cwStep++;\n  }\n  while (true) {\n    if ((curDir - anticwStep + 4) % 4 === direction) {\n      break;\n    }\n    anticwStep++;\n  }\n\n  var deg = 0;\n  if (cwStep > anticwStep) {\n    deg = -anticwStep * 90;\n  } else {//if(cwStep <= anticwStep)\n    deg = cwStep * 90;\n  }\n  return deg;\n};\n```\n\n以上代码的注意点：\n\n1. `cwStep` 和 `anticwStep` 分别代表`顺指针所需转向次数`和`逆时针所需转向次数`。两者都可以为零，为零的时候函数将返回 0 。\n2. 为了将方向变化控制在 `0,1,2,3` 四个数值内，`while` 循环里的 `if` 判断条件中用了 `% 4` 运算，以避免超过 `3` ；计算逆时针旋转所需次数的时候，`curDir - anticwStep + 4` 中的 `+ 4` 避免小于 `0` 。\n3. 当 `顺指针所需转向次数 === 逆时针所需转向次数` 时，统一采用顺时针转向。\n\n再重新审视一下转向逻辑的话，不难发现：\n\n1. `顺指针所需转向次数`和`逆时针所需转向次数`之和总是等于 4 的，即 `anticwStep === 4 - cwStep`。由此我们可以去掉负责计算 `anticwStep` 的第二个 `while` 循环。\n2. `cwStep` 的值可能为 `0,1,2,3` 四个数（`anticwStep` 对应为 `3,2,1,0`），仅当 `cwStep` 的值为 3 的时候，逆时针方向转角才小于顺时针。\n\n综上，上面的代码可以简化如下：\n\n```javascript\n// 返回转到某方向的最小角度\nvar turnTo = function(direction) {\n  var curDir = directionMod4(sqDir);// 小方块的当前朝向\n  // if(curDir === direction) return 0;\n\n  /* 就近转向 */\n  var cwStep = 0;// 顺时针（clockwise）所需转向次数\n  while (true) {\n    if ((curDir + cwStep) % 4 === direction) {\n      break;\n    }\n    cwStep++;\n  }\n\n  var deg = 0;\n  if (cwStep > 2) {\n    deg = (cwStep - 4) * 90;\n  } else {\n    deg = cwStep * 90;\n  }\n  return deg;\n};\n```\n\n## To Do:\n\n- [ ] 就近转向的更好方式？\n\n## 结语\n\n最后献上，今天看的 S 校某公开课上讲师引用的一句话：\n\n> \"Really the world is just one big spectrum and if you go around far enough to one side, you end up on the other.\"","source":"_posts/IFE-2016-SP-task34.md","raw":"---\ntitle: IFE-2016-SP-task34 Square Following Directives II\ndate: 2017-01-08 20:57:49\ntags: [IFE]\n---\n\n## My Solution\n\nMy solution to task34 is available on jsfiddle: \n{% jsfiddle yo8udddy 'default' 'light' '100%' '400px' %}\n\n<!-- more -->\n\n## Compared with others'\n\n### [任务得分第一的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=2118)\n\n* :ribbon: 判断对象是否含有某属性 \n    \n    ```javascript\n    // 我也不记得自己当初为何脑抽写得这么繁琐了。。:/\n    var getValidDirective = function(rawValue) {\n      var possibleValue = [];\n      for (var key in square) {\n        possibleValue.push(key);\n      }\n      // 为“判断对象是否含有某属性”，我啰哩啰嗦地写了上面一大堆外加下面的 if 判断条件 :/\n      var value = rawValue.trim().replace(/\\s/g, '').toLowerCase();\n      if (possibleValue.indexOf(value) > -1) {\n        return value;\n      }\n      throw new Error(\"非法指令，请重新尝试 :(\");\n    };\n\n    /* 化简如下：*/\n\n    var getValidDirective = function(rawValue) {\n      var value = rawValue.trim().replace(/\\s/g, '').toLowerCase();\n      if (square[value]) {// 现在“判断对象是否含有某属性”化简为仅仅一行代码\n        return value;\n      }\n      throw new Error(\"非法指令，请重新尝试 :(\");\n    };\n    ```\n\n* :no_mouth: [其他见 task33 时和该团队的比较](http://baishusama.github.io/2017/01/07/IFE-2016-SP-task33/#任务得分第三的团队的-solution)\n\n### [任务得分第二的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=8025)\n\n* :mask: 评论说：“按照 task34 题意，（在四个死角，） MOV 指令执行失败的时候，应该既不旋转也不前进。”\n    - [x] ToDo: 改进 MOV 相关逻辑\n\n## 做 task34 时遇到的个别难点\n\n大家 task34 的完成度都不是很高的样子。。我这里对我做 task34 的时候遇到的最难点，进行一下说明。\n\n### 方向变量\n\n我的小方块的方向 `sqDir` (squareDirection 的缩写）的定义借鉴了 css 中 top, right, bottom, left 的书写顺序。这里我规定：默认朝上的时候，`sqDir` 的值为 0 ，每顺时针旋转 90 度， `sqDir` 值加一，逆时针则减一。理论上，`sqDir` 的值可以为所有整数（当然是在 JS 数字范围内）。遵循这种规定的 `sqDir` 值能很好地对应到（只需乘以 90 便能得到） `transform` 属性的 `rotate` 的角度值。`sqDir` 的部分值的含义及和 `rotate` 角度的对应如下表：\n\n| ... |  -4 |  -3 |  -2 |  -1 |**0**|**1**|**2**|**3**|  4  | ... |\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n| …… | 朝上 | 朝右 | 朝下 | 朝左 |**朝上**|**朝右**|**朝下**|**朝左**| 朝上 | …… |\n|...|-360deg|-270deg|-180deg|-90deg|0deg|90deg|180deg|270deg|360deg| ... |\n\n### 朝向何方\n\n那么如何判定一个小方块是朝向什么方向的呢？\n\n这里，我们需要数学含义上的取模运算，而不是 JavaScript 中的 `%` 运算。取模和取余的差别，在[上一篇](http://baishusama.github.io/2017/01/07/IFE-2016-SP-task33/)中提到过，这里也就不再多说了。于是，我定义了如下取模函数，用来将 `sqDir` 的值映射到 `0,1,2,3` 以便判断方向：\n\n```javascript\n// 真正的取模，而不是取余\nvar directionMod4 = function(direction) {\n  return (direction % 4 + 4) % 4;\n};\n```\n\n### 就近转向（往哪边转）\n\n以上对于 `GO`、`TUN` 和 `TRA` 三种指令已经足够用了，但是 `MOV` 指令能任性地转向！然而，我不想让自己的小方块显得很蠢，多做一些无用功——转多余的角度才转到指定方向。\n\n为了使小方块显得更加聪明，我们需要就 `0,1,2,3` （即往上转，往右转，往下转，往左转）这四种输入找到小方块在当前朝向（`directionMod4(sqDir)`）下，往哪边（顺时针还是逆时针）转向能最快地转到位。\n\n这里最好的办法应当是能找到一个类似循环链表的数据结构，然后同时向左和向右查找，类似深度优先地返回最\n短路径——所转角度最小的转向。\n\n可惜我没有找到理想的数据结构，就用了两个 `while` 循环来实现上述逻辑，代码如下：\n\n```javascript\n// 返回转到某方向的最小角度\nvar turnTo = function(direction) {\n  var curDir = directionMod4(sqDir);// 小方块的当前朝向\n  // if(curDir === direction) return 0;\n\n  /* 就近转向 */\n  var cwStep = 0,// 顺时针（clockwise）所需转向次数\n    anticwStep = 0;// 逆时针（anticlockwise）所需转向次数\n  while (true) {\n    if ((curDir + cwStep) % 4 === direction) {\n      break;\n    }\n    cwStep++;\n  }\n  while (true) {\n    if ((curDir - anticwStep + 4) % 4 === direction) {\n      break;\n    }\n    anticwStep++;\n  }\n\n  var deg = 0;\n  if (cwStep > anticwStep) {\n    deg = -anticwStep * 90;\n  } else {//if(cwStep <= anticwStep)\n    deg = cwStep * 90;\n  }\n  return deg;\n};\n```\n\n以上代码的注意点：\n\n1. `cwStep` 和 `anticwStep` 分别代表`顺指针所需转向次数`和`逆时针所需转向次数`。两者都可以为零，为零的时候函数将返回 0 。\n2. 为了将方向变化控制在 `0,1,2,3` 四个数值内，`while` 循环里的 `if` 判断条件中用了 `% 4` 运算，以避免超过 `3` ；计算逆时针旋转所需次数的时候，`curDir - anticwStep + 4` 中的 `+ 4` 避免小于 `0` 。\n3. 当 `顺指针所需转向次数 === 逆时针所需转向次数` 时，统一采用顺时针转向。\n\n再重新审视一下转向逻辑的话，不难发现：\n\n1. `顺指针所需转向次数`和`逆时针所需转向次数`之和总是等于 4 的，即 `anticwStep === 4 - cwStep`。由此我们可以去掉负责计算 `anticwStep` 的第二个 `while` 循环。\n2. `cwStep` 的值可能为 `0,1,2,3` 四个数（`anticwStep` 对应为 `3,2,1,0`），仅当 `cwStep` 的值为 3 的时候，逆时针方向转角才小于顺时针。\n\n综上，上面的代码可以简化如下：\n\n```javascript\n// 返回转到某方向的最小角度\nvar turnTo = function(direction) {\n  var curDir = directionMod4(sqDir);// 小方块的当前朝向\n  // if(curDir === direction) return 0;\n\n  /* 就近转向 */\n  var cwStep = 0;// 顺时针（clockwise）所需转向次数\n  while (true) {\n    if ((curDir + cwStep) % 4 === direction) {\n      break;\n    }\n    cwStep++;\n  }\n\n  var deg = 0;\n  if (cwStep > 2) {\n    deg = (cwStep - 4) * 90;\n  } else {\n    deg = cwStep * 90;\n  }\n  return deg;\n};\n```\n\n## To Do:\n\n- [ ] 就近转向的更好方式？\n\n## 结语\n\n最后献上，今天看的 S 校某公开课上讲师引用的一句话：\n\n> \"Really the world is just one big spectrum and if you go around far enough to one side, you end up on the other.\"","slug":"IFE-2016-SP-task34","published":1,"updated":"2018-08-25T02:22:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbpj000s5xzxic9co6p8","content":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task34 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"400px\" src=\"//jsfiddle.net/yo8udddy/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>\n<a id=\"more\"></a>\n<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<h3 id=\"任务得分第一的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第一的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=2118\" target=\"_blank\" rel=\"noopener\">任务得分第一的团队的 solution</a></h3>\n<ul>\n<li>\n<p>🎀 判断对象是否含有某属性</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我也不记得自己当初为何脑抽写得这么繁琐了。。:/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getValidDirective = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rawValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> possibleValue = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> square) &#123;</span><br><span class=\"line\">    possibleValue.push(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 为“判断对象是否含有某属性”，我啰哩啰嗦地写了上面一大堆外加下面的 if 判断条件 :/</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = rawValue.trim().replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">''</span>).toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (possibleValue.indexOf(value) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"非法指令，请重新尝试 :(\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 化简如下：*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getValidDirective = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rawValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = rawValue.trim().replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">''</span>).toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (square[value]) &#123;<span class=\"comment\">// 现在“判断对象是否含有某属性”化简为仅仅一行代码</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"非法指令，请重新尝试 :(\"</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>😶 <a href=\"http://baishusama.github.io/2017/01/07/IFE-2016-SP-task33/#%E4%BB%BB%E5%8A%A1%E5%BE%97%E5%88%86%E7%AC%AC%E4%B8%89%E7%9A%84%E5%9B%A2%E9%98%9F%E7%9A%84-solution\">其他见 task33 时和该团队的比较</a></p>\n</li>\n</ul>\n<h3 id=\"任务得分第二的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第二的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=8025\" target=\"_blank\" rel=\"noopener\">任务得分第二的团队的 solution</a></h3>\n<ul>\n<li>😷 评论说：“按照 task34 题意，（在四个死角，） MOV 指令执行失败的时候，应该既不旋转也不前进。”\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox0\" checked=\"true\"><label for=\"checkbox0\">ToDo: 改进 MOV 相关逻辑</label></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"做-task34-时遇到的个别难点\"><a class=\"header-anchor\" href=\"#做-task34-时遇到的个别难点\">¶</a>做 task34 时遇到的个别难点</h2>\n<p>大家 task34 的完成度都不是很高的样子。。我这里对我做 task34 的时候遇到的最难点，进行一下说明。</p>\n<h3 id=\"方向变量\"><a class=\"header-anchor\" href=\"#方向变量\">¶</a>方向变量</h3>\n<p>我的小方块的方向 <code>sqDir</code> (squareDirection 的缩写）的定义借鉴了 css 中 top, right, bottom, left 的书写顺序。这里我规定：默认朝上的时候，<code>sqDir</code> 的值为 0 ，每顺时针旋转 90 度， <code>sqDir</code> 值加一，逆时针则减一。理论上，<code>sqDir</code> 的值可以为所有整数（当然是在 JS 数字范围内）。遵循这种规定的 <code>sqDir</code> 值能很好地对应到（只需乘以 90 便能得到） <code>transform</code> 属性的 <code>rotate</code> 的角度值。<code>sqDir</code> 的部分值的含义及和 <code>rotate</code> 角度的对应如下表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">…</th>\n<th style=\"text-align:center\">-4</th>\n<th style=\"text-align:center\">-3</th>\n<th style=\"text-align:center\">-2</th>\n<th style=\"text-align:center\">-1</th>\n<th style=\"text-align:center\"><strong>0</strong></th>\n<th style=\"text-align:center\"><strong>1</strong></th>\n<th style=\"text-align:center\"><strong>2</strong></th>\n<th style=\"text-align:center\"><strong>3</strong></th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">…</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">……</td>\n<td style=\"text-align:center\">朝上</td>\n<td style=\"text-align:center\">朝右</td>\n<td style=\"text-align:center\">朝下</td>\n<td style=\"text-align:center\">朝左</td>\n<td style=\"text-align:center\"><strong>朝上</strong></td>\n<td style=\"text-align:center\"><strong>朝右</strong></td>\n<td style=\"text-align:center\"><strong>朝下</strong></td>\n<td style=\"text-align:center\"><strong>朝左</strong></td>\n<td style=\"text-align:center\">朝上</td>\n<td style=\"text-align:center\">……</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">…</td>\n<td style=\"text-align:center\">-360deg</td>\n<td style=\"text-align:center\">-270deg</td>\n<td style=\"text-align:center\">-180deg</td>\n<td style=\"text-align:center\">-90deg</td>\n<td style=\"text-align:center\">0deg</td>\n<td style=\"text-align:center\">90deg</td>\n<td style=\"text-align:center\">180deg</td>\n<td style=\"text-align:center\">270deg</td>\n<td style=\"text-align:center\">360deg</td>\n<td style=\"text-align:center\">…</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"朝向何方\"><a class=\"header-anchor\" href=\"#朝向何方\">¶</a>朝向何方</h3>\n<p>那么如何判定一个小方块是朝向什么方向的呢？</p>\n<p>这里，我们需要数学含义上的取模运算，而不是 JavaScript 中的 <code>%</code> 运算。取模和取余的差别，在<a href=\"http://baishusama.github.io/2017/01/07/IFE-2016-SP-task33/\">上一篇</a>中提到过，这里也就不再多说了。于是，我定义了如下取模函数，用来将 <code>sqDir</code> 的值映射到 <code>0,1,2,3</code> 以便判断方向：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 真正的取模，而不是取余</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> directionMod4 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">direction</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (direction % <span class=\"number\">4</span> + <span class=\"number\">4</span>) % <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"就近转向-往哪边转\"><a class=\"header-anchor\" href=\"#就近转向-往哪边转\">¶</a>就近转向（往哪边转）</h3>\n<p>以上对于 <code>GO</code>、<code>TUN</code> 和 <code>TRA</code> 三种指令已经足够用了，但是 <code>MOV</code> 指令能任性地转向！然而，我不想让自己的小方块显得很蠢，多做一些无用功——转多余的角度才转到指定方向。</p>\n<p>为了使小方块显得更加聪明，我们需要就 <code>0,1,2,3</code> （即往上转，往右转，往下转，往左转）这四种输入找到小方块在当前朝向（<code>directionMod4(sqDir)</code>）下，往哪边（顺时针还是逆时针）转向能最快地转到位。</p>\n<p>这里最好的办法应当是能找到一个类似循环链表的数据结构，然后同时向左和向右查找，类似深度优先地返回最<br>\n短路径——所转角度最小的转向。</p>\n<p>可惜我没有找到理想的数据结构，就用了两个 <code>while</code> 循环来实现上述逻辑，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回转到某方向的最小角度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> turnTo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">direction</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> curDir = directionMod4(sqDir);<span class=\"comment\">// 小方块的当前朝向</span></span><br><span class=\"line\">  <span class=\"comment\">// if(curDir === direction) return 0;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 就近转向 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cwStep = <span class=\"number\">0</span>,<span class=\"comment\">// 顺时针（clockwise）所需转向次数</span></span><br><span class=\"line\">    anticwStep = <span class=\"number\">0</span>;<span class=\"comment\">// 逆时针（anticlockwise）所需转向次数</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((curDir + cwStep) % <span class=\"number\">4</span> === direction) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cwStep++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((curDir - anticwStep + <span class=\"number\">4</span>) % <span class=\"number\">4</span> === direction) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    anticwStep++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> deg = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cwStep &gt; anticwStep) &#123;</span><br><span class=\"line\">    deg = -anticwStep * <span class=\"number\">90</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//if(cwStep &lt;= anticwStep)</span></span><br><span class=\"line\">    deg = cwStep * <span class=\"number\">90</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> deg;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>以上代码的注意点：</p>\n<ol>\n<li><code>cwStep</code> 和 <code>anticwStep</code> 分别代表<code>顺指针所需转向次数</code>和<code>逆时针所需转向次数</code>。两者都可以为零，为零的时候函数将返回 0 。</li>\n<li>为了将方向变化控制在 <code>0,1,2,3</code> 四个数值内，<code>while</code> 循环里的 <code>if</code> 判断条件中用了 <code>% 4</code> 运算，以避免超过 <code>3</code> ；计算逆时针旋转所需次数的时候，<code>curDir - anticwStep + 4</code> 中的 <code>+ 4</code> 避免小于 <code>0</code> 。</li>\n<li>当 <code>顺指针所需转向次数 === 逆时针所需转向次数</code> 时，统一采用顺时针转向。</li>\n</ol>\n<p>再重新审视一下转向逻辑的话，不难发现：</p>\n<ol>\n<li><code>顺指针所需转向次数</code>和<code>逆时针所需转向次数</code>之和总是等于 4 的，即 <code>anticwStep === 4 - cwStep</code>。由此我们可以去掉负责计算 <code>anticwStep</code> 的第二个 <code>while</code> 循环。</li>\n<li><code>cwStep</code> 的值可能为 <code>0,1,2,3</code> 四个数（<code>anticwStep</code> 对应为 <code>3,2,1,0</code>），仅当 <code>cwStep</code> 的值为 3 的时候，逆时针方向转角才小于顺时针。</li>\n</ol>\n<p>综上，上面的代码可以简化如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回转到某方向的最小角度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> turnTo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">direction</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> curDir = directionMod4(sqDir);<span class=\"comment\">// 小方块的当前朝向</span></span><br><span class=\"line\">  <span class=\"comment\">// if(curDir === direction) return 0;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 就近转向 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cwStep = <span class=\"number\">0</span>;<span class=\"comment\">// 顺时针（clockwise）所需转向次数</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((curDir + cwStep) % <span class=\"number\">4</span> === direction) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cwStep++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> deg = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cwStep &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    deg = (cwStep - <span class=\"number\">4</span>) * <span class=\"number\">90</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    deg = cwStep * <span class=\"number\">90</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> deg;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"to-do\"><a class=\"header-anchor\" href=\"#to-do\">¶</a>To Do:</h2>\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox1\"><label for=\"checkbox1\">就近转向的更好方式？</label></li>\n</ul>\n<h2 id=\"结语\"><a class=\"header-anchor\" href=\"#结语\">¶</a>结语</h2>\n<p>最后献上，今天看的 S 校某公开课上讲师引用的一句话：</p>\n<blockquote>\n<p>“Really the world is just one big spectrum and if you go around far enough to one side, you end up on the other.”</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task34 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"400px\" src=\"//jsfiddle.net/yo8udddy/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>","more":"<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<h3 id=\"任务得分第一的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第一的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=2118\" target=\"_blank\" rel=\"noopener\">任务得分第一的团队的 solution</a></h3>\n<ul>\n<li>\n<p>🎀 判断对象是否含有某属性</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我也不记得自己当初为何脑抽写得这么繁琐了。。:/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getValidDirective = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rawValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> possibleValue = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> square) &#123;</span><br><span class=\"line\">    possibleValue.push(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 为“判断对象是否含有某属性”，我啰哩啰嗦地写了上面一大堆外加下面的 if 判断条件 :/</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = rawValue.trim().replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">''</span>).toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (possibleValue.indexOf(value) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"非法指令，请重新尝试 :(\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 化简如下：*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getValidDirective = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rawValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = rawValue.trim().replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">''</span>).toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (square[value]) &#123;<span class=\"comment\">// 现在“判断对象是否含有某属性”化简为仅仅一行代码</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"非法指令，请重新尝试 :(\"</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>😶 <a href=\"http://baishusama.github.io/2017/01/07/IFE-2016-SP-task33/#%E4%BB%BB%E5%8A%A1%E5%BE%97%E5%88%86%E7%AC%AC%E4%B8%89%E7%9A%84%E5%9B%A2%E9%98%9F%E7%9A%84-solution\">其他见 task33 时和该团队的比较</a></p>\n</li>\n</ul>\n<h3 id=\"任务得分第二的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第二的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=8025\" target=\"_blank\" rel=\"noopener\">任务得分第二的团队的 solution</a></h3>\n<ul>\n<li>😷 评论说：“按照 task34 题意，（在四个死角，） MOV 指令执行失败的时候，应该既不旋转也不前进。”\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox0\" checked=\"true\"><label for=\"checkbox0\">ToDo: 改进 MOV 相关逻辑</label></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"做-task34-时遇到的个别难点\"><a class=\"header-anchor\" href=\"#做-task34-时遇到的个别难点\">¶</a>做 task34 时遇到的个别难点</h2>\n<p>大家 task34 的完成度都不是很高的样子。。我这里对我做 task34 的时候遇到的最难点，进行一下说明。</p>\n<h3 id=\"方向变量\"><a class=\"header-anchor\" href=\"#方向变量\">¶</a>方向变量</h3>\n<p>我的小方块的方向 <code>sqDir</code> (squareDirection 的缩写）的定义借鉴了 css 中 top, right, bottom, left 的书写顺序。这里我规定：默认朝上的时候，<code>sqDir</code> 的值为 0 ，每顺时针旋转 90 度， <code>sqDir</code> 值加一，逆时针则减一。理论上，<code>sqDir</code> 的值可以为所有整数（当然是在 JS 数字范围内）。遵循这种规定的 <code>sqDir</code> 值能很好地对应到（只需乘以 90 便能得到） <code>transform</code> 属性的 <code>rotate</code> 的角度值。<code>sqDir</code> 的部分值的含义及和 <code>rotate</code> 角度的对应如下表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">…</th>\n<th style=\"text-align:center\">-4</th>\n<th style=\"text-align:center\">-3</th>\n<th style=\"text-align:center\">-2</th>\n<th style=\"text-align:center\">-1</th>\n<th style=\"text-align:center\"><strong>0</strong></th>\n<th style=\"text-align:center\"><strong>1</strong></th>\n<th style=\"text-align:center\"><strong>2</strong></th>\n<th style=\"text-align:center\"><strong>3</strong></th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">…</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">……</td>\n<td style=\"text-align:center\">朝上</td>\n<td style=\"text-align:center\">朝右</td>\n<td style=\"text-align:center\">朝下</td>\n<td style=\"text-align:center\">朝左</td>\n<td style=\"text-align:center\"><strong>朝上</strong></td>\n<td style=\"text-align:center\"><strong>朝右</strong></td>\n<td style=\"text-align:center\"><strong>朝下</strong></td>\n<td style=\"text-align:center\"><strong>朝左</strong></td>\n<td style=\"text-align:center\">朝上</td>\n<td style=\"text-align:center\">……</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">…</td>\n<td style=\"text-align:center\">-360deg</td>\n<td style=\"text-align:center\">-270deg</td>\n<td style=\"text-align:center\">-180deg</td>\n<td style=\"text-align:center\">-90deg</td>\n<td style=\"text-align:center\">0deg</td>\n<td style=\"text-align:center\">90deg</td>\n<td style=\"text-align:center\">180deg</td>\n<td style=\"text-align:center\">270deg</td>\n<td style=\"text-align:center\">360deg</td>\n<td style=\"text-align:center\">…</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"朝向何方\"><a class=\"header-anchor\" href=\"#朝向何方\">¶</a>朝向何方</h3>\n<p>那么如何判定一个小方块是朝向什么方向的呢？</p>\n<p>这里，我们需要数学含义上的取模运算，而不是 JavaScript 中的 <code>%</code> 运算。取模和取余的差别，在<a href=\"http://baishusama.github.io/2017/01/07/IFE-2016-SP-task33/\">上一篇</a>中提到过，这里也就不再多说了。于是，我定义了如下取模函数，用来将 <code>sqDir</code> 的值映射到 <code>0,1,2,3</code> 以便判断方向：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 真正的取模，而不是取余</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> directionMod4 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">direction</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (direction % <span class=\"number\">4</span> + <span class=\"number\">4</span>) % <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"就近转向-往哪边转\"><a class=\"header-anchor\" href=\"#就近转向-往哪边转\">¶</a>就近转向（往哪边转）</h3>\n<p>以上对于 <code>GO</code>、<code>TUN</code> 和 <code>TRA</code> 三种指令已经足够用了，但是 <code>MOV</code> 指令能任性地转向！然而，我不想让自己的小方块显得很蠢，多做一些无用功——转多余的角度才转到指定方向。</p>\n<p>为了使小方块显得更加聪明，我们需要就 <code>0,1,2,3</code> （即往上转，往右转，往下转，往左转）这四种输入找到小方块在当前朝向（<code>directionMod4(sqDir)</code>）下，往哪边（顺时针还是逆时针）转向能最快地转到位。</p>\n<p>这里最好的办法应当是能找到一个类似循环链表的数据结构，然后同时向左和向右查找，类似深度优先地返回最<br>\n短路径——所转角度最小的转向。</p>\n<p>可惜我没有找到理想的数据结构，就用了两个 <code>while</code> 循环来实现上述逻辑，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回转到某方向的最小角度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> turnTo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">direction</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> curDir = directionMod4(sqDir);<span class=\"comment\">// 小方块的当前朝向</span></span><br><span class=\"line\">  <span class=\"comment\">// if(curDir === direction) return 0;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 就近转向 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cwStep = <span class=\"number\">0</span>,<span class=\"comment\">// 顺时针（clockwise）所需转向次数</span></span><br><span class=\"line\">    anticwStep = <span class=\"number\">0</span>;<span class=\"comment\">// 逆时针（anticlockwise）所需转向次数</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((curDir + cwStep) % <span class=\"number\">4</span> === direction) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cwStep++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((curDir - anticwStep + <span class=\"number\">4</span>) % <span class=\"number\">4</span> === direction) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    anticwStep++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> deg = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cwStep &gt; anticwStep) &#123;</span><br><span class=\"line\">    deg = -anticwStep * <span class=\"number\">90</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//if(cwStep &lt;= anticwStep)</span></span><br><span class=\"line\">    deg = cwStep * <span class=\"number\">90</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> deg;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>以上代码的注意点：</p>\n<ol>\n<li><code>cwStep</code> 和 <code>anticwStep</code> 分别代表<code>顺指针所需转向次数</code>和<code>逆时针所需转向次数</code>。两者都可以为零，为零的时候函数将返回 0 。</li>\n<li>为了将方向变化控制在 <code>0,1,2,3</code> 四个数值内，<code>while</code> 循环里的 <code>if</code> 判断条件中用了 <code>% 4</code> 运算，以避免超过 <code>3</code> ；计算逆时针旋转所需次数的时候，<code>curDir - anticwStep + 4</code> 中的 <code>+ 4</code> 避免小于 <code>0</code> 。</li>\n<li>当 <code>顺指针所需转向次数 === 逆时针所需转向次数</code> 时，统一采用顺时针转向。</li>\n</ol>\n<p>再重新审视一下转向逻辑的话，不难发现：</p>\n<ol>\n<li><code>顺指针所需转向次数</code>和<code>逆时针所需转向次数</code>之和总是等于 4 的，即 <code>anticwStep === 4 - cwStep</code>。由此我们可以去掉负责计算 <code>anticwStep</code> 的第二个 <code>while</code> 循环。</li>\n<li><code>cwStep</code> 的值可能为 <code>0,1,2,3</code> 四个数（<code>anticwStep</code> 对应为 <code>3,2,1,0</code>），仅当 <code>cwStep</code> 的值为 3 的时候，逆时针方向转角才小于顺时针。</li>\n</ol>\n<p>综上，上面的代码可以简化如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回转到某方向的最小角度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> turnTo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">direction</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> curDir = directionMod4(sqDir);<span class=\"comment\">// 小方块的当前朝向</span></span><br><span class=\"line\">  <span class=\"comment\">// if(curDir === direction) return 0;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 就近转向 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cwStep = <span class=\"number\">0</span>;<span class=\"comment\">// 顺时针（clockwise）所需转向次数</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((curDir + cwStep) % <span class=\"number\">4</span> === direction) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cwStep++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> deg = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cwStep &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    deg = (cwStep - <span class=\"number\">4</span>) * <span class=\"number\">90</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    deg = cwStep * <span class=\"number\">90</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> deg;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"to-do\"><a class=\"header-anchor\" href=\"#to-do\">¶</a>To Do:</h2>\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox1\"><label for=\"checkbox1\">就近转向的更好方式？</label></li>\n</ul>\n<h2 id=\"结语\"><a class=\"header-anchor\" href=\"#结语\">¶</a>结语</h2>\n<p>最后献上，今天看的 S 校某公开课上讲师引用的一句话：</p>\n<blockquote>\n<p>“Really the world is just one big spectrum and if you go around far enough to one side, you end up on the other.”</p>\n</blockquote>"},{"title":"IFE-2016-SP-task35 Square Following Directives III","date":"2017-01-20T04:15:42.000Z","_content":"\n## My Solution\n\nMy solution to task35 is available on jsfiddle: \n{% jsfiddle 0oesrpwL 'default' 'light' '100%' '500px' %}\n\n<!-- more -->\n\n### :bookmark: `&&` 和 `||` 的使用方法\n\n#### [Logical Operators @MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators)\n\n`&&` 会返回第一个假值（falsy value），`||` 会返回第一个真值（truthy value）。假值包括：\n\n1. `undefined`\n2. `null`\n3. `0`\n4. `NaN`\n5. `\"\"`\n\n```javascript\n/* 下面两个函数等价 */\nfunction shortCircuitEvaluation() {\n  doSomething() || doSomethingElse()\n}\n\nfunction equivalentEvaluation() {\n  var flag = doSomething();\n  if (!flag) {\n    doSomethingElse();\n  }\n}\n/* 一些例子 */\n\"\" && false      // returns \"\"\n\"\" || false      // returns false\nfalse || \"\"      // returns \"\"\n```\n\n#### [对 js 运算符 || 和 && 的总结](http://jianguang-qq.iteye.com/blog/462449?page=2)\n\n```javascript\n/* e.g.1 成长速度 */\n// 需求一（==） - basic:\nvar addLevel = (addStep==5 && 1) || (addStep==10 && 2) || (addStep==12 && 3) || (addStep==15 && 4) || 0;\n// 需求一（==） - with Object:\nvar addLevel={'5':1,'10':2,'12':3,'15':4}[addStep] || 0;      \n// 需求二（>）:\nvar addLevel = (addStep>12 && 4) || (addStep>10 && 3) || (addStep>5 && 2) || (addStep>0 && 1) || 0;\n\n/* e.g.2 jQuery 源码 */\nvar wrap = !tags.indexOf(\"<opt\") && ...;// means 'startWith'\n```\n\n使用注意点：\n\n* 优点：精简了代码，能减少网络流量\n* 缺点：降低了代码的可读性\n* 推荐做法：适当写些注释\n\n#### 我在自己的实现中的使用\n```javascript\n// 前情提要：directive will be \"go\",\"tunlef2\",...\n\nvar temp = directive.match(/\\d+/) && directive.match(/\\d+/)[0]; \n// e.g. null && ~ -> null | [\"1\"] && \"1\" -> \"1\"\n\nstep = parseInt(temp) || 0; \n// 当值为 null 时，得到 NaN 。NaN || 0 -> 0\n\n// 以及其他很多的 '... || 默认值'\n```\n\n### :ribbon: textarea 避开监听滚动事件来实现同步滚动行号\n\n#### 起因\n\n> 因为，做之前稍微看了眼各个团队得到的评价（评论），了解了[导师对这个任务实现的一些看法](http://ife.baidu.com/2016/review/detail?workId=8467)，其中第四条指出：“指令输入编辑器显示代码行逻辑实现上有点不优雅。 **一定要监听滚动才能实现左边指令行数一起滚动吗？** 包括每次输入变化都重新渲染所有的代码行数，代价有点大。”\n> \n> 于是，我花了很久来思考怎么才能避开我一开始预想的通过监听滚动来实现行号和内容的同步滚动。最终得到了这个实现。\n\n#### 思路\n\n在一个父级 `div` 中两个同级的 div 正常情况下能同步地上下滚动。\n\n所以我们需使 `textarea` 表现得和普通的 `div` 一样——具有和 `div` 一样的特性——能够根据所包含的文字内容的高度，自动地变化自己的高度。\n\n#### 实现\n\n##### textarea 高度自适应的问题 - 法一\n\n> **参考：**\n> [Autosizing textarea using Prototype @SO](http://stackoverflow.com/questions/7477/autosizing-textarea-using-prototype) 提问中 Jan Miksovsky 的回答，以及回答下面的评论提出的一些修改意见。\n\n可以查看 [`jsfiddle` 上的在线 demo]()。\n\n这个解决方法 **棒** 在更多地依赖 HTML 和 CSS，而不是 JS 。\n\n但是也存在 **缺点** ：在最后一行进行回车的时候，高度会有波动，而不是直接一步到位。\n\n**根本原因** 在于，回车的一瞬间 `textarea` 的高度还未发生变化。因为在本例中，`textarea` 的高度为 `height: 100%;` 是依赖于父元素的高度，而父元素的高度依赖于 `div#textCopy` 的高度。\n\n其具体过程是这样的：在最后一行进行回车的时候，`textarea` 的文字内容的最下方会增高一行，此时父元素高度不变，即 `textarea` 的高度不变，默认地 `textarea` 内容高度大于元素本身高度、第一行的内容将上移并被遮挡。而回车触发了 `keydown/keyup` 事件，回车被 JS 中定义的 `autoSize()` 转换成了 `<br/>` 并传给了 `div#textCopy` ，`div#textCopy` 的高度由此变高，父元素和 `textarea` 的高度也相应变高。第一行的内容也就由此能够最终避免被遮挡的命运了。\n\n##### textarea 高度自适应的问题 - 其它方法\n\n> 其它待读的相关资料：\n> [Creating a textarea with auto-resize](https://stackoverflow.com/questions/454202/creating-a-textarea-with-auto-resize)\n> \n> 可以适当参考其它成熟实现：\n> [babeljs.io](https://babeljs.io/repl/)\n\n#### 小结\n\n由于目前需要实现的并不是多么完备而成熟的文本编辑器（需求详见 [task35 任务说明](http://ife.baidu.com/2016/task/detail?taskId=35)），本次实现的文本编辑器还存在若干有待改进之处。\n\n[ ] **To Do**\n\n1. [ ] 默认命令代码在一行内——未考虑到，当输入一行很长的代码，且不换行的情况下，行号间应该存在空隔。\n2. [ ] 默认命令代码的数量是很有限的——未考虑到，当输入行数很多的情况下，数字很大的行号的样式问题。\n3. [ ] 默认用户通过键盘来键入命令行——未考虑除了键盘输入外的其他输入方式（鼠标右键复制等）。\n4. （有待补充。也强烈欢迎各位看官提出 bug ~）\n\n## Compared with others'\n\n### [任务得分第一的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=2417)\n\n#### 一些实现上的差异比较\n\n* `setTimeout` 还是 `setInterval`\n    - 我的指令逐行执行的实现：`for` 循环 + `setTimeout` + 闭包。\n    - 该团队的实现：`setInterval` + 其外部的计数器。\n        + 优点：\n            1. 省去了 `setTimeout` 第二个时间参数的计算。\n            2. 由于自带重复，省去了外层的 `for` 循环。\n            3. 因而也不需要闭包。\n            4. 在终止后续指令的时候，只需要 `clearInterval` 当前即可。而 `setTimeout` 需要 `clearTimeout` 后续所有。\n* 判断指令是否合法\n    - 我是通过对象的方法是否存在判断的。e.g. `!square[name]` 表示方法不存在时。\n    - 该团队 `for in` 所有方法名得到正确指令的正则 `consoleExp` 再用正则判断的。\n\n### [任务得分第二的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=3569)\n\n~~P.S. 这位的代码我没细看，但是这位的头像和（aiti？）一样，和我企鹅群里认识的那人是同一个人么OAO？。。~~\n\n## 对 task36 的展望 ~~（恐慌）~~\n\n~~看了眼 task36 前三的团队实现的 demo 和得到的评价，我觉得我可能要犯拖延了。。第一名的团队支持图片上传。。前三的某支团队甚至搞了一个 AST 。。大神们，请收下在下的膝盖 Orz 。。。~~\n\n在看了[一篇文章](https://zhuanlan.zhihu.com/p/22213177)的“害怕开展新项目怎么办？”“不要完美主义”的部分内容之后，决定还是克服拖延开始这个系列任务的最后一个吧。加油！！\n\n并且在原作者[另一篇文章](https://medium.freecodecamp.com/learning-to-code-when-it-gets-dark-e485edfb58fd#.t2ecehmpn)中得到了肯定：\n\n> The thing I am sure about is — **if a person stays with coding long enough and makes the practice deliberate — they will get to any level they aspire to.**\n> \n> By **deliberate practice**, I mean:\n> \n> * examining the bugs and problems in the code\n> * going back to certain problems and trying to solve them in a better way\n> * reading other people’s code to see how they solved these problems\n> * refactoring your old code\n> \n> To put it simply: [doing rework rather than trying new things and switching topics all the time](http://jamesclear.com/stay-on-the-bus) [ ] .\n\n","source":"_posts/IFE-2016-SP-task35.md","raw":"---\ntitle: IFE-2016-SP-task35 Square Following Directives III\ndate: 2017-01-20 12:15:42\ntags: [IFE]\n---\n\n## My Solution\n\nMy solution to task35 is available on jsfiddle: \n{% jsfiddle 0oesrpwL 'default' 'light' '100%' '500px' %}\n\n<!-- more -->\n\n### :bookmark: `&&` 和 `||` 的使用方法\n\n#### [Logical Operators @MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators)\n\n`&&` 会返回第一个假值（falsy value），`||` 会返回第一个真值（truthy value）。假值包括：\n\n1. `undefined`\n2. `null`\n3. `0`\n4. `NaN`\n5. `\"\"`\n\n```javascript\n/* 下面两个函数等价 */\nfunction shortCircuitEvaluation() {\n  doSomething() || doSomethingElse()\n}\n\nfunction equivalentEvaluation() {\n  var flag = doSomething();\n  if (!flag) {\n    doSomethingElse();\n  }\n}\n/* 一些例子 */\n\"\" && false      // returns \"\"\n\"\" || false      // returns false\nfalse || \"\"      // returns \"\"\n```\n\n#### [对 js 运算符 || 和 && 的总结](http://jianguang-qq.iteye.com/blog/462449?page=2)\n\n```javascript\n/* e.g.1 成长速度 */\n// 需求一（==） - basic:\nvar addLevel = (addStep==5 && 1) || (addStep==10 && 2) || (addStep==12 && 3) || (addStep==15 && 4) || 0;\n// 需求一（==） - with Object:\nvar addLevel={'5':1,'10':2,'12':3,'15':4}[addStep] || 0;      \n// 需求二（>）:\nvar addLevel = (addStep>12 && 4) || (addStep>10 && 3) || (addStep>5 && 2) || (addStep>0 && 1) || 0;\n\n/* e.g.2 jQuery 源码 */\nvar wrap = !tags.indexOf(\"<opt\") && ...;// means 'startWith'\n```\n\n使用注意点：\n\n* 优点：精简了代码，能减少网络流量\n* 缺点：降低了代码的可读性\n* 推荐做法：适当写些注释\n\n#### 我在自己的实现中的使用\n```javascript\n// 前情提要：directive will be \"go\",\"tunlef2\",...\n\nvar temp = directive.match(/\\d+/) && directive.match(/\\d+/)[0]; \n// e.g. null && ~ -> null | [\"1\"] && \"1\" -> \"1\"\n\nstep = parseInt(temp) || 0; \n// 当值为 null 时，得到 NaN 。NaN || 0 -> 0\n\n// 以及其他很多的 '... || 默认值'\n```\n\n### :ribbon: textarea 避开监听滚动事件来实现同步滚动行号\n\n#### 起因\n\n> 因为，做之前稍微看了眼各个团队得到的评价（评论），了解了[导师对这个任务实现的一些看法](http://ife.baidu.com/2016/review/detail?workId=8467)，其中第四条指出：“指令输入编辑器显示代码行逻辑实现上有点不优雅。 **一定要监听滚动才能实现左边指令行数一起滚动吗？** 包括每次输入变化都重新渲染所有的代码行数，代价有点大。”\n> \n> 于是，我花了很久来思考怎么才能避开我一开始预想的通过监听滚动来实现行号和内容的同步滚动。最终得到了这个实现。\n\n#### 思路\n\n在一个父级 `div` 中两个同级的 div 正常情况下能同步地上下滚动。\n\n所以我们需使 `textarea` 表现得和普通的 `div` 一样——具有和 `div` 一样的特性——能够根据所包含的文字内容的高度，自动地变化自己的高度。\n\n#### 实现\n\n##### textarea 高度自适应的问题 - 法一\n\n> **参考：**\n> [Autosizing textarea using Prototype @SO](http://stackoverflow.com/questions/7477/autosizing-textarea-using-prototype) 提问中 Jan Miksovsky 的回答，以及回答下面的评论提出的一些修改意见。\n\n可以查看 [`jsfiddle` 上的在线 demo]()。\n\n这个解决方法 **棒** 在更多地依赖 HTML 和 CSS，而不是 JS 。\n\n但是也存在 **缺点** ：在最后一行进行回车的时候，高度会有波动，而不是直接一步到位。\n\n**根本原因** 在于，回车的一瞬间 `textarea` 的高度还未发生变化。因为在本例中，`textarea` 的高度为 `height: 100%;` 是依赖于父元素的高度，而父元素的高度依赖于 `div#textCopy` 的高度。\n\n其具体过程是这样的：在最后一行进行回车的时候，`textarea` 的文字内容的最下方会增高一行，此时父元素高度不变，即 `textarea` 的高度不变，默认地 `textarea` 内容高度大于元素本身高度、第一行的内容将上移并被遮挡。而回车触发了 `keydown/keyup` 事件，回车被 JS 中定义的 `autoSize()` 转换成了 `<br/>` 并传给了 `div#textCopy` ，`div#textCopy` 的高度由此变高，父元素和 `textarea` 的高度也相应变高。第一行的内容也就由此能够最终避免被遮挡的命运了。\n\n##### textarea 高度自适应的问题 - 其它方法\n\n> 其它待读的相关资料：\n> [Creating a textarea with auto-resize](https://stackoverflow.com/questions/454202/creating-a-textarea-with-auto-resize)\n> \n> 可以适当参考其它成熟实现：\n> [babeljs.io](https://babeljs.io/repl/)\n\n#### 小结\n\n由于目前需要实现的并不是多么完备而成熟的文本编辑器（需求详见 [task35 任务说明](http://ife.baidu.com/2016/task/detail?taskId=35)），本次实现的文本编辑器还存在若干有待改进之处。\n\n[ ] **To Do**\n\n1. [ ] 默认命令代码在一行内——未考虑到，当输入一行很长的代码，且不换行的情况下，行号间应该存在空隔。\n2. [ ] 默认命令代码的数量是很有限的——未考虑到，当输入行数很多的情况下，数字很大的行号的样式问题。\n3. [ ] 默认用户通过键盘来键入命令行——未考虑除了键盘输入外的其他输入方式（鼠标右键复制等）。\n4. （有待补充。也强烈欢迎各位看官提出 bug ~）\n\n## Compared with others'\n\n### [任务得分第一的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=2417)\n\n#### 一些实现上的差异比较\n\n* `setTimeout` 还是 `setInterval`\n    - 我的指令逐行执行的实现：`for` 循环 + `setTimeout` + 闭包。\n    - 该团队的实现：`setInterval` + 其外部的计数器。\n        + 优点：\n            1. 省去了 `setTimeout` 第二个时间参数的计算。\n            2. 由于自带重复，省去了外层的 `for` 循环。\n            3. 因而也不需要闭包。\n            4. 在终止后续指令的时候，只需要 `clearInterval` 当前即可。而 `setTimeout` 需要 `clearTimeout` 后续所有。\n* 判断指令是否合法\n    - 我是通过对象的方法是否存在判断的。e.g. `!square[name]` 表示方法不存在时。\n    - 该团队 `for in` 所有方法名得到正确指令的正则 `consoleExp` 再用正则判断的。\n\n### [任务得分第二的团队的 solution](http://ife.baidu.com/2016/review/detail?workId=3569)\n\n~~P.S. 这位的代码我没细看，但是这位的头像和（aiti？）一样，和我企鹅群里认识的那人是同一个人么OAO？。。~~\n\n## 对 task36 的展望 ~~（恐慌）~~\n\n~~看了眼 task36 前三的团队实现的 demo 和得到的评价，我觉得我可能要犯拖延了。。第一名的团队支持图片上传。。前三的某支团队甚至搞了一个 AST 。。大神们，请收下在下的膝盖 Orz 。。。~~\n\n在看了[一篇文章](https://zhuanlan.zhihu.com/p/22213177)的“害怕开展新项目怎么办？”“不要完美主义”的部分内容之后，决定还是克服拖延开始这个系列任务的最后一个吧。加油！！\n\n并且在原作者[另一篇文章](https://medium.freecodecamp.com/learning-to-code-when-it-gets-dark-e485edfb58fd#.t2ecehmpn)中得到了肯定：\n\n> The thing I am sure about is — **if a person stays with coding long enough and makes the practice deliberate — they will get to any level they aspire to.**\n> \n> By **deliberate practice**, I mean:\n> \n> * examining the bugs and problems in the code\n> * going back to certain problems and trying to solve them in a better way\n> * reading other people’s code to see how they solved these problems\n> * refactoring your old code\n> \n> To put it simply: [doing rework rather than trying new things and switching topics all the time](http://jamesclear.com/stay-on-the-bus) [ ] .\n\n","slug":"IFE-2016-SP-task35","published":1,"updated":"2018-08-25T02:22:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbpl000v5xzx5b7jq5be","content":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task35 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"500px\" src=\"//jsfiddle.net/0oesrpwL/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>\n<a id=\"more\"></a>\n<h3 id=\"🔖-和-的使用方法\"><a class=\"header-anchor\" href=\"#🔖-和-的使用方法\">¶</a>🔖 <code>&amp;&amp;</code> 和 <code>||</code> 的使用方法</h3>\n<h4 id=\"logical-operators-mdn\"><a class=\"header-anchor\" href=\"#logical-operators-mdn\">¶</a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators\" target=\"_blank\" rel=\"noopener\">Logical Operators @MDN</a></h4>\n<p><code>&amp;&amp;</code> 会返回第一个假值（falsy value），<code>||</code> 会返回第一个真值（truthy value）。假值包括：</p>\n<ol>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>0</code></li>\n<li><code>NaN</code></li>\n<li><code>&quot;&quot;</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 下面两个函数等价 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shortCircuitEvaluation</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  doSomething() || doSomethingElse()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">equivalentEvaluation</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> flag = doSomething();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">    doSomethingElse();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 一些例子 */</span></span><br><span class=\"line\"><span class=\"string\">\"\"</span> &amp;&amp; <span class=\"literal\">false</span>      <span class=\"comment\">// returns \"\"</span></span><br><span class=\"line\"><span class=\"string\">\"\"</span> || <span class=\"literal\">false</span>      <span class=\"comment\">// returns false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> || <span class=\"string\">\"\"</span>      <span class=\"comment\">// returns \"\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"对-js-运算符-和-的总结\"><a class=\"header-anchor\" href=\"#对-js-运算符-和-的总结\">¶</a><a href=\"http://jianguang-qq.iteye.com/blog/462449?page=2\" target=\"_blank\" rel=\"noopener\">对 js 运算符 || 和 &amp;&amp; 的总结</a></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* e.g.1 成长速度 */</span></span><br><span class=\"line\"><span class=\"comment\">// 需求一（==） - basic:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addLevel = (addStep==<span class=\"number\">5</span> &amp;&amp; <span class=\"number\">1</span>) || (addStep==<span class=\"number\">10</span> &amp;&amp; <span class=\"number\">2</span>) || (addStep==<span class=\"number\">12</span> &amp;&amp; <span class=\"number\">3</span>) || (addStep==<span class=\"number\">15</span> &amp;&amp; <span class=\"number\">4</span>) || <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">// 需求一（==） - with Object:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addLevel=&#123;<span class=\"string\">'5'</span>:<span class=\"number\">1</span>,<span class=\"string\">'10'</span>:<span class=\"number\">2</span>,<span class=\"string\">'12'</span>:<span class=\"number\">3</span>,<span class=\"string\">'15'</span>:<span class=\"number\">4</span>&#125;[addStep] || <span class=\"number\">0</span>;      </span><br><span class=\"line\"><span class=\"comment\">// 需求二（&gt;）:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addLevel = (addStep&gt;<span class=\"number\">12</span> &amp;&amp; <span class=\"number\">4</span>) || (addStep&gt;<span class=\"number\">10</span> &amp;&amp; <span class=\"number\">3</span>) || (addStep&gt;<span class=\"number\">5</span> &amp;&amp; <span class=\"number\">2</span>) || (addStep&gt;<span class=\"number\">0</span> &amp;&amp; <span class=\"number\">1</span>) || <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* e.g.2 jQuery 源码 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> wrap = !tags.indexOf(<span class=\"string\">\"&lt;opt\"</span>) &amp;&amp; ...;<span class=\"comment\">// means 'startWith'</span></span><br></pre></td></tr></table></figure>\n<p>使用注意点：</p>\n<ul>\n<li>优点：精简了代码，能减少网络流量</li>\n<li>缺点：降低了代码的可读性</li>\n<li>推荐做法：适当写些注释</li>\n</ul>\n<h4 id=\"我在自己的实现中的使用\"><a class=\"header-anchor\" href=\"#我在自己的实现中的使用\">¶</a>我在自己的实现中的使用</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前情提要：directive will be \"go\",\"tunlef2\",...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = directive.match(<span class=\"regexp\">/\\d+/</span>) &amp;&amp; directive.match(<span class=\"regexp\">/\\d+/</span>)[<span class=\"number\">0</span>]; </span><br><span class=\"line\"><span class=\"comment\">// e.g. null &amp;&amp; ~ -&gt; null | [\"1\"] &amp;&amp; \"1\" -&gt; \"1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">step = <span class=\"built_in\">parseInt</span>(temp) || <span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"comment\">// 当值为 null 时，得到 NaN 。NaN || 0 -&gt; 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以及其他很多的 '... || 默认值'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"🎀-textarea-避开监听滚动事件来实现同步滚动行号\"><a class=\"header-anchor\" href=\"#🎀-textarea-避开监听滚动事件来实现同步滚动行号\">¶</a>🎀 textarea 避开监听滚动事件来实现同步滚动行号</h3>\n<h4 id=\"起因\"><a class=\"header-anchor\" href=\"#起因\">¶</a>起因</h4>\n<blockquote>\n<p>因为，做之前稍微看了眼各个团队得到的评价（评论），了解了<a href=\"http://ife.baidu.com/2016/review/detail?workId=8467\" target=\"_blank\" rel=\"noopener\">导师对这个任务实现的一些看法</a>，其中第四条指出：“指令输入编辑器显示代码行逻辑实现上有点不优雅。 <strong>一定要监听滚动才能实现左边指令行数一起滚动吗？</strong> 包括每次输入变化都重新渲染所有的代码行数，代价有点大。”</p>\n<p>于是，我花了很久来思考怎么才能避开我一开始预想的通过监听滚动来实现行号和内容的同步滚动。最终得到了这个实现。</p>\n</blockquote>\n<h4 id=\"思路\"><a class=\"header-anchor\" href=\"#思路\">¶</a>思路</h4>\n<p>在一个父级 <code>div</code> 中两个同级的 div 正常情况下能同步地上下滚动。</p>\n<p>所以我们需使 <code>textarea</code> 表现得和普通的 <code>div</code> 一样——具有和 <code>div</code> 一样的特性——能够根据所包含的文字内容的高度，自动地变化自己的高度。</p>\n<h4 id=\"实现\"><a class=\"header-anchor\" href=\"#实现\">¶</a>实现</h4>\n<h5 id=\"textarea-高度自适应的问题-法一\"><a class=\"header-anchor\" href=\"#textarea-高度自适应的问题-法一\">¶</a>textarea 高度自适应的问题 - 法一</h5>\n<blockquote>\n<p><strong>参考：</strong><br>\n<a href=\"http://stackoverflow.com/questions/7477/autosizing-textarea-using-prototype\" target=\"_blank\" rel=\"noopener\">Autosizing textarea using Prototype @SO</a> 提问中 Jan Miksovsky 的回答，以及回答下面的评论提出的一些修改意见。</p>\n</blockquote>\n<p>可以查看 <a href=\"\"><code>jsfiddle</code> 上的在线 demo</a>。</p>\n<p>这个解决方法 <strong>棒</strong> 在更多地依赖 HTML 和 CSS，而不是 JS 。</p>\n<p>但是也存在 <strong>缺点</strong> ：在最后一行进行回车的时候，高度会有波动，而不是直接一步到位。</p>\n<p><strong>根本原因</strong> 在于，回车的一瞬间 <code>textarea</code> 的高度还未发生变化。因为在本例中，<code>textarea</code> 的高度为 <code>height: 100%;</code> 是依赖于父元素的高度，而父元素的高度依赖于 <code>div#textCopy</code> 的高度。</p>\n<p>其具体过程是这样的：在最后一行进行回车的时候，<code>textarea</code> 的文字内容的最下方会增高一行，此时父元素高度不变，即 <code>textarea</code> 的高度不变，默认地 <code>textarea</code> 内容高度大于元素本身高度、第一行的内容将上移并被遮挡。而回车触发了 <code>keydown/keyup</code> 事件，回车被 JS 中定义的 <code>autoSize()</code> 转换成了 <code>&lt;br/&gt;</code> 并传给了 <code>div#textCopy</code> ，<code>div#textCopy</code> 的高度由此变高，父元素和 <code>textarea</code> 的高度也相应变高。第一行的内容也就由此能够最终避免被遮挡的命运了。</p>\n<h5 id=\"textarea-高度自适应的问题-其它方法\"><a class=\"header-anchor\" href=\"#textarea-高度自适应的问题-其它方法\">¶</a>textarea 高度自适应的问题 - 其它方法</h5>\n<blockquote>\n<p>其它待读的相关资料：<br>\n<a href=\"https://stackoverflow.com/questions/454202/creating-a-textarea-with-auto-resize\" target=\"_blank\" rel=\"noopener\">Creating a textarea with auto-resize</a></p>\n<p>可以适当参考其它成熟实现：<br>\n<a href=\"https://babeljs.io/repl/\" target=\"_blank\" rel=\"noopener\">babeljs.io</a></p>\n</blockquote>\n<h4 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\">¶</a>小结</h4>\n<p>由于目前需要实现的并不是多么完备而成熟的文本编辑器（需求详见 <a href=\"http://ife.baidu.com/2016/task/detail?taskId=35\" target=\"_blank\" rel=\"noopener\">task35 任务说明</a>），本次实现的文本编辑器还存在若干有待改进之处。</p>\n<p><input type=\"checkbox\" id=\"checkbox0\"><label for=\"checkbox0\"></label><strong>To Do</strong></p>\n<ol>\n<li><input type=\"checkbox\" id=\"checkbox1\"><label for=\"checkbox1\">默认命令代码在一行内——未考虑到，当输入一行很长的代码，且不换行的情况下，行号间应该存在空隔。</label></li>\n<li><input type=\"checkbox\" id=\"checkbox2\"><label for=\"checkbox2\">默认命令代码的数量是很有限的——未考虑到，当输入行数很多的情况下，数字很大的行号的样式问题。</label></li>\n<li><input type=\"checkbox\" id=\"checkbox3\"><label for=\"checkbox3\">默认用户通过键盘来键入命令行——未考虑除了键盘输入外的其他输入方式（鼠标右键复制等）。</label></li>\n<li>（有待补充。也强烈欢迎各位看官提出 bug ~）</li>\n</ol>\n<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<h3 id=\"任务得分第一的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第一的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=2417\" target=\"_blank\" rel=\"noopener\">任务得分第一的团队的 solution</a></h3>\n<h4 id=\"一些实现上的差异比较\"><a class=\"header-anchor\" href=\"#一些实现上的差异比较\">¶</a>一些实现上的差异比较</h4>\n<ul>\n<li><code>setTimeout</code> 还是 <code>setInterval</code>\n<ul>\n<li>我的指令逐行执行的实现：<code>for</code> 循环 + <code>setTimeout</code> + 闭包。</li>\n<li>该团队的实现：<code>setInterval</code> + 其外部的计数器。\n<ul>\n<li>优点：\n<ol>\n<li>省去了 <code>setTimeout</code> 第二个时间参数的计算。</li>\n<li>由于自带重复，省去了外层的 <code>for</code> 循环。</li>\n<li>因而也不需要闭包。</li>\n<li>在终止后续指令的时候，只需要 <code>clearInterval</code> 当前即可。而 <code>setTimeout</code> 需要 <code>clearTimeout</code> 后续所有。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>判断指令是否合法\n<ul>\n<li>我是通过对象的方法是否存在判断的。e.g. <code>!square[name]</code> 表示方法不存在时。</li>\n<li>该团队 <code>for in</code> 所有方法名得到正确指令的正则 <code>consoleExp</code> 再用正则判断的。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"任务得分第二的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第二的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=3569\" target=\"_blank\" rel=\"noopener\">任务得分第二的团队的 solution</a></h3>\n<p><s>P.S. 这位的代码我没细看，但是这位的头像和（aiti？）一样，和我企鹅群里认识的那人是同一个人么OAO？。。</s></p>\n<h2 id=\"对-task36-的展望-恐慌\"><a class=\"header-anchor\" href=\"#对-task36-的展望-恐慌\">¶</a>对 task36 的展望 <s>（恐慌）</s></h2>\n<p><s>看了眼 task36 前三的团队实现的 demo 和得到的评价，我觉得我可能要犯拖延了。。第一名的团队支持图片上传。。前三的某支团队甚至搞了一个 AST 。。大神们，请收下在下的膝盖 Orz 。。。</s></p>\n<p>在看了<a href=\"https://zhuanlan.zhihu.com/p/22213177\" target=\"_blank\" rel=\"noopener\">一篇文章</a>的“害怕开展新项目怎么办？”“不要完美主义”的部分内容之后，决定还是克服拖延开始这个系列任务的最后一个吧。加油！！</p>\n<p>并且在原作者<a href=\"https://medium.freecodecamp.com/learning-to-code-when-it-gets-dark-e485edfb58fd#.t2ecehmpn\" target=\"_blank\" rel=\"noopener\">另一篇文章</a>中得到了肯定：</p>\n<blockquote>\n<p>The thing I am sure about is — <strong>if a person stays with coding long enough and makes the practice deliberate — they will get to any level they aspire to.</strong></p>\n<p>By <strong>deliberate practice</strong>, I mean:</p>\n<ul>\n<li>examining the bugs and problems in the code</li>\n<li>going back to certain problems and trying to solve them in a better way</li>\n<li>reading other people’s code to see how they solved these problems</li>\n<li>refactoring your old code</li>\n</ul>\n<p>To put it simply: <a href=\"http://jamesclear.com/stay-on-the-bus\" target=\"_blank\" rel=\"noopener\">doing rework rather than trying new things and switching topics all the time</a><input type=\"checkbox\" id=\"checkbox4\"><label for=\"checkbox4\">.</label></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"my-solution\"><a class=\"header-anchor\" href=\"#my-solution\">¶</a>My Solution</h2>\n<p>My solution to task35 is available on jsfiddle:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"500px\" src=\"//jsfiddle.net/0oesrpwL/embedded/js,resources,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>","more":"<h3 id=\"🔖-和-的使用方法\"><a class=\"header-anchor\" href=\"#🔖-和-的使用方法\">¶</a>🔖 <code>&amp;&amp;</code> 和 <code>||</code> 的使用方法</h3>\n<h4 id=\"logical-operators-mdn\"><a class=\"header-anchor\" href=\"#logical-operators-mdn\">¶</a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators\" target=\"_blank\" rel=\"noopener\">Logical Operators @MDN</a></h4>\n<p><code>&amp;&amp;</code> 会返回第一个假值（falsy value），<code>||</code> 会返回第一个真值（truthy value）。假值包括：</p>\n<ol>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>0</code></li>\n<li><code>NaN</code></li>\n<li><code>&quot;&quot;</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 下面两个函数等价 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shortCircuitEvaluation</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  doSomething() || doSomethingElse()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">equivalentEvaluation</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> flag = doSomething();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">    doSomethingElse();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 一些例子 */</span></span><br><span class=\"line\"><span class=\"string\">\"\"</span> &amp;&amp; <span class=\"literal\">false</span>      <span class=\"comment\">// returns \"\"</span></span><br><span class=\"line\"><span class=\"string\">\"\"</span> || <span class=\"literal\">false</span>      <span class=\"comment\">// returns false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> || <span class=\"string\">\"\"</span>      <span class=\"comment\">// returns \"\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"对-js-运算符-和-的总结\"><a class=\"header-anchor\" href=\"#对-js-运算符-和-的总结\">¶</a><a href=\"http://jianguang-qq.iteye.com/blog/462449?page=2\" target=\"_blank\" rel=\"noopener\">对 js 运算符 || 和 &amp;&amp; 的总结</a></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* e.g.1 成长速度 */</span></span><br><span class=\"line\"><span class=\"comment\">// 需求一（==） - basic:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addLevel = (addStep==<span class=\"number\">5</span> &amp;&amp; <span class=\"number\">1</span>) || (addStep==<span class=\"number\">10</span> &amp;&amp; <span class=\"number\">2</span>) || (addStep==<span class=\"number\">12</span> &amp;&amp; <span class=\"number\">3</span>) || (addStep==<span class=\"number\">15</span> &amp;&amp; <span class=\"number\">4</span>) || <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">// 需求一（==） - with Object:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addLevel=&#123;<span class=\"string\">'5'</span>:<span class=\"number\">1</span>,<span class=\"string\">'10'</span>:<span class=\"number\">2</span>,<span class=\"string\">'12'</span>:<span class=\"number\">3</span>,<span class=\"string\">'15'</span>:<span class=\"number\">4</span>&#125;[addStep] || <span class=\"number\">0</span>;      </span><br><span class=\"line\"><span class=\"comment\">// 需求二（&gt;）:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addLevel = (addStep&gt;<span class=\"number\">12</span> &amp;&amp; <span class=\"number\">4</span>) || (addStep&gt;<span class=\"number\">10</span> &amp;&amp; <span class=\"number\">3</span>) || (addStep&gt;<span class=\"number\">5</span> &amp;&amp; <span class=\"number\">2</span>) || (addStep&gt;<span class=\"number\">0</span> &amp;&amp; <span class=\"number\">1</span>) || <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* e.g.2 jQuery 源码 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> wrap = !tags.indexOf(<span class=\"string\">\"&lt;opt\"</span>) &amp;&amp; ...;<span class=\"comment\">// means 'startWith'</span></span><br></pre></td></tr></table></figure>\n<p>使用注意点：</p>\n<ul>\n<li>优点：精简了代码，能减少网络流量</li>\n<li>缺点：降低了代码的可读性</li>\n<li>推荐做法：适当写些注释</li>\n</ul>\n<h4 id=\"我在自己的实现中的使用\"><a class=\"header-anchor\" href=\"#我在自己的实现中的使用\">¶</a>我在自己的实现中的使用</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前情提要：directive will be \"go\",\"tunlef2\",...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = directive.match(<span class=\"regexp\">/\\d+/</span>) &amp;&amp; directive.match(<span class=\"regexp\">/\\d+/</span>)[<span class=\"number\">0</span>]; </span><br><span class=\"line\"><span class=\"comment\">// e.g. null &amp;&amp; ~ -&gt; null | [\"1\"] &amp;&amp; \"1\" -&gt; \"1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">step = <span class=\"built_in\">parseInt</span>(temp) || <span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"comment\">// 当值为 null 时，得到 NaN 。NaN || 0 -&gt; 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以及其他很多的 '... || 默认值'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"🎀-textarea-避开监听滚动事件来实现同步滚动行号\"><a class=\"header-anchor\" href=\"#🎀-textarea-避开监听滚动事件来实现同步滚动行号\">¶</a>🎀 textarea 避开监听滚动事件来实现同步滚动行号</h3>\n<h4 id=\"起因\"><a class=\"header-anchor\" href=\"#起因\">¶</a>起因</h4>\n<blockquote>\n<p>因为，做之前稍微看了眼各个团队得到的评价（评论），了解了<a href=\"http://ife.baidu.com/2016/review/detail?workId=8467\" target=\"_blank\" rel=\"noopener\">导师对这个任务实现的一些看法</a>，其中第四条指出：“指令输入编辑器显示代码行逻辑实现上有点不优雅。 <strong>一定要监听滚动才能实现左边指令行数一起滚动吗？</strong> 包括每次输入变化都重新渲染所有的代码行数，代价有点大。”</p>\n<p>于是，我花了很久来思考怎么才能避开我一开始预想的通过监听滚动来实现行号和内容的同步滚动。最终得到了这个实现。</p>\n</blockquote>\n<h4 id=\"思路\"><a class=\"header-anchor\" href=\"#思路\">¶</a>思路</h4>\n<p>在一个父级 <code>div</code> 中两个同级的 div 正常情况下能同步地上下滚动。</p>\n<p>所以我们需使 <code>textarea</code> 表现得和普通的 <code>div</code> 一样——具有和 <code>div</code> 一样的特性——能够根据所包含的文字内容的高度，自动地变化自己的高度。</p>\n<h4 id=\"实现\"><a class=\"header-anchor\" href=\"#实现\">¶</a>实现</h4>\n<h5 id=\"textarea-高度自适应的问题-法一\"><a class=\"header-anchor\" href=\"#textarea-高度自适应的问题-法一\">¶</a>textarea 高度自适应的问题 - 法一</h5>\n<blockquote>\n<p><strong>参考：</strong><br>\n<a href=\"http://stackoverflow.com/questions/7477/autosizing-textarea-using-prototype\" target=\"_blank\" rel=\"noopener\">Autosizing textarea using Prototype @SO</a> 提问中 Jan Miksovsky 的回答，以及回答下面的评论提出的一些修改意见。</p>\n</blockquote>\n<p>可以查看 <a href=\"\"><code>jsfiddle</code> 上的在线 demo</a>。</p>\n<p>这个解决方法 <strong>棒</strong> 在更多地依赖 HTML 和 CSS，而不是 JS 。</p>\n<p>但是也存在 <strong>缺点</strong> ：在最后一行进行回车的时候，高度会有波动，而不是直接一步到位。</p>\n<p><strong>根本原因</strong> 在于，回车的一瞬间 <code>textarea</code> 的高度还未发生变化。因为在本例中，<code>textarea</code> 的高度为 <code>height: 100%;</code> 是依赖于父元素的高度，而父元素的高度依赖于 <code>div#textCopy</code> 的高度。</p>\n<p>其具体过程是这样的：在最后一行进行回车的时候，<code>textarea</code> 的文字内容的最下方会增高一行，此时父元素高度不变，即 <code>textarea</code> 的高度不变，默认地 <code>textarea</code> 内容高度大于元素本身高度、第一行的内容将上移并被遮挡。而回车触发了 <code>keydown/keyup</code> 事件，回车被 JS 中定义的 <code>autoSize()</code> 转换成了 <code>&lt;br/&gt;</code> 并传给了 <code>div#textCopy</code> ，<code>div#textCopy</code> 的高度由此变高，父元素和 <code>textarea</code> 的高度也相应变高。第一行的内容也就由此能够最终避免被遮挡的命运了。</p>\n<h5 id=\"textarea-高度自适应的问题-其它方法\"><a class=\"header-anchor\" href=\"#textarea-高度自适应的问题-其它方法\">¶</a>textarea 高度自适应的问题 - 其它方法</h5>\n<blockquote>\n<p>其它待读的相关资料：<br>\n<a href=\"https://stackoverflow.com/questions/454202/creating-a-textarea-with-auto-resize\" target=\"_blank\" rel=\"noopener\">Creating a textarea with auto-resize</a></p>\n<p>可以适当参考其它成熟实现：<br>\n<a href=\"https://babeljs.io/repl/\" target=\"_blank\" rel=\"noopener\">babeljs.io</a></p>\n</blockquote>\n<h4 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\">¶</a>小结</h4>\n<p>由于目前需要实现的并不是多么完备而成熟的文本编辑器（需求详见 <a href=\"http://ife.baidu.com/2016/task/detail?taskId=35\" target=\"_blank\" rel=\"noopener\">task35 任务说明</a>），本次实现的文本编辑器还存在若干有待改进之处。</p>\n<p><input type=\"checkbox\" id=\"checkbox0\"><label for=\"checkbox0\"></label><strong>To Do</strong></p>\n<ol>\n<li><input type=\"checkbox\" id=\"checkbox1\"><label for=\"checkbox1\">默认命令代码在一行内——未考虑到，当输入一行很长的代码，且不换行的情况下，行号间应该存在空隔。</label></li>\n<li><input type=\"checkbox\" id=\"checkbox2\"><label for=\"checkbox2\">默认命令代码的数量是很有限的——未考虑到，当输入行数很多的情况下，数字很大的行号的样式问题。</label></li>\n<li><input type=\"checkbox\" id=\"checkbox3\"><label for=\"checkbox3\">默认用户通过键盘来键入命令行——未考虑除了键盘输入外的其他输入方式（鼠标右键复制等）。</label></li>\n<li>（有待补充。也强烈欢迎各位看官提出 bug ~）</li>\n</ol>\n<h2 id=\"compared-with-others\"><a class=\"header-anchor\" href=\"#compared-with-others\">¶</a>Compared with others’</h2>\n<h3 id=\"任务得分第一的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第一的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=2417\" target=\"_blank\" rel=\"noopener\">任务得分第一的团队的 solution</a></h3>\n<h4 id=\"一些实现上的差异比较\"><a class=\"header-anchor\" href=\"#一些实现上的差异比较\">¶</a>一些实现上的差异比较</h4>\n<ul>\n<li><code>setTimeout</code> 还是 <code>setInterval</code>\n<ul>\n<li>我的指令逐行执行的实现：<code>for</code> 循环 + <code>setTimeout</code> + 闭包。</li>\n<li>该团队的实现：<code>setInterval</code> + 其外部的计数器。\n<ul>\n<li>优点：\n<ol>\n<li>省去了 <code>setTimeout</code> 第二个时间参数的计算。</li>\n<li>由于自带重复，省去了外层的 <code>for</code> 循环。</li>\n<li>因而也不需要闭包。</li>\n<li>在终止后续指令的时候，只需要 <code>clearInterval</code> 当前即可。而 <code>setTimeout</code> 需要 <code>clearTimeout</code> 后续所有。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>判断指令是否合法\n<ul>\n<li>我是通过对象的方法是否存在判断的。e.g. <code>!square[name]</code> 表示方法不存在时。</li>\n<li>该团队 <code>for in</code> 所有方法名得到正确指令的正则 <code>consoleExp</code> 再用正则判断的。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"任务得分第二的团队的-solution\"><a class=\"header-anchor\" href=\"#任务得分第二的团队的-solution\">¶</a><a href=\"http://ife.baidu.com/2016/review/detail?workId=3569\" target=\"_blank\" rel=\"noopener\">任务得分第二的团队的 solution</a></h3>\n<p><s>P.S. 这位的代码我没细看，但是这位的头像和（aiti？）一样，和我企鹅群里认识的那人是同一个人么OAO？。。</s></p>\n<h2 id=\"对-task36-的展望-恐慌\"><a class=\"header-anchor\" href=\"#对-task36-的展望-恐慌\">¶</a>对 task36 的展望 <s>（恐慌）</s></h2>\n<p><s>看了眼 task36 前三的团队实现的 demo 和得到的评价，我觉得我可能要犯拖延了。。第一名的团队支持图片上传。。前三的某支团队甚至搞了一个 AST 。。大神们，请收下在下的膝盖 Orz 。。。</s></p>\n<p>在看了<a href=\"https://zhuanlan.zhihu.com/p/22213177\" target=\"_blank\" rel=\"noopener\">一篇文章</a>的“害怕开展新项目怎么办？”“不要完美主义”的部分内容之后，决定还是克服拖延开始这个系列任务的最后一个吧。加油！！</p>\n<p>并且在原作者<a href=\"https://medium.freecodecamp.com/learning-to-code-when-it-gets-dark-e485edfb58fd#.t2ecehmpn\" target=\"_blank\" rel=\"noopener\">另一篇文章</a>中得到了肯定：</p>\n<blockquote>\n<p>The thing I am sure about is — <strong>if a person stays with coding long enough and makes the practice deliberate — they will get to any level they aspire to.</strong></p>\n<p>By <strong>deliberate practice</strong>, I mean:</p>\n<ul>\n<li>examining the bugs and problems in the code</li>\n<li>going back to certain problems and trying to solve them in a better way</li>\n<li>reading other people’s code to see how they solved these problems</li>\n<li>refactoring your old code</li>\n</ul>\n<p>To put it simply: <a href=\"http://jamesclear.com/stay-on-the-bus\" target=\"_blank\" rel=\"noopener\">doing rework rather than trying new things and switching topics all the time</a><input type=\"checkbox\" id=\"checkbox4\"><label for=\"checkbox4\">.</label></p>\n</blockquote>"},{"title":"LC-461-Hamming-Distance","date":"2017-11-14T14:45:50.000Z","_content":"\n> 肝不动业务代码的时候，就时不时地做个题吧～\n\n## 题目要求\n\n原题目：[461. Hamming Distance](https://leetcode.com/problems/hamming-distance/description/)\n\n> [维基百科](https://zh.wikipedia.org/wiki/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB)中的“汉明距离”：\n> \n> 在信息论中，两个等长字符串之间的汉明距离（英语：Hamming distance）是两个字符串对应位置的不同字符的个数。换句话说，它就是将一个字符串变换成另外一个字符串所需要替换的字符个数。\n\n题干：现在求两个整数 `x` 和 `y` 之间的汉明距离，其中，0 ≤ x, y < 2^31。\n\n<!-- more -->\n\n## 思路\n\n根据汉明距离的定义、再结合原题目中的“Explanation”部分，可以得知我们需要对整数 `x`,`y` 对应的二进制数逐位累加差异——统计得到的不相同的位的个数，即为所求。\n\n1. 思路一\n    * 我们要么先将整数转换成二进制——但是由于 JavaScript 只有一个 Number 类型用来表示数字，所以二进制数只能用别的方式代为表示——e.g. `4` 的二进制数可以表示为字符串 `(4).toString(2); // \"100\"`，或者数组 `[1,0,0]` *（数组好像没有直接的转换方法？）*。\n    * 再对字符串或者数组中的“二进制值”做求解／求和。\n2. 思路二\n    * 虽然 JavaScript 不能很好地支持二进制数的表示，但是 JS 中天然有**位操作符**——其中，**异或 `^`** 恰好能满足我们的需求！\n        - 如果 `x` 异或 `y` 得到 `z`（`z = x ^ y`），那么 `z` 对应的二进制表示中 1 的个数即为所求。\n    * 故再逐位求和即可：\n        - 首先我们来看看，一个变量和 1 做与操作（`&`）会有什么现象：\n            + `val & 1`，如果 `val` 的最右一位是 1 那么结果是 1 ；\n            + `val & 1`，如果 `val` 的最右一位是 0 那么结果是 0 。\n        - 此时我们至少能判断最右一位的 01 情况了。\n        - 那么再结合右移位操作 `>>` 来不断使高位逐个变成最右位，我们就能计算一个二进制数的所有位的 01 情况！\n\n其实按照上述思路来看，整体是分成两个步骤的：\n\n1. 得到差异\n2. 累加差异\n\n两个步骤均可以用一下两种方式二选一解决：\n\n* 位操作\n* 其他数据结构，比如字符串\n\n所以可以 `2 * 2 = 4` 组合出四种大致思路。而第一步的“得到差异”个人比较推荐的做法是用异或一步到位。（后续实现中的第一步均采取了异或。）\n\n> 更多的 JS 相关的位操作符请参考 [Bitwise operators @MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators)。\n\n## 代码实现\n\n### 实现一\n\n先异或再转字符串最后通过 `match` 方法（正则）计数的实现：\n\n```\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar hammingDistance = function(x, y) {\n    var xor = x ^ y;\n    var str = xor.toString(2);\n    var match = str.match(/1/g); // 用正则匹配计算个数；match 为 null 或者数组。\n    return match ? match.length : 0 ;\n};\n```\n\n提交详情：\n\n![实现一的提交详情](http://ohz4k75du.bkt.clouddn.com/markdown/1511079951921.png)\n\n### 实现二\n\n先异或再转字符串最后通过 `split` 方法计数的实现：\n\n```\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar hammingDistance = function(x, y) {\n    var xor = x ^ y;\n    var str = xor.toString(2);\n    return str.split('1').length - 1; // 通过 split 计算某个字符（串）出现的个数\n};\n```\n\n提交详情：\n\n![实现二的提交详情](http://ohz4k75du.bkt.clouddn.com/markdown/1511065222094.png)\n\n### 实现三\n\n完全的位操作实现：\n\n```javascript\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar hammingDistance = function(x, y) {\n    var xor = x ^ y;\n    var sum = 0;\n    \n    sum += xor & 1;\n    while(xor = xor >> 1){\n        sum += xor & 1;\n    }\n    \n    return sum;\n};\n```\n\n提交详情：\n\n![实现三的提交详情](http://ohz4k75du.bkt.clouddn.com/markdown/1511065249571.png)\n\n## 结果分析\n\n其实第一个提交详情的图里的 runtime 和 distribution 不太可信，因为我第一次截实现一的详情图的时候，结果是“Your runtime beats 94.43 % of javascript submissions.”，后来我重新 submit 再打开之后，就变成“99.80 %”了……然后为了满足自己的虚荣心，贴了第二次的图（不要打我）。\n\n## 其他解法\n\n```\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar hammingDistance = function(x, y) {\n    let n = x ^ y;\n    let count = 0;\n    while (n) {\n      n = n & (n - 1)\n      count++;\n    }\n    return count;    \n};\n```\n\n第一眼看到这个排名极靠前、完全位操作实现的解法的时候，虽然看不懂，但是可以看出这个 accepted 的解法中的 while 在最少的循环次内就得到了结果。\n\n因为在我的完全位操作的实现（实现三）中，当最高位是 1 的那一位在越高位的时候，while 就会循环越多次，如果最高位的 1 在第 M 位（M >= 0），那么循环条件将执行 M+1 次，循环体将执行 M 次，即很多是 0 的位也被列入总和—— 0 虽然并不会对总和产生影响，但是多执行的代码会增加时间上的开销。\n\n而上面这个解法中能够只执行 `count` 次就结束循环，堪称完美！那么，现在我们来看看最为关键的代码 `n = n & (n - 1)` 有什么奥秘。\n\n二进制数减一是一个奇妙的操作——当一个二进制数减一的时候，低位的 0 会变成 1，直到遇到一个最低位的 1 被减成 0。假设这个数 n 中最低位的 1 位于第 m 位（m >= 0），最高位的 1 位于第 M 位，最高位为第 N 位。那么此时，0~m 位各位上的数字都做了取反操作（包含一个 m 位的 1 和 0 ~ m-1 位的所有 0），而 m+1 ~ N 位各位上的数字都保持不变，即数 n 与上 (n - 1) 会导致 0~m 位均变成 0 ，这个过程中影响到了最低位（m 位上的一个 1）。即，**做一次 `n = n & (n - 1)` 的操作会使得二进制数少一个最低位上的 1**。\n\n特别的，二进制数中只有一个 1 的时候，`n & (n - 1) // == 0`。由此 `n > 0 && (n & (n - 1))` 也常用于判断整数 n 是不是 2 的指数：\n\n```\nfunction isPowerOfTwo(n){\n    // better judge if n is an int at first..\n    if(n <= 0) return false;\n    return !(n&(n-1));\n}\n```\n\n> 关于 JS 中整数的判断，ES5 及以前请看 [How to check if a variable is an integer in JavaScript? @SO](https://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript#answer-14636725)，ES6 及以后可以用 [Number.isInteger()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger)。\n\n## 相关补充\n\n> 刚好最近在看《Effective JavaScript》这本书，书中第二条——“理解 JavaScript 的浮点数”，有一些相关知识。\n\n### JS 中的数字\n\nJavaScript 中的数字（number）都是 64 位双精度浮点数，即 double。JS 中的整数仅仅是其一个子集，整数的范围在 [-2^53, 2^53]。\n\n#### [Safe Integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger)\n\nSafe integer 是符合如下描述的整数：\n\n* 能被精确地表示为一个 IEEE-754 双精度浮点数\n* 这个表示不能是其他整数的舍入结果\n\n所以，2^53 虽然能被 IEEE-754 双精度浮点数精确表示，但是由于 2^53 + 1 在向零舍入和就近舍入中会被舍入为 2^53 ，所以不符合 safe integer 的要求，用 `Number.isSafeInteger` 判断会得到 false ：\n\n![Math.isSafeInteger](http://ohz4k75du.bkt.clouddn.com/markdown/1511078247555.png)\n\n### JS 中的位运算\n\n位运算符的工作原理：\n\n```\n标准的 JS 浮点数 =隐式转换=> 32 位的有符号整数 =做位运算后返回=> 标准的 JS 浮点数\n```\n\n说到 32 位有符号整数，比较容易想到 C 语言中的 `int` 类型。那么也就稍微可以理解下题目中给出的 `x` 和 `y` 的范围 `[0,2^31)` （ 32 位有符号整数的非负整数范围）了。\n\n## 小结\n\n这虽然是 leetcode 上最简单的一道题目，但是我还是有所收获，特别是对 **二进制数中 1 的个数的求解方法**。","source":"_posts/LC-461-Hamming-Distance.md","raw":"---\ntitle: LC-461-Hamming-Distance\ndate: 2017-11-14 22:45:50\ntags: [algorithm]\n---\n\n> 肝不动业务代码的时候，就时不时地做个题吧～\n\n## 题目要求\n\n原题目：[461. Hamming Distance](https://leetcode.com/problems/hamming-distance/description/)\n\n> [维基百科](https://zh.wikipedia.org/wiki/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB)中的“汉明距离”：\n> \n> 在信息论中，两个等长字符串之间的汉明距离（英语：Hamming distance）是两个字符串对应位置的不同字符的个数。换句话说，它就是将一个字符串变换成另外一个字符串所需要替换的字符个数。\n\n题干：现在求两个整数 `x` 和 `y` 之间的汉明距离，其中，0 ≤ x, y < 2^31。\n\n<!-- more -->\n\n## 思路\n\n根据汉明距离的定义、再结合原题目中的“Explanation”部分，可以得知我们需要对整数 `x`,`y` 对应的二进制数逐位累加差异——统计得到的不相同的位的个数，即为所求。\n\n1. 思路一\n    * 我们要么先将整数转换成二进制——但是由于 JavaScript 只有一个 Number 类型用来表示数字，所以二进制数只能用别的方式代为表示——e.g. `4` 的二进制数可以表示为字符串 `(4).toString(2); // \"100\"`，或者数组 `[1,0,0]` *（数组好像没有直接的转换方法？）*。\n    * 再对字符串或者数组中的“二进制值”做求解／求和。\n2. 思路二\n    * 虽然 JavaScript 不能很好地支持二进制数的表示，但是 JS 中天然有**位操作符**——其中，**异或 `^`** 恰好能满足我们的需求！\n        - 如果 `x` 异或 `y` 得到 `z`（`z = x ^ y`），那么 `z` 对应的二进制表示中 1 的个数即为所求。\n    * 故再逐位求和即可：\n        - 首先我们来看看，一个变量和 1 做与操作（`&`）会有什么现象：\n            + `val & 1`，如果 `val` 的最右一位是 1 那么结果是 1 ；\n            + `val & 1`，如果 `val` 的最右一位是 0 那么结果是 0 。\n        - 此时我们至少能判断最右一位的 01 情况了。\n        - 那么再结合右移位操作 `>>` 来不断使高位逐个变成最右位，我们就能计算一个二进制数的所有位的 01 情况！\n\n其实按照上述思路来看，整体是分成两个步骤的：\n\n1. 得到差异\n2. 累加差异\n\n两个步骤均可以用一下两种方式二选一解决：\n\n* 位操作\n* 其他数据结构，比如字符串\n\n所以可以 `2 * 2 = 4` 组合出四种大致思路。而第一步的“得到差异”个人比较推荐的做法是用异或一步到位。（后续实现中的第一步均采取了异或。）\n\n> 更多的 JS 相关的位操作符请参考 [Bitwise operators @MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators)。\n\n## 代码实现\n\n### 实现一\n\n先异或再转字符串最后通过 `match` 方法（正则）计数的实现：\n\n```\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar hammingDistance = function(x, y) {\n    var xor = x ^ y;\n    var str = xor.toString(2);\n    var match = str.match(/1/g); // 用正则匹配计算个数；match 为 null 或者数组。\n    return match ? match.length : 0 ;\n};\n```\n\n提交详情：\n\n![实现一的提交详情](http://ohz4k75du.bkt.clouddn.com/markdown/1511079951921.png)\n\n### 实现二\n\n先异或再转字符串最后通过 `split` 方法计数的实现：\n\n```\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar hammingDistance = function(x, y) {\n    var xor = x ^ y;\n    var str = xor.toString(2);\n    return str.split('1').length - 1; // 通过 split 计算某个字符（串）出现的个数\n};\n```\n\n提交详情：\n\n![实现二的提交详情](http://ohz4k75du.bkt.clouddn.com/markdown/1511065222094.png)\n\n### 实现三\n\n完全的位操作实现：\n\n```javascript\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar hammingDistance = function(x, y) {\n    var xor = x ^ y;\n    var sum = 0;\n    \n    sum += xor & 1;\n    while(xor = xor >> 1){\n        sum += xor & 1;\n    }\n    \n    return sum;\n};\n```\n\n提交详情：\n\n![实现三的提交详情](http://ohz4k75du.bkt.clouddn.com/markdown/1511065249571.png)\n\n## 结果分析\n\n其实第一个提交详情的图里的 runtime 和 distribution 不太可信，因为我第一次截实现一的详情图的时候，结果是“Your runtime beats 94.43 % of javascript submissions.”，后来我重新 submit 再打开之后，就变成“99.80 %”了……然后为了满足自己的虚荣心，贴了第二次的图（不要打我）。\n\n## 其他解法\n\n```\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar hammingDistance = function(x, y) {\n    let n = x ^ y;\n    let count = 0;\n    while (n) {\n      n = n & (n - 1)\n      count++;\n    }\n    return count;    \n};\n```\n\n第一眼看到这个排名极靠前、完全位操作实现的解法的时候，虽然看不懂，但是可以看出这个 accepted 的解法中的 while 在最少的循环次内就得到了结果。\n\n因为在我的完全位操作的实现（实现三）中，当最高位是 1 的那一位在越高位的时候，while 就会循环越多次，如果最高位的 1 在第 M 位（M >= 0），那么循环条件将执行 M+1 次，循环体将执行 M 次，即很多是 0 的位也被列入总和—— 0 虽然并不会对总和产生影响，但是多执行的代码会增加时间上的开销。\n\n而上面这个解法中能够只执行 `count` 次就结束循环，堪称完美！那么，现在我们来看看最为关键的代码 `n = n & (n - 1)` 有什么奥秘。\n\n二进制数减一是一个奇妙的操作——当一个二进制数减一的时候，低位的 0 会变成 1，直到遇到一个最低位的 1 被减成 0。假设这个数 n 中最低位的 1 位于第 m 位（m >= 0），最高位的 1 位于第 M 位，最高位为第 N 位。那么此时，0~m 位各位上的数字都做了取反操作（包含一个 m 位的 1 和 0 ~ m-1 位的所有 0），而 m+1 ~ N 位各位上的数字都保持不变，即数 n 与上 (n - 1) 会导致 0~m 位均变成 0 ，这个过程中影响到了最低位（m 位上的一个 1）。即，**做一次 `n = n & (n - 1)` 的操作会使得二进制数少一个最低位上的 1**。\n\n特别的，二进制数中只有一个 1 的时候，`n & (n - 1) // == 0`。由此 `n > 0 && (n & (n - 1))` 也常用于判断整数 n 是不是 2 的指数：\n\n```\nfunction isPowerOfTwo(n){\n    // better judge if n is an int at first..\n    if(n <= 0) return false;\n    return !(n&(n-1));\n}\n```\n\n> 关于 JS 中整数的判断，ES5 及以前请看 [How to check if a variable is an integer in JavaScript? @SO](https://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript#answer-14636725)，ES6 及以后可以用 [Number.isInteger()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger)。\n\n## 相关补充\n\n> 刚好最近在看《Effective JavaScript》这本书，书中第二条——“理解 JavaScript 的浮点数”，有一些相关知识。\n\n### JS 中的数字\n\nJavaScript 中的数字（number）都是 64 位双精度浮点数，即 double。JS 中的整数仅仅是其一个子集，整数的范围在 [-2^53, 2^53]。\n\n#### [Safe Integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger)\n\nSafe integer 是符合如下描述的整数：\n\n* 能被精确地表示为一个 IEEE-754 双精度浮点数\n* 这个表示不能是其他整数的舍入结果\n\n所以，2^53 虽然能被 IEEE-754 双精度浮点数精确表示，但是由于 2^53 + 1 在向零舍入和就近舍入中会被舍入为 2^53 ，所以不符合 safe integer 的要求，用 `Number.isSafeInteger` 判断会得到 false ：\n\n![Math.isSafeInteger](http://ohz4k75du.bkt.clouddn.com/markdown/1511078247555.png)\n\n### JS 中的位运算\n\n位运算符的工作原理：\n\n```\n标准的 JS 浮点数 =隐式转换=> 32 位的有符号整数 =做位运算后返回=> 标准的 JS 浮点数\n```\n\n说到 32 位有符号整数，比较容易想到 C 语言中的 `int` 类型。那么也就稍微可以理解下题目中给出的 `x` 和 `y` 的范围 `[0,2^31)` （ 32 位有符号整数的非负整数范围）了。\n\n## 小结\n\n这虽然是 leetcode 上最简单的一道题目，但是我还是有所收获，特别是对 **二进制数中 1 的个数的求解方法**。","slug":"LC-461-Hamming-Distance","published":1,"updated":"2018-08-25T02:22:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbpn000x5xzx1mxnxwjx","content":"<blockquote>\n<p>肝不动业务代码的时候，就时不时地做个题吧～</p>\n</blockquote>\n<h2 id=\"题目要求\"><a class=\"header-anchor\" href=\"#题目要求\">¶</a>题目要求</h2>\n<p>原题目：<a href=\"https://leetcode.com/problems/hamming-distance/description/\" target=\"_blank\" rel=\"noopener\">461. Hamming Distance</a></p>\n<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB\" target=\"_blank\" rel=\"noopener\">维基百科</a>中的“汉明距离”：</p>\n<p>在信息论中，两个等长字符串之间的汉明距离（英语：Hamming distance）是两个字符串对应位置的不同字符的个数。换句话说，它就是将一个字符串变换成另外一个字符串所需要替换的字符个数。</p>\n</blockquote>\n<p>题干：现在求两个整数 <code>x</code> 和 <code>y</code> 之间的汉明距离，其中，0 ≤ x, y &lt; 2^31。</p>\n<a id=\"more\"></a>\n<h2 id=\"思路\"><a class=\"header-anchor\" href=\"#思路\">¶</a>思路</h2>\n<p>根据汉明距离的定义、再结合原题目中的“Explanation”部分，可以得知我们需要对整数 <code>x</code>,<code>y</code> 对应的二进制数逐位累加差异——统计得到的不相同的位的个数，即为所求。</p>\n<ol>\n<li>思路一\n<ul>\n<li>我们要么先将整数转换成二进制——但是由于 JavaScript 只有一个 Number 类型用来表示数字，所以二进制数只能用别的方式代为表示——e.g. <code>4</code> 的二进制数可以表示为字符串 <code>(4).toString(2); // &quot;100&quot;</code>，或者数组 <code>[1,0,0]</code> <em>（数组好像没有直接的转换方法？）</em>。</li>\n<li>再对字符串或者数组中的“二进制值”做求解／求和。</li>\n</ul>\n</li>\n<li>思路二\n<ul>\n<li>虽然 JavaScript 不能很好地支持二进制数的表示，但是 JS 中天然有<strong>位操作符</strong>——其中，<strong>异或 <code>^</code></strong> 恰好能满足我们的需求！\n<ul>\n<li>如果 <code>x</code> 异或 <code>y</code> 得到 <code>z</code>（<code>z = x ^ y</code>），那么 <code>z</code> 对应的二进制表示中 1 的个数即为所求。</li>\n</ul>\n</li>\n<li>故再逐位求和即可：\n<ul>\n<li>首先我们来看看，一个变量和 1 做与操作（<code>&amp;</code>）会有什么现象：\n<ul>\n<li><code>val &amp; 1</code>，如果 <code>val</code> 的最右一位是 1 那么结果是 1 ；</li>\n<li><code>val &amp; 1</code>，如果 <code>val</code> 的最右一位是 0 那么结果是 0 。</li>\n</ul>\n</li>\n<li>此时我们至少能判断最右一位的 01 情况了。</li>\n<li>那么再结合右移位操作 <code>&gt;&gt;</code> 来不断使高位逐个变成最右位，我们就能计算一个二进制数的所有位的 01 情况！</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>其实按照上述思路来看，整体是分成两个步骤的：</p>\n<ol>\n<li>得到差异</li>\n<li>累加差异</li>\n</ol>\n<p>两个步骤均可以用一下两种方式二选一解决：</p>\n<ul>\n<li>位操作</li>\n<li>其他数据结构，比如字符串</li>\n</ul>\n<p>所以可以 <code>2 * 2 = 4</code> 组合出四种大致思路。而第一步的“得到差异”个人比较推荐的做法是用异或一步到位。（后续实现中的第一步均采取了异或。）</p>\n<blockquote>\n<p>更多的 JS 相关的位操作符请参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\" target=\"_blank\" rel=\"noopener\">Bitwise operators @MDN</a>。</p>\n</blockquote>\n<h2 id=\"代码实现\"><a class=\"header-anchor\" href=\"#代码实现\">¶</a>代码实现</h2>\n<h3 id=\"实现一\"><a class=\"header-anchor\" href=\"#实现一\">¶</a>实现一</h3>\n<p>先异或再转字符串最后通过 <code>match</code> 方法（正则）计数的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number&#125; x</span><br><span class=\"line\"> * @param &#123;number&#125; y</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var hammingDistance = function(x, y) &#123;</span><br><span class=\"line\">    var xor = x ^ y;</span><br><span class=\"line\">    var str = xor.toString(2);</span><br><span class=\"line\">    var match = str.match(/1/g); // 用正则匹配计算个数；match 为 null 或者数组。</span><br><span class=\"line\">    return match ? match.length : 0 ;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>提交详情：</p>\n<p><img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1511079951921.png\" alt=\"实现一的提交详情\"></p>\n<h3 id=\"实现二\"><a class=\"header-anchor\" href=\"#实现二\">¶</a>实现二</h3>\n<p>先异或再转字符串最后通过 <code>split</code> 方法计数的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number&#125; x</span><br><span class=\"line\"> * @param &#123;number&#125; y</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var hammingDistance = function(x, y) &#123;</span><br><span class=\"line\">    var xor = x ^ y;</span><br><span class=\"line\">    var str = xor.toString(2);</span><br><span class=\"line\">    return str.split(&apos;1&apos;).length - 1; // 通过 split 计算某个字符（串）出现的个数</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>提交详情：</p>\n<p><img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1511065222094.png\" alt=\"实现二的提交详情\"></p>\n<h3 id=\"实现三\"><a class=\"header-anchor\" href=\"#实现三\">¶</a>实现三</h3>\n<p>完全的位操作实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; y</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingDistance = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xor = x ^ y;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    sum += xor &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(xor = xor &gt;&gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        sum += xor &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>提交详情：</p>\n<p><img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1511065249571.png\" alt=\"实现三的提交详情\"></p>\n<h2 id=\"结果分析\"><a class=\"header-anchor\" href=\"#结果分析\">¶</a>结果分析</h2>\n<p>其实第一个提交详情的图里的 runtime 和 distribution 不太可信，因为我第一次截实现一的详情图的时候，结果是“Your runtime beats 94.43 % of javascript submissions.”，后来我重新 submit 再打开之后，就变成“99.80 %”了……然后为了满足自己的虚荣心，贴了第二次的图（不要打我）。</p>\n<h2 id=\"其他解法\"><a class=\"header-anchor\" href=\"#其他解法\">¶</a>其他解法</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number&#125; x</span><br><span class=\"line\"> * @param &#123;number&#125; y</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var hammingDistance = function(x, y) &#123;</span><br><span class=\"line\">    let n = x ^ y;</span><br><span class=\"line\">    let count = 0;</span><br><span class=\"line\">    while (n) &#123;</span><br><span class=\"line\">      n = n &amp; (n - 1)</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return count;    </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>第一眼看到这个排名极靠前、完全位操作实现的解法的时候，虽然看不懂，但是可以看出这个 accepted 的解法中的 while 在最少的循环次内就得到了结果。</p>\n<p>因为在我的完全位操作的实现（实现三）中，当最高位是 1 的那一位在越高位的时候，while 就会循环越多次，如果最高位的 1 在第 M 位（M &gt;= 0），那么循环条件将执行 M+1 次，循环体将执行 M 次，即很多是 0 的位也被列入总和—— 0 虽然并不会对总和产生影响，但是多执行的代码会增加时间上的开销。</p>\n<p>而上面这个解法中能够只执行 <code>count</code> 次就结束循环，堪称完美！那么，现在我们来看看最为关键的代码 <code>n = n &amp; (n - 1)</code> 有什么奥秘。</p>\n<p>二进制数减一是一个奇妙的操作——当一个二进制数减一的时候，低位的 0 会变成 1，直到遇到一个最低位的 1 被减成 0。假设这个数 n 中最低位的 1 位于第 m 位（m &gt;= 0），最高位的 1 位于第 M 位，最高位为第 N 位。那么此时，0~m 位各位上的数字都做了取反操作（包含一个 m 位的 1 和 0 ~ m-1 位的所有 0），而 m+1 ~ N 位各位上的数字都保持不变，即数 n 与上 (n - 1) 会导致 0~m 位均变成 0 ，这个过程中影响到了最低位（m 位上的一个 1）。即，<strong>做一次 <code>n = n &amp; (n - 1)</code> 的操作会使得二进制数少一个最低位上的 1</strong>。</p>\n<p>特别的，二进制数中只有一个 1 的时候，<code>n &amp; (n - 1) // == 0</code>。由此 <code>n &gt; 0 &amp;&amp; (n &amp; (n - 1))</code> 也常用于判断整数 n 是不是 2 的指数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isPowerOfTwo(n)&#123;</span><br><span class=\"line\">    // better judge if n is an int at first..</span><br><span class=\"line\">    if(n &lt;= 0) return false;</span><br><span class=\"line\">    return !(n&amp;(n-1));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关于 JS 中整数的判断，ES5 及以前请看 <a href=\"https://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript#answer-14636725\" target=\"_blank\" rel=\"noopener\">How to check if a variable is an integer in JavaScript? @SO</a>，ES6 及以后可以用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\" target=\"_blank\" rel=\"noopener\">Number.isInteger()</a>。</p>\n</blockquote>\n<h2 id=\"相关补充\"><a class=\"header-anchor\" href=\"#相关补充\">¶</a>相关补充</h2>\n<blockquote>\n<p>刚好最近在看《Effective JavaScript》这本书，书中第二条——“理解 JavaScript 的浮点数”，有一些相关知识。</p>\n</blockquote>\n<h3 id=\"js-中的数字\"><a class=\"header-anchor\" href=\"#js-中的数字\">¶</a>JS 中的数字</h3>\n<p>JavaScript 中的数字（number）都是 64 位双精度浮点数，即 double。JS 中的整数仅仅是其一个子集，整数的范围在 [-2^53, 2^53]。</p>\n<h4 id=\"safe-integer\"><a class=\"header-anchor\" href=\"#safe-integer\">¶</a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger\" target=\"_blank\" rel=\"noopener\">Safe Integer</a></h4>\n<p>Safe integer 是符合如下描述的整数：</p>\n<ul>\n<li>能被精确地表示为一个 IEEE-754 双精度浮点数</li>\n<li>这个表示不能是其他整数的舍入结果</li>\n</ul>\n<p>所以，2^53 虽然能被 IEEE-754 双精度浮点数精确表示，但是由于 2^53 + 1 在向零舍入和就近舍入中会被舍入为 2^53 ，所以不符合 safe integer 的要求，用 <code>Number.isSafeInteger</code> 判断会得到 false ：</p>\n<p><img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1511078247555.png\" alt=\"Math.isSafeInteger\"></p>\n<h3 id=\"js-中的位运算\"><a class=\"header-anchor\" href=\"#js-中的位运算\">¶</a>JS 中的位运算</h3>\n<p>位运算符的工作原理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">标准的 JS 浮点数 =隐式转换=&gt; 32 位的有符号整数 =做位运算后返回=&gt; 标准的 JS 浮点数</span><br></pre></td></tr></table></figure>\n<p>说到 32 位有符号整数，比较容易想到 C 语言中的 <code>int</code> 类型。那么也就稍微可以理解下题目中给出的 <code>x</code> 和 <code>y</code> 的范围 <code>[0,2^31)</code> （ 32 位有符号整数的非负整数范围）了。</p>\n<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\">¶</a>小结</h2>\n<p>这虽然是 leetcode 上最简单的一道题目，但是我还是有所收获，特别是对 <strong>二进制数中 1 的个数的求解方法</strong>。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>肝不动业务代码的时候，就时不时地做个题吧～</p>\n</blockquote>\n<h2 id=\"题目要求\"><a class=\"header-anchor\" href=\"#题目要求\">¶</a>题目要求</h2>\n<p>原题目：<a href=\"https://leetcode.com/problems/hamming-distance/description/\" target=\"_blank\" rel=\"noopener\">461. Hamming Distance</a></p>\n<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB\" target=\"_blank\" rel=\"noopener\">维基百科</a>中的“汉明距离”：</p>\n<p>在信息论中，两个等长字符串之间的汉明距离（英语：Hamming distance）是两个字符串对应位置的不同字符的个数。换句话说，它就是将一个字符串变换成另外一个字符串所需要替换的字符个数。</p>\n</blockquote>\n<p>题干：现在求两个整数 <code>x</code> 和 <code>y</code> 之间的汉明距离，其中，0 ≤ x, y &lt; 2^31。</p>","more":"<h2 id=\"思路\"><a class=\"header-anchor\" href=\"#思路\">¶</a>思路</h2>\n<p>根据汉明距离的定义、再结合原题目中的“Explanation”部分，可以得知我们需要对整数 <code>x</code>,<code>y</code> 对应的二进制数逐位累加差异——统计得到的不相同的位的个数，即为所求。</p>\n<ol>\n<li>思路一\n<ul>\n<li>我们要么先将整数转换成二进制——但是由于 JavaScript 只有一个 Number 类型用来表示数字，所以二进制数只能用别的方式代为表示——e.g. <code>4</code> 的二进制数可以表示为字符串 <code>(4).toString(2); // &quot;100&quot;</code>，或者数组 <code>[1,0,0]</code> <em>（数组好像没有直接的转换方法？）</em>。</li>\n<li>再对字符串或者数组中的“二进制值”做求解／求和。</li>\n</ul>\n</li>\n<li>思路二\n<ul>\n<li>虽然 JavaScript 不能很好地支持二进制数的表示，但是 JS 中天然有<strong>位操作符</strong>——其中，<strong>异或 <code>^</code></strong> 恰好能满足我们的需求！\n<ul>\n<li>如果 <code>x</code> 异或 <code>y</code> 得到 <code>z</code>（<code>z = x ^ y</code>），那么 <code>z</code> 对应的二进制表示中 1 的个数即为所求。</li>\n</ul>\n</li>\n<li>故再逐位求和即可：\n<ul>\n<li>首先我们来看看，一个变量和 1 做与操作（<code>&amp;</code>）会有什么现象：\n<ul>\n<li><code>val &amp; 1</code>，如果 <code>val</code> 的最右一位是 1 那么结果是 1 ；</li>\n<li><code>val &amp; 1</code>，如果 <code>val</code> 的最右一位是 0 那么结果是 0 。</li>\n</ul>\n</li>\n<li>此时我们至少能判断最右一位的 01 情况了。</li>\n<li>那么再结合右移位操作 <code>&gt;&gt;</code> 来不断使高位逐个变成最右位，我们就能计算一个二进制数的所有位的 01 情况！</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>其实按照上述思路来看，整体是分成两个步骤的：</p>\n<ol>\n<li>得到差异</li>\n<li>累加差异</li>\n</ol>\n<p>两个步骤均可以用一下两种方式二选一解决：</p>\n<ul>\n<li>位操作</li>\n<li>其他数据结构，比如字符串</li>\n</ul>\n<p>所以可以 <code>2 * 2 = 4</code> 组合出四种大致思路。而第一步的“得到差异”个人比较推荐的做法是用异或一步到位。（后续实现中的第一步均采取了异或。）</p>\n<blockquote>\n<p>更多的 JS 相关的位操作符请参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\" target=\"_blank\" rel=\"noopener\">Bitwise operators @MDN</a>。</p>\n</blockquote>\n<h2 id=\"代码实现\"><a class=\"header-anchor\" href=\"#代码实现\">¶</a>代码实现</h2>\n<h3 id=\"实现一\"><a class=\"header-anchor\" href=\"#实现一\">¶</a>实现一</h3>\n<p>先异或再转字符串最后通过 <code>match</code> 方法（正则）计数的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number&#125; x</span><br><span class=\"line\"> * @param &#123;number&#125; y</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var hammingDistance = function(x, y) &#123;</span><br><span class=\"line\">    var xor = x ^ y;</span><br><span class=\"line\">    var str = xor.toString(2);</span><br><span class=\"line\">    var match = str.match(/1/g); // 用正则匹配计算个数；match 为 null 或者数组。</span><br><span class=\"line\">    return match ? match.length : 0 ;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>提交详情：</p>\n<p><img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1511079951921.png\" alt=\"实现一的提交详情\"></p>\n<h3 id=\"实现二\"><a class=\"header-anchor\" href=\"#实现二\">¶</a>实现二</h3>\n<p>先异或再转字符串最后通过 <code>split</code> 方法计数的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number&#125; x</span><br><span class=\"line\"> * @param &#123;number&#125; y</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var hammingDistance = function(x, y) &#123;</span><br><span class=\"line\">    var xor = x ^ y;</span><br><span class=\"line\">    var str = xor.toString(2);</span><br><span class=\"line\">    return str.split(&apos;1&apos;).length - 1; // 通过 split 计算某个字符（串）出现的个数</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>提交详情：</p>\n<p><img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1511065222094.png\" alt=\"实现二的提交详情\"></p>\n<h3 id=\"实现三\"><a class=\"header-anchor\" href=\"#实现三\">¶</a>实现三</h3>\n<p>完全的位操作实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; y</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hammingDistance = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xor = x ^ y;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    sum += xor &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(xor = xor &gt;&gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        sum += xor &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>提交详情：</p>\n<p><img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1511065249571.png\" alt=\"实现三的提交详情\"></p>\n<h2 id=\"结果分析\"><a class=\"header-anchor\" href=\"#结果分析\">¶</a>结果分析</h2>\n<p>其实第一个提交详情的图里的 runtime 和 distribution 不太可信，因为我第一次截实现一的详情图的时候，结果是“Your runtime beats 94.43 % of javascript submissions.”，后来我重新 submit 再打开之后，就变成“99.80 %”了……然后为了满足自己的虚荣心，贴了第二次的图（不要打我）。</p>\n<h2 id=\"其他解法\"><a class=\"header-anchor\" href=\"#其他解法\">¶</a>其他解法</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number&#125; x</span><br><span class=\"line\"> * @param &#123;number&#125; y</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var hammingDistance = function(x, y) &#123;</span><br><span class=\"line\">    let n = x ^ y;</span><br><span class=\"line\">    let count = 0;</span><br><span class=\"line\">    while (n) &#123;</span><br><span class=\"line\">      n = n &amp; (n - 1)</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return count;    </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>第一眼看到这个排名极靠前、完全位操作实现的解法的时候，虽然看不懂，但是可以看出这个 accepted 的解法中的 while 在最少的循环次内就得到了结果。</p>\n<p>因为在我的完全位操作的实现（实现三）中，当最高位是 1 的那一位在越高位的时候，while 就会循环越多次，如果最高位的 1 在第 M 位（M &gt;= 0），那么循环条件将执行 M+1 次，循环体将执行 M 次，即很多是 0 的位也被列入总和—— 0 虽然并不会对总和产生影响，但是多执行的代码会增加时间上的开销。</p>\n<p>而上面这个解法中能够只执行 <code>count</code> 次就结束循环，堪称完美！那么，现在我们来看看最为关键的代码 <code>n = n &amp; (n - 1)</code> 有什么奥秘。</p>\n<p>二进制数减一是一个奇妙的操作——当一个二进制数减一的时候，低位的 0 会变成 1，直到遇到一个最低位的 1 被减成 0。假设这个数 n 中最低位的 1 位于第 m 位（m &gt;= 0），最高位的 1 位于第 M 位，最高位为第 N 位。那么此时，0~m 位各位上的数字都做了取反操作（包含一个 m 位的 1 和 0 ~ m-1 位的所有 0），而 m+1 ~ N 位各位上的数字都保持不变，即数 n 与上 (n - 1) 会导致 0~m 位均变成 0 ，这个过程中影响到了最低位（m 位上的一个 1）。即，<strong>做一次 <code>n = n &amp; (n - 1)</code> 的操作会使得二进制数少一个最低位上的 1</strong>。</p>\n<p>特别的，二进制数中只有一个 1 的时候，<code>n &amp; (n - 1) // == 0</code>。由此 <code>n &gt; 0 &amp;&amp; (n &amp; (n - 1))</code> 也常用于判断整数 n 是不是 2 的指数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isPowerOfTwo(n)&#123;</span><br><span class=\"line\">    // better judge if n is an int at first..</span><br><span class=\"line\">    if(n &lt;= 0) return false;</span><br><span class=\"line\">    return !(n&amp;(n-1));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关于 JS 中整数的判断，ES5 及以前请看 <a href=\"https://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript#answer-14636725\" target=\"_blank\" rel=\"noopener\">How to check if a variable is an integer in JavaScript? @SO</a>，ES6 及以后可以用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\" target=\"_blank\" rel=\"noopener\">Number.isInteger()</a>。</p>\n</blockquote>\n<h2 id=\"相关补充\"><a class=\"header-anchor\" href=\"#相关补充\">¶</a>相关补充</h2>\n<blockquote>\n<p>刚好最近在看《Effective JavaScript》这本书，书中第二条——“理解 JavaScript 的浮点数”，有一些相关知识。</p>\n</blockquote>\n<h3 id=\"js-中的数字\"><a class=\"header-anchor\" href=\"#js-中的数字\">¶</a>JS 中的数字</h3>\n<p>JavaScript 中的数字（number）都是 64 位双精度浮点数，即 double。JS 中的整数仅仅是其一个子集，整数的范围在 [-2^53, 2^53]。</p>\n<h4 id=\"safe-integer\"><a class=\"header-anchor\" href=\"#safe-integer\">¶</a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger\" target=\"_blank\" rel=\"noopener\">Safe Integer</a></h4>\n<p>Safe integer 是符合如下描述的整数：</p>\n<ul>\n<li>能被精确地表示为一个 IEEE-754 双精度浮点数</li>\n<li>这个表示不能是其他整数的舍入结果</li>\n</ul>\n<p>所以，2^53 虽然能被 IEEE-754 双精度浮点数精确表示，但是由于 2^53 + 1 在向零舍入和就近舍入中会被舍入为 2^53 ，所以不符合 safe integer 的要求，用 <code>Number.isSafeInteger</code> 判断会得到 false ：</p>\n<p><img src=\"http://ohz4k75du.bkt.clouddn.com/markdown/1511078247555.png\" alt=\"Math.isSafeInteger\"></p>\n<h3 id=\"js-中的位运算\"><a class=\"header-anchor\" href=\"#js-中的位运算\">¶</a>JS 中的位运算</h3>\n<p>位运算符的工作原理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">标准的 JS 浮点数 =隐式转换=&gt; 32 位的有符号整数 =做位运算后返回=&gt; 标准的 JS 浮点数</span><br></pre></td></tr></table></figure>\n<p>说到 32 位有符号整数，比较容易想到 C 语言中的 <code>int</code> 类型。那么也就稍微可以理解下题目中给出的 <code>x</code> 和 <code>y</code> 的范围 <code>[0,2^31)</code> （ 32 位有符号整数的非负整数范围）了。</p>\n<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\">¶</a>小结</h2>\n<p>这虽然是 leetcode 上最简单的一道题目，但是我还是有所收获，特别是对 <strong>二进制数中 1 的个数的求解方法</strong>。</p>"},{"title":"Three Column Layouts Cheat Sheet","date":"2017-04-21T14:24:46.000Z","_content":"\n整理了下常见三栏布局的做法。\n\n## 布局索引\n\n1. [流式布局](https://baishusama.github.io/stockyard/three-column-layout.html#1-流体布局)\n2. [BFC 布局](https://baishusama.github.io/stockyard/three-column-layout.html#2-BFC布局)\n3. [绝对定位布局](https://baishusama.github.io/stockyard/three-column-layout.html#3-绝对定位布局)\n4. [圣杯布局](https://baishusama.github.io/stockyard/three-column-layout.html#4-圣杯布局)\n5. [双飞翼布局](https://baishusama.github.io/stockyard/three-column-layout.html#5-双飞翼布局)\n6. [Flex 布局](https://baishusama.github.io/stockyard/three-column-layout.html#6-flex布局)\n\n<!-- more -->\n\n> P.S. 各个布局的原理在本篇没有解释，对于圣杯布局和双飞翼布局感兴趣的童鞋可以看看参考中的后两篇文章。\n\n## 优缺点\n\n前两种布局的缺点是主要内容无法优先加载。当页面加载慢时会影响用户体验。\n\n后四种布局调整了 HTML 代码顺序，克服了上述缺点。\n\n与圣杯布局相比，双飞翼布局以更复杂的 HTML （主要内容外再包裹一层）为代价简化了 CSS 样式（左侧边栏少用一个相对定位）。\n\n## 参考\n\n* [详解 CSS 七种三栏布局技巧 @知乎](https://zhuanlan.zhihu.com/p/25070186?refer=learncoding)\n* [圣杯布局](http://chen106106.iteye.com/blog/1631865)\n* [双飞翼布局介绍-始于淘宝UED](http://www.imooc.com/wenda/detail/254035)","source":"_posts/Three-Column-Layouts.md","raw":"---\ntitle: Three Column Layouts Cheat Sheet\ndate: 2017-04-21 22:24:46\ntags: [CSS]\n---\n\n整理了下常见三栏布局的做法。\n\n## 布局索引\n\n1. [流式布局](https://baishusama.github.io/stockyard/three-column-layout.html#1-流体布局)\n2. [BFC 布局](https://baishusama.github.io/stockyard/three-column-layout.html#2-BFC布局)\n3. [绝对定位布局](https://baishusama.github.io/stockyard/three-column-layout.html#3-绝对定位布局)\n4. [圣杯布局](https://baishusama.github.io/stockyard/three-column-layout.html#4-圣杯布局)\n5. [双飞翼布局](https://baishusama.github.io/stockyard/three-column-layout.html#5-双飞翼布局)\n6. [Flex 布局](https://baishusama.github.io/stockyard/three-column-layout.html#6-flex布局)\n\n<!-- more -->\n\n> P.S. 各个布局的原理在本篇没有解释，对于圣杯布局和双飞翼布局感兴趣的童鞋可以看看参考中的后两篇文章。\n\n## 优缺点\n\n前两种布局的缺点是主要内容无法优先加载。当页面加载慢时会影响用户体验。\n\n后四种布局调整了 HTML 代码顺序，克服了上述缺点。\n\n与圣杯布局相比，双飞翼布局以更复杂的 HTML （主要内容外再包裹一层）为代价简化了 CSS 样式（左侧边栏少用一个相对定位）。\n\n## 参考\n\n* [详解 CSS 七种三栏布局技巧 @知乎](https://zhuanlan.zhihu.com/p/25070186?refer=learncoding)\n* [圣杯布局](http://chen106106.iteye.com/blog/1631865)\n* [双飞翼布局介绍-始于淘宝UED](http://www.imooc.com/wenda/detail/254035)","slug":"Three-Column-Layouts","published":1,"updated":"2018-08-25T02:55:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbpo00105xzx1cuqgcas","content":"<p>整理了下常见三栏布局的做法。</p>\n<h2 id=\"布局索引\"><a class=\"header-anchor\" href=\"#布局索引\">¶</a>布局索引</h2>\n<ol>\n<li><a href=\"https://baishusama.github.io/stockyard/three-column-layout.html#1-%E6%B5%81%E4%BD%93%E5%B8%83%E5%B1%80\">流式布局</a></li>\n<li><a href=\"https://baishusama.github.io/stockyard/three-column-layout.html#2-BFC%E5%B8%83%E5%B1%80\">BFC 布局</a></li>\n<li><a href=\"https://baishusama.github.io/stockyard/three-column-layout.html#3-%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%B8%83%E5%B1%80\">绝对定位布局</a></li>\n<li><a href=\"https://baishusama.github.io/stockyard/three-column-layout.html#4-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80\">圣杯布局</a></li>\n<li><a href=\"https://baishusama.github.io/stockyard/three-column-layout.html#5-%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80\">双飞翼布局</a></li>\n<li><a href=\"https://baishusama.github.io/stockyard/three-column-layout.html#6-flex%E5%B8%83%E5%B1%80\">Flex 布局</a></li>\n</ol>\n<a id=\"more\"></a>\n<blockquote>\n<p>P.S. 各个布局的原理在本篇没有解释，对于圣杯布局和双飞翼布局感兴趣的童鞋可以看看参考中的后两篇文章。</p>\n</blockquote>\n<h2 id=\"优缺点\"><a class=\"header-anchor\" href=\"#优缺点\">¶</a>优缺点</h2>\n<p>前两种布局的缺点是主要内容无法优先加载。当页面加载慢时会影响用户体验。</p>\n<p>后四种布局调整了 HTML 代码顺序，克服了上述缺点。</p>\n<p>与圣杯布局相比，双飞翼布局以更复杂的 HTML （主要内容外再包裹一层）为代价简化了 CSS 样式（左侧边栏少用一个相对定位）。</p>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h2>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25070186?refer=learncoding\" target=\"_blank\" rel=\"noopener\">详解 CSS 七种三栏布局技巧 @知乎</a></li>\n<li><a href=\"http://chen106106.iteye.com/blog/1631865\" target=\"_blank\" rel=\"noopener\">圣杯布局</a></li>\n<li><a href=\"http://www.imooc.com/wenda/detail/254035\" target=\"_blank\" rel=\"noopener\">双飞翼布局介绍-始于淘宝UED</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>整理了下常见三栏布局的做法。</p>\n<h2 id=\"布局索引\"><a class=\"header-anchor\" href=\"#布局索引\">¶</a>布局索引</h2>\n<ol>\n<li><a href=\"https://baishusama.github.io/stockyard/three-column-layout.html#1-%E6%B5%81%E4%BD%93%E5%B8%83%E5%B1%80\">流式布局</a></li>\n<li><a href=\"https://baishusama.github.io/stockyard/three-column-layout.html#2-BFC%E5%B8%83%E5%B1%80\">BFC 布局</a></li>\n<li><a href=\"https://baishusama.github.io/stockyard/three-column-layout.html#3-%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%B8%83%E5%B1%80\">绝对定位布局</a></li>\n<li><a href=\"https://baishusama.github.io/stockyard/three-column-layout.html#4-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80\">圣杯布局</a></li>\n<li><a href=\"https://baishusama.github.io/stockyard/three-column-layout.html#5-%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80\">双飞翼布局</a></li>\n<li><a href=\"https://baishusama.github.io/stockyard/three-column-layout.html#6-flex%E5%B8%83%E5%B1%80\">Flex 布局</a></li>\n</ol>","more":"<blockquote>\n<p>P.S. 各个布局的原理在本篇没有解释，对于圣杯布局和双飞翼布局感兴趣的童鞋可以看看参考中的后两篇文章。</p>\n</blockquote>\n<h2 id=\"优缺点\"><a class=\"header-anchor\" href=\"#优缺点\">¶</a>优缺点</h2>\n<p>前两种布局的缺点是主要内容无法优先加载。当页面加载慢时会影响用户体验。</p>\n<p>后四种布局调整了 HTML 代码顺序，克服了上述缺点。</p>\n<p>与圣杯布局相比，双飞翼布局以更复杂的 HTML （主要内容外再包裹一层）为代价简化了 CSS 样式（左侧边栏少用一个相对定位）。</p>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h2>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25070186?refer=learncoding\" target=\"_blank\" rel=\"noopener\">详解 CSS 七种三栏布局技巧 @知乎</a></li>\n<li><a href=\"http://chen106106.iteye.com/blog/1631865\" target=\"_blank\" rel=\"noopener\">圣杯布局</a></li>\n<li><a href=\"http://www.imooc.com/wenda/detail/254035\" target=\"_blank\" rel=\"noopener\">双飞翼布局介绍-始于淘宝UED</a></li>\n</ul>"},{"title":"[NG] 考古 - HttpInterceptor 循环引用错误","date":"2018-08-25T01:13:48.000Z","_content":"\n## 前言\n\n恍然间发现这个错误已经不复存在了，于是稍微看了下相关 issue、commit、PR。写篇笔记祭奠下～\n\n## 需求描述\n\n一个使用 `HttpInterceptor` 的常见场景是实现基于 token 的验证机制。\n\n为什么要使用拦截（intercepting）呢？\n\n因为，在基于 token 的验证机制中，证明用户身份的 token 需要被附带在每一个（需要验证的请求的）请求头。如果不使用拦截手段，那么（由 `HttpClient` 实例触发的）每一个请求都需要手动修改请求头（header）。显然手动修改是繁琐和难以维护的。所以，我们选择做拦截。\n\n[Angular 官网](https://angular.io/guide/http#set-default-headers)也给出了范例，以下代码可以实现一个 `AuthInterceptor` 拦截器：\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private auth: AuthService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const authToken = this.auth.getAuthorizationToken();\n\n    const authReq = req.clone({\n      headers: req.headers.set('Authorization', authToken)\n    });\n\n    return next.handle(authReq);\n  }\n}\n```\n\n## 问题描述\n\n但在 [5.2.3](https://github.com/angular/angular/blob/master/CHANGELOG.md#523-2018-01-31) 之前，执行上述官方给出的代码是会报错的。原因是 **存在循环引用问题**！\n\n<!-- more -->\n\n### 依赖关系1\n\n我们看一下上述代码：`AuthInterceptor` 由于需要使用 `AuthService` 服务提供的获取 token 的方法，依赖注入了 `AuthService`：\n\n```\nAuthInterceptor -> AuthService  // AuthInterceptor 拦截器需要 AuthService 服务来获取 token\n```\n\n### 依赖关系2\n\n而一般情况下我们的 `AuthService` 需要做登录登出等操作，特别是需要和后端交互以获取 token，所以需要依赖注入 `HttpClient`，存在依赖关系：\n\n```\nAuthService -> HttpClient // AuthService 服务需要 HttpClient 服务来和后端交互\n```\n\n### 依赖关系3\n\n从下述源码可以看出，`HttpClient` 服务依赖注入了 `HttpHandler`：\n\n```typescript\n// v5.2.x\nexport class HttpClient {\n  constructor(private handler: HttpHandler) {}\n\n  request(...): Observable<any> {\n    let req: HttpRequest<any>;\n    ...\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$: Observable<HttpEvent<any>> =\n        concatMap.call(of (req), (req: HttpRequest<any>) => this.handler.handle(req));\n    ...\n}\n```\n\n而 `HttpHandler` 的依赖中包含可选的 `new Inject(HTTP_INTERCEPTORS)`：\n\n```typescript\n// v5.2.2\n@NgModule({\n  imports: [...],\n  providers: [\n    HttpClient,\n    // HttpHandler is the backend + interceptors and is constructed\n    // using the interceptingHandler factory function.\n    {\n      provide: HttpHandler,\n      useFactory: interceptingHandler,\n      deps: [HttpBackend, [new Optional(), new Inject(HTTP_INTERCEPTORS)]],\n    },\n    HttpXhrBackend,\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    ...\n  ],\n})\nexport class HttpClientModule {\n}\n```\n\n其中，`HTTP_INTERCEPTORS` 是一个 `InjectionToken` 实例，用于标识所有拦截器服务。`new Inject(HTTP_INTERCEPTORS)` 可以获取拦截器服务的实例们。\n\n> 这里的“token”是 Angular 的 DI 系统中用于标识以来对象的东西。token 可以是字符串或者 `Type`/`InjectionToken`/`OpaqueToken` 类的实例。\n>\n> P.S. 关于使用哪一种 token 更好的问题，可以【TODO:】看一下[这篇文章](https://blog.thoughtram.io/angular/2016/05/23/opaque-tokens-in-angular-2.html)（[译文](https://segmentfault.com/a/1190000008626348)）。\n\n也就是说，`HttpClient` 依赖于所有 `HttpInterceptor`s，包括 `AuthInterceptor`：\n\n```\nHttpClient -> AuthInterceptor // HttpClient 服务需要 AuthInterceptor 在内的所有拦截器服务来处理请求\n```\n\n### 循环依赖\n\n综上，我们有循环依赖：\n\n```\nAuthInterceptor -> AuthService -> HttpClient -> AuthInterceptor -> ...\n```\n\n而在 Angular 里，每一个服务实例的初始化所需要的依赖都是需要事先准备好的，但一个循环依赖是永远也准备不好的……Angular 因此会检测循环依赖的存在，并在循环依赖被检测到时报错，部分源码如下：\n\n```typescript\n// v5.2.x\nexport class NgModuleProviderAnalyzer {\n  private _transformedProviders = new Map<any, ProviderAst>();\n  private _seenProviders = new Map<any, boolean>();\n  private _allProviders: Map<any, ProviderAst>;\n  private _errors: ProviderError[] = [];\n\n  ...\n\n  private _getOrCreateLocalProvider(token: CompileTokenMetadata, eager: boolean): ProviderAst|null {\n    const resolvedProvider = this._allProviders.get(tokenReference(token));\n    if (!resolvedProvider) {\n      return null;\n    }\n    let transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n    if (transformedProviderAst) {\n      return transformedProviderAst;\n    }\n    if (this._seenProviders.get(tokenReference(token)) != null) {\n      this._errors.push(\n        new ProviderError(`Cannot instantiate cyclic dependency! ${tokenName(token)}`, resolvedProvider.sourceSpan));\n      return null;\n    }\n    this._seenProviders.set(tokenReference(token), true);\n    ...\n  }\n}\n```\n\n让我们稍微看一下代码：\n\n- `NgModuleProviderAnalyzer` 内部通过 `Map` 类型的 `_seenProviders` 来记录看到过的供应商。\n- 在其方法 `_getOrCreateLocalProvider` 内部判断是否已经看过，如果已经看过会在 `_errors` 中记录一个 `ProviderError` 错误。\n\n我用 5.2.2 版本的 Angular 编写了[一个遵循官方文档写法但出现“循环引用错误”的示例项目](https://github.com/baishusama/fe-grocery-store/tree/master/ng-5.2.2-cyclic-dep-err-with-interceptor)。下面是我 `ng serve` \b运行该应用后，在 `compiler.js` 中添加断点调试得到的结果：\n\n- 图一、截图时 `_seenProviders` 中已经记录的各个供应商：\n![_seenProviders](https://user-images.githubusercontent.com/9972503/44579887-87e58b00-a7ca-11e8-9c32-ca2dfbc18f69.png)\n- 图二、截图时 `token` 变量的值：\n![token](https://user-images.githubusercontent.com/9972503/44579937-b6fbfc80-a7ca-11e8-9581-52a373fb24e4.png)\n\n在上述截图中，根据图二的 `token` 变量是能在 `_seenProviders` 中获取到非 `null` 值的，所以会向 `_errors` 中记录一个 `Cannot instantiate cyclic dependency!` 开头的错误。当执行完所有代码之后，控制台会出现该错误：\n\n![interceptor 循环引用报错](https://user-images.githubusercontent.com/9972503/44575832-8ebad080-a7bf-11e8-9578-81a064e4de39.png)\n\n## 用户的修复\n\n\b那么在 5.2.2 及以前，作为 Angular 开发者，要如何解决\b上述问题呢？\n\n我们可以通过注入 `Injector` 手动懒加载 `AuthService` 而不是直接注入其到 `constructor`，来使依赖关系变为如下：\n\n```\nAuthInterceptor --x-> AuthService -> HttpClient -> AuthInterceptor --x->\n即 AuthService -> HttpClient -> AuthInterceptor，其中，在 AuthInterceptor 中懒加载 AuthService\n```\n\n即将官方的示例代码修改为如下：\n\n```typescript\nimport { Injectable, Injector } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  private auth: AuthService;\n\n  constructor(private injector: Injector) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    this.auth = this.injector.get(AuthService);\n\n    const authToken = this.auth.getAuthorizationToken();\n\n    const authReq = req.clone({\n      headers: req.headers.set('Authorization', authToken)\n    });\n\n    return next.handle(authReq);\n  }\n}\n```\n\n可以看到和官方的代码相比，我们改为\b依赖注入 `Injector`，并通过其实例对象 `this.injector` 在调用 `intercept` 方法时才去获取 `auth` 服务实例，而不是将 `auth` 作为依赖注入、在\b调用构造函数的时候去获取。\n\n由此我们绕开了编译阶段的\b对循环依赖做的检查。\n\n## 官方的修复\n\n就像 [PR](https://github.com/angular/angular/pull/19809) 里提到的这样：\n\n> Either HttpClient or the user has to deal specially with the circular dependency.\n\n所以，为了造福大众，最终官方做出了修改，原理和作为用户的我们的代码的思路是一致的——**利用懒加载解决循环依赖问题！**\n\n因为[修复的代码量](https://github.com/angular/angular/commit/ed2b717)很少，所以这里整个摘录下。\n\n首先，新增\b `HttpInterceptingHandler` 类（代码一）：\n\n```typescript\n// v5.2.3\n/**\n * An `HttpHandler` that applies a bunch of `HttpInterceptor`s\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n */\n@Injectable()\nexport class HttpInterceptingHandler implements HttpHandler {\n  private chain: HttpHandler|null = null;\n\n  constructor(private backend: HttpBackend, private injector: Injector) {}\n\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n      this.chain = interceptors.reduceRight(\n          (next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n    }\n    return this.chain.handle(req);\n  }\n}\n```\n\n`HttpHandler` 依赖的创建方式由原来的使用 `useFactory: interceptingHandler` 函数（代码二）：\n\n```typescript\n// v5.2.2\n@NgModule({\n  imports: [...],\n  providers: [\n    HttpClient,\n    // HttpHandler is the backend + interceptors and is constructed\n    // using the interceptingHandler factory function.\n    {\n      provide: HttpHandler,\n      useFactory: interceptingHandler,\n      deps: [HttpBackend, [new Optional(), new Inject(HTTP_INTERCEPTORS)]],\n    },\n    HttpXhrBackend,\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    ...\n  ],\n})\nexport class HttpClientModule {\n}\n```\n\n改为使用 `useClass: HttpInterceptingHandler` 类（代码三）：\n\n```typescript\n// v5.2.3\n@NgModule({\n  imports: [...],\n  providers: [\n    HttpClient,\n    {provide: HttpHandler, useClass: HttpInterceptingHandler},\n    HttpXhrBackend,\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    ...\n  ],\n})\nexport class HttpClientModule {\n}\n```\n\n不难发现，在“代码一”中我们看到了熟悉的写法：依赖注入 `Injector`，并通过其实例对象 `this.injector` 在调用 `handle` 方法时才去获取 `HTTP_INTERCEPTORS` 拦截器依赖，而不是将 `interceptors` 作为依赖注入（在\b调用构造函数的时候去\b获取）。\n\n也就是官方修复的思路如下：\n\n```\nAuthInterceptor -> AuthService -> HttpClient -x-> AuthInterceptor\n即 AuthInterceptor -> AuthService -> HttpClient，其中，在 HttpClient 中懒加载 interceptors\n```\n\n因为 `AuthInterceptor` 对 `AuthService` 的引用和 `AuthService` 对 `HttpClient` 的引用是用户定义的，所以官方可以控制的只剩下 `HttpClient` 到拦截器的依赖引用了。所以，官方选择从 `HttpClient` 处切断依赖。\n\n> 那么，我们为什么选择从 `AuthInterceptor` 处而不是\b从 `AuthService` 处切断依赖呢？\n>\n> 我觉得\b原因有二：\n>\n> 1. 一个是为了让 `AuthService` 尽可能保持透明——对 interceptor 引起的问题没有察觉。**因为本质上这是 interceptors 不能\b依赖注入 `HttpClient` 的问题。**\n> 2. 另一个是 `AuthService` 往往有很多能触发 `HttpClient` 使用的方法，那么\b在什么时候去通过 `injector` 来 get `HttpClient` 服务实例呢？或者说所有方法都加上相关判断么？……所以为了避免问题的复杂化，选择选项更少（只有一个 `intercept` 方法）的 `AuthInterceptor` 显然更为明智。\n\n## 后记\n\n还是太年轻，以前翻 github 的时候没有及时订阅 issue，导致一些问题修复了都毫无察觉……\n\n从今天起，好好订阅 issue，好好\b整理笔记，共勉～\n\n> P.S. 好久没写文章了，这篇文章简直在划水……所以我肯定很多地方没讲清楚（\b特别\b是代码都没有细讲），\b各位看官哪里没看明白的请\b务必指出，我会根据需要慢慢补充。望轻拍砖（逃\n\n## 参考\n\n- [Angular CHANGELOG.md](https://github.com/angular/angular/blob/master/CHANGELOG.md)\n- [fix(common): allow HttpInterceptors to inject HttpClient](https://github.com/angular/angular/commit/ed2b717)\n- [Insider’s guide into interceptors and HttpClient mechanics in Angular](https://blog.angularindepth.com/insiders-guide-into-interceptors-and-httpclient-mechanics-in-angular-103fbdb397bf)：这篇写得相当得好，深入了拦截器和 `HttpClient` 的\b内部机制，推荐\b阅读！","source":"_posts/angular-cyclic-dependency-error-with-interceptor.md","raw":"---\ntitle: '[NG] 考古 - HttpInterceptor 循环引用错误'\ndate: 2018-08-25 09:13:48\ntags: [Angular]\n---\n\n## 前言\n\n恍然间发现这个错误已经不复存在了，于是稍微看了下相关 issue、commit、PR。写篇笔记祭奠下～\n\n## 需求描述\n\n一个使用 `HttpInterceptor` 的常见场景是实现基于 token 的验证机制。\n\n为什么要使用拦截（intercepting）呢？\n\n因为，在基于 token 的验证机制中，证明用户身份的 token 需要被附带在每一个（需要验证的请求的）请求头。如果不使用拦截手段，那么（由 `HttpClient` 实例触发的）每一个请求都需要手动修改请求头（header）。显然手动修改是繁琐和难以维护的。所以，我们选择做拦截。\n\n[Angular 官网](https://angular.io/guide/http#set-default-headers)也给出了范例，以下代码可以实现一个 `AuthInterceptor` 拦截器：\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private auth: AuthService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const authToken = this.auth.getAuthorizationToken();\n\n    const authReq = req.clone({\n      headers: req.headers.set('Authorization', authToken)\n    });\n\n    return next.handle(authReq);\n  }\n}\n```\n\n## 问题描述\n\n但在 [5.2.3](https://github.com/angular/angular/blob/master/CHANGELOG.md#523-2018-01-31) 之前，执行上述官方给出的代码是会报错的。原因是 **存在循环引用问题**！\n\n<!-- more -->\n\n### 依赖关系1\n\n我们看一下上述代码：`AuthInterceptor` 由于需要使用 `AuthService` 服务提供的获取 token 的方法，依赖注入了 `AuthService`：\n\n```\nAuthInterceptor -> AuthService  // AuthInterceptor 拦截器需要 AuthService 服务来获取 token\n```\n\n### 依赖关系2\n\n而一般情况下我们的 `AuthService` 需要做登录登出等操作，特别是需要和后端交互以获取 token，所以需要依赖注入 `HttpClient`，存在依赖关系：\n\n```\nAuthService -> HttpClient // AuthService 服务需要 HttpClient 服务来和后端交互\n```\n\n### 依赖关系3\n\n从下述源码可以看出，`HttpClient` 服务依赖注入了 `HttpHandler`：\n\n```typescript\n// v5.2.x\nexport class HttpClient {\n  constructor(private handler: HttpHandler) {}\n\n  request(...): Observable<any> {\n    let req: HttpRequest<any>;\n    ...\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$: Observable<HttpEvent<any>> =\n        concatMap.call(of (req), (req: HttpRequest<any>) => this.handler.handle(req));\n    ...\n}\n```\n\n而 `HttpHandler` 的依赖中包含可选的 `new Inject(HTTP_INTERCEPTORS)`：\n\n```typescript\n// v5.2.2\n@NgModule({\n  imports: [...],\n  providers: [\n    HttpClient,\n    // HttpHandler is the backend + interceptors and is constructed\n    // using the interceptingHandler factory function.\n    {\n      provide: HttpHandler,\n      useFactory: interceptingHandler,\n      deps: [HttpBackend, [new Optional(), new Inject(HTTP_INTERCEPTORS)]],\n    },\n    HttpXhrBackend,\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    ...\n  ],\n})\nexport class HttpClientModule {\n}\n```\n\n其中，`HTTP_INTERCEPTORS` 是一个 `InjectionToken` 实例，用于标识所有拦截器服务。`new Inject(HTTP_INTERCEPTORS)` 可以获取拦截器服务的实例们。\n\n> 这里的“token”是 Angular 的 DI 系统中用于标识以来对象的东西。token 可以是字符串或者 `Type`/`InjectionToken`/`OpaqueToken` 类的实例。\n>\n> P.S. 关于使用哪一种 token 更好的问题，可以【TODO:】看一下[这篇文章](https://blog.thoughtram.io/angular/2016/05/23/opaque-tokens-in-angular-2.html)（[译文](https://segmentfault.com/a/1190000008626348)）。\n\n也就是说，`HttpClient` 依赖于所有 `HttpInterceptor`s，包括 `AuthInterceptor`：\n\n```\nHttpClient -> AuthInterceptor // HttpClient 服务需要 AuthInterceptor 在内的所有拦截器服务来处理请求\n```\n\n### 循环依赖\n\n综上，我们有循环依赖：\n\n```\nAuthInterceptor -> AuthService -> HttpClient -> AuthInterceptor -> ...\n```\n\n而在 Angular 里，每一个服务实例的初始化所需要的依赖都是需要事先准备好的，但一个循环依赖是永远也准备不好的……Angular 因此会检测循环依赖的存在，并在循环依赖被检测到时报错，部分源码如下：\n\n```typescript\n// v5.2.x\nexport class NgModuleProviderAnalyzer {\n  private _transformedProviders = new Map<any, ProviderAst>();\n  private _seenProviders = new Map<any, boolean>();\n  private _allProviders: Map<any, ProviderAst>;\n  private _errors: ProviderError[] = [];\n\n  ...\n\n  private _getOrCreateLocalProvider(token: CompileTokenMetadata, eager: boolean): ProviderAst|null {\n    const resolvedProvider = this._allProviders.get(tokenReference(token));\n    if (!resolvedProvider) {\n      return null;\n    }\n    let transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n    if (transformedProviderAst) {\n      return transformedProviderAst;\n    }\n    if (this._seenProviders.get(tokenReference(token)) != null) {\n      this._errors.push(\n        new ProviderError(`Cannot instantiate cyclic dependency! ${tokenName(token)}`, resolvedProvider.sourceSpan));\n      return null;\n    }\n    this._seenProviders.set(tokenReference(token), true);\n    ...\n  }\n}\n```\n\n让我们稍微看一下代码：\n\n- `NgModuleProviderAnalyzer` 内部通过 `Map` 类型的 `_seenProviders` 来记录看到过的供应商。\n- 在其方法 `_getOrCreateLocalProvider` 内部判断是否已经看过，如果已经看过会在 `_errors` 中记录一个 `ProviderError` 错误。\n\n我用 5.2.2 版本的 Angular 编写了[一个遵循官方文档写法但出现“循环引用错误”的示例项目](https://github.com/baishusama/fe-grocery-store/tree/master/ng-5.2.2-cyclic-dep-err-with-interceptor)。下面是我 `ng serve` \b运行该应用后，在 `compiler.js` 中添加断点调试得到的结果：\n\n- 图一、截图时 `_seenProviders` 中已经记录的各个供应商：\n![_seenProviders](https://user-images.githubusercontent.com/9972503/44579887-87e58b00-a7ca-11e8-9c32-ca2dfbc18f69.png)\n- 图二、截图时 `token` 变量的值：\n![token](https://user-images.githubusercontent.com/9972503/44579937-b6fbfc80-a7ca-11e8-9581-52a373fb24e4.png)\n\n在上述截图中，根据图二的 `token` 变量是能在 `_seenProviders` 中获取到非 `null` 值的，所以会向 `_errors` 中记录一个 `Cannot instantiate cyclic dependency!` 开头的错误。当执行完所有代码之后，控制台会出现该错误：\n\n![interceptor 循环引用报错](https://user-images.githubusercontent.com/9972503/44575832-8ebad080-a7bf-11e8-9578-81a064e4de39.png)\n\n## 用户的修复\n\n\b那么在 5.2.2 及以前，作为 Angular 开发者，要如何解决\b上述问题呢？\n\n我们可以通过注入 `Injector` 手动懒加载 `AuthService` 而不是直接注入其到 `constructor`，来使依赖关系变为如下：\n\n```\nAuthInterceptor --x-> AuthService -> HttpClient -> AuthInterceptor --x->\n即 AuthService -> HttpClient -> AuthInterceptor，其中，在 AuthInterceptor 中懒加载 AuthService\n```\n\n即将官方的示例代码修改为如下：\n\n```typescript\nimport { Injectable, Injector } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  private auth: AuthService;\n\n  constructor(private injector: Injector) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    this.auth = this.injector.get(AuthService);\n\n    const authToken = this.auth.getAuthorizationToken();\n\n    const authReq = req.clone({\n      headers: req.headers.set('Authorization', authToken)\n    });\n\n    return next.handle(authReq);\n  }\n}\n```\n\n可以看到和官方的代码相比，我们改为\b依赖注入 `Injector`，并通过其实例对象 `this.injector` 在调用 `intercept` 方法时才去获取 `auth` 服务实例，而不是将 `auth` 作为依赖注入、在\b调用构造函数的时候去获取。\n\n由此我们绕开了编译阶段的\b对循环依赖做的检查。\n\n## 官方的修复\n\n就像 [PR](https://github.com/angular/angular/pull/19809) 里提到的这样：\n\n> Either HttpClient or the user has to deal specially with the circular dependency.\n\n所以，为了造福大众，最终官方做出了修改，原理和作为用户的我们的代码的思路是一致的——**利用懒加载解决循环依赖问题！**\n\n因为[修复的代码量](https://github.com/angular/angular/commit/ed2b717)很少，所以这里整个摘录下。\n\n首先，新增\b `HttpInterceptingHandler` 类（代码一）：\n\n```typescript\n// v5.2.3\n/**\n * An `HttpHandler` that applies a bunch of `HttpInterceptor`s\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n */\n@Injectable()\nexport class HttpInterceptingHandler implements HttpHandler {\n  private chain: HttpHandler|null = null;\n\n  constructor(private backend: HttpBackend, private injector: Injector) {}\n\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n      this.chain = interceptors.reduceRight(\n          (next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n    }\n    return this.chain.handle(req);\n  }\n}\n```\n\n`HttpHandler` 依赖的创建方式由原来的使用 `useFactory: interceptingHandler` 函数（代码二）：\n\n```typescript\n// v5.2.2\n@NgModule({\n  imports: [...],\n  providers: [\n    HttpClient,\n    // HttpHandler is the backend + interceptors and is constructed\n    // using the interceptingHandler factory function.\n    {\n      provide: HttpHandler,\n      useFactory: interceptingHandler,\n      deps: [HttpBackend, [new Optional(), new Inject(HTTP_INTERCEPTORS)]],\n    },\n    HttpXhrBackend,\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    ...\n  ],\n})\nexport class HttpClientModule {\n}\n```\n\n改为使用 `useClass: HttpInterceptingHandler` 类（代码三）：\n\n```typescript\n// v5.2.3\n@NgModule({\n  imports: [...],\n  providers: [\n    HttpClient,\n    {provide: HttpHandler, useClass: HttpInterceptingHandler},\n    HttpXhrBackend,\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    ...\n  ],\n})\nexport class HttpClientModule {\n}\n```\n\n不难发现，在“代码一”中我们看到了熟悉的写法：依赖注入 `Injector`，并通过其实例对象 `this.injector` 在调用 `handle` 方法时才去获取 `HTTP_INTERCEPTORS` 拦截器依赖，而不是将 `interceptors` 作为依赖注入（在\b调用构造函数的时候去\b获取）。\n\n也就是官方修复的思路如下：\n\n```\nAuthInterceptor -> AuthService -> HttpClient -x-> AuthInterceptor\n即 AuthInterceptor -> AuthService -> HttpClient，其中，在 HttpClient 中懒加载 interceptors\n```\n\n因为 `AuthInterceptor` 对 `AuthService` 的引用和 `AuthService` 对 `HttpClient` 的引用是用户定义的，所以官方可以控制的只剩下 `HttpClient` 到拦截器的依赖引用了。所以，官方选择从 `HttpClient` 处切断依赖。\n\n> 那么，我们为什么选择从 `AuthInterceptor` 处而不是\b从 `AuthService` 处切断依赖呢？\n>\n> 我觉得\b原因有二：\n>\n> 1. 一个是为了让 `AuthService` 尽可能保持透明——对 interceptor 引起的问题没有察觉。**因为本质上这是 interceptors 不能\b依赖注入 `HttpClient` 的问题。**\n> 2. 另一个是 `AuthService` 往往有很多能触发 `HttpClient` 使用的方法，那么\b在什么时候去通过 `injector` 来 get `HttpClient` 服务实例呢？或者说所有方法都加上相关判断么？……所以为了避免问题的复杂化，选择选项更少（只有一个 `intercept` 方法）的 `AuthInterceptor` 显然更为明智。\n\n## 后记\n\n还是太年轻，以前翻 github 的时候没有及时订阅 issue，导致一些问题修复了都毫无察觉……\n\n从今天起，好好订阅 issue，好好\b整理笔记，共勉～\n\n> P.S. 好久没写文章了，这篇文章简直在划水……所以我肯定很多地方没讲清楚（\b特别\b是代码都没有细讲），\b各位看官哪里没看明白的请\b务必指出，我会根据需要慢慢补充。望轻拍砖（逃\n\n## 参考\n\n- [Angular CHANGELOG.md](https://github.com/angular/angular/blob/master/CHANGELOG.md)\n- [fix(common): allow HttpInterceptors to inject HttpClient](https://github.com/angular/angular/commit/ed2b717)\n- [Insider’s guide into interceptors and HttpClient mechanics in Angular](https://blog.angularindepth.com/insiders-guide-into-interceptors-and-httpclient-mechanics-in-angular-103fbdb397bf)：这篇写得相当得好，深入了拦截器和 `HttpClient` 的\b内部机制，推荐\b阅读！","slug":"angular-cyclic-dependency-error-with-interceptor","published":1,"updated":"2018-08-25T03:59:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbpq00125xzx7hteuowo","content":"<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">¶</a>前言</h2>\n<p>恍然间发现这个错误已经不复存在了，于是稍微看了下相关 issue、commit、PR。写篇笔记祭奠下～</p>\n<h2 id=\"需求描述\"><a class=\"header-anchor\" href=\"#需求描述\">¶</a>需求描述</h2>\n<p>一个使用 <code>HttpInterceptor</code> 的常见场景是实现基于 token 的验证机制。</p>\n<p>为什么要使用拦截（intercepting）呢？</p>\n<p>因为，在基于 token 的验证机制中，证明用户身份的 token 需要被附带在每一个（需要验证的请求的）请求头。如果不使用拦截手段，那么（由 <code>HttpClient</code> 实例触发的）每一个请求都需要手动修改请求头（header）。显然手动修改是繁琐和难以维护的。所以，我们选择做拦截。</p>\n<p><a href=\"https://angular.io/guide/http#set-default-headers\" target=\"_blank\" rel=\"noopener\">Angular 官网</a>也给出了范例，以下代码可以实现一个 <code>AuthInterceptor</code> 拦截器：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpEvent, HttpHandler, HttpInterceptor, HttpRequest &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/Observable'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AuthService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../auth.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AuthInterceptor <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> auth: AuthService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> authToken = <span class=\"keyword\">this</span>.auth.getAuthorizationToken();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> authReq = req.clone(&#123;</span><br><span class=\"line\">      headers: req.headers.set(<span class=\"string\">'Authorization'</span>, authToken)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> next.handle(authReq);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题描述\"><a class=\"header-anchor\" href=\"#问题描述\">¶</a>问题描述</h2>\n<p>但在 <a href=\"https://github.com/angular/angular/blob/master/CHANGELOG.md#523-2018-01-31\" target=\"_blank\" rel=\"noopener\">5.2.3</a> 之前，执行上述官方给出的代码是会报错的。原因是 <strong>存在循环引用问题</strong>！</p>\n<a id=\"more\"></a>\n<h3 id=\"依赖关系1\"><a class=\"header-anchor\" href=\"#依赖关系1\">¶</a>依赖关系1</h3>\n<p>我们看一下上述代码：<code>AuthInterceptor</code> 由于需要使用 <code>AuthService</code> 服务提供的获取 token 的方法，依赖注入了 <code>AuthService</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthInterceptor -&gt; AuthService  // AuthInterceptor 拦截器需要 AuthService 服务来获取 token</span><br></pre></td></tr></table></figure>\n<h3 id=\"依赖关系2\"><a class=\"header-anchor\" href=\"#依赖关系2\">¶</a>依赖关系2</h3>\n<p>而一般情况下我们的 <code>AuthService</code> 需要做登录登出等操作，特别是需要和后端交互以获取 token，所以需要依赖注入 <code>HttpClient</code>，存在依赖关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthService -&gt; HttpClient // AuthService 服务需要 HttpClient 服务来和后端交互</span><br></pre></td></tr></table></figure>\n<h3 id=\"依赖关系3\"><a class=\"header-anchor\" href=\"#依赖关系3\">¶</a>依赖关系3</h3>\n<p>从下述源码可以看出，<code>HttpClient</code> 服务依赖注入了 <code>HttpHandler</code>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// v5.2.x</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HttpClient &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> handler: HttpHandler</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  request(...): Observable&lt;<span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// Start with an Observable.of() the initial request, and run the handler (which</span></span><br><span class=\"line\">    <span class=\"comment\">// includes all interceptors) inside a concatMap(). This way, the handler runs</span></span><br><span class=\"line\">    <span class=\"comment\">// inside an Observable chain, which causes interceptors to be re-run on every</span></span><br><span class=\"line\">    <span class=\"comment\">// subscription (this also makes retries re-run the handler, including interceptors).</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> events$: Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; =</span><br><span class=\"line\">        concatMap.call(of (req), <span class=\"function\">(<span class=\"params\">req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;</span>) =&gt;</span> <span class=\"keyword\">this</span>.handler.handle(req));</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而 <code>HttpHandler</code> 的依赖中包含可选的 <code>new Inject(HTTP_INTERCEPTORS)</code>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// v5.2.2</span></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [...],</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    HttpClient,</span><br><span class=\"line\">    <span class=\"comment\">// HttpHandler is the backend + interceptors and is constructed</span></span><br><span class=\"line\">    <span class=\"comment\">// using the interceptingHandler factory function.</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: HttpHandler,</span><br><span class=\"line\">      useFactory: interceptingHandler,</span><br><span class=\"line\">      deps: [HttpBackend, [<span class=\"keyword\">new</span> Optional(), <span class=\"keyword\">new</span> Inject(HTTP_INTERCEPTORS)]],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    HttpXhrBackend,</span><br><span class=\"line\">    &#123;provide: HttpBackend, useExisting: HttpXhrBackend&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HttpClientModule &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，<code>HTTP_INTERCEPTORS</code> 是一个 <code>InjectionToken</code> 实例，用于标识所有拦截器服务。<code>new Inject(HTTP_INTERCEPTORS)</code> 可以获取拦截器服务的实例们。</p>\n<blockquote>\n<p>这里的“token”是 Angular 的 DI 系统中用于标识以来对象的东西。token 可以是字符串或者 <code>Type</code>/<code>InjectionToken</code>/<code>OpaqueToken</code> 类的实例。</p>\n<p>P.S. 关于使用哪一种 token 更好的问题，可以【TODO:】看一下<a href=\"https://blog.thoughtram.io/angular/2016/05/23/opaque-tokens-in-angular-2.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>（<a href=\"https://segmentfault.com/a/1190000008626348\" target=\"_blank\" rel=\"noopener\">译文</a>）。</p>\n</blockquote>\n<p>也就是说，<code>HttpClient</code> 依赖于所有 <code>HttpInterceptor</code>s，包括 <code>AuthInterceptor</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpClient -&gt; AuthInterceptor // HttpClient 服务需要 AuthInterceptor 在内的所有拦截器服务来处理请求</span><br></pre></td></tr></table></figure>\n<h3 id=\"循环依赖\"><a class=\"header-anchor\" href=\"#循环依赖\">¶</a>循环依赖</h3>\n<p>综上，我们有循环依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthInterceptor -&gt; AuthService -&gt; HttpClient -&gt; AuthInterceptor -&gt; ...</span><br></pre></td></tr></table></figure>\n<p>而在 Angular 里，每一个服务实例的初始化所需要的依赖都是需要事先准备好的，但一个循环依赖是永远也准备不好的……Angular 因此会检测循环依赖的存在，并在循环依赖被检测到时报错，部分源码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// v5.2.x</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NgModuleProviderAnalyzer &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _transformedProviders = <span class=\"keyword\">new</span> Map&lt;<span class=\"built_in\">any</span>, ProviderAst&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _seenProviders = <span class=\"keyword\">new</span> Map&lt;<span class=\"built_in\">any</span>, <span class=\"built_in\">boolean</span>&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _allProviders: Map&lt;<span class=\"built_in\">any</span>, ProviderAst&gt;;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _errors: ProviderError[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> _getOrCreateLocalProvider(token: CompileTokenMetadata, eager: <span class=\"built_in\">boolean</span>): ProviderAst|<span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> resolvedProvider = <span class=\"keyword\">this</span>._allProviders.get(tokenReference(token));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!resolvedProvider) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> transformedProviderAst = <span class=\"keyword\">this</span>._transformedProviders.get(tokenReference(token));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (transformedProviderAst) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> transformedProviderAst;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._seenProviders.get(tokenReference(token)) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._errors.push(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ProviderError(<span class=\"string\">`Cannot instantiate cyclic dependency! <span class=\"subst\">$&#123;tokenName(token)&#125;</span>`</span>, resolvedProvider.sourceSpan));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._seenProviders.set(tokenReference(token), <span class=\"literal\">true</span>);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>让我们稍微看一下代码：</p>\n<ul>\n<li><code>NgModuleProviderAnalyzer</code> 内部通过 <code>Map</code> 类型的 <code>_seenProviders</code> 来记录看到过的供应商。</li>\n<li>在其方法 <code>_getOrCreateLocalProvider</code> 内部判断是否已经看过，如果已经看过会在 <code>_errors</code> 中记录一个 <code>ProviderError</code> 错误。</li>\n</ul>\n<p>我用 5.2.2 版本的 Angular 编写了<a href=\"https://github.com/baishusama/fe-grocery-store/tree/master/ng-5.2.2-cyclic-dep-err-with-interceptor\" target=\"_blank\" rel=\"noopener\">一个遵循官方文档写法但出现“循环引用错误”的示例项目</a>。下面是我 <code>ng serve</code> \b运行该应用后，在 <code>compiler.js</code> 中添加断点调试得到的结果：</p>\n<ul>\n<li>图一、截图时 <code>_seenProviders</code> 中已经记录的各个供应商：<br>\n<img src=\"https://user-images.githubusercontent.com/9972503/44579887-87e58b00-a7ca-11e8-9c32-ca2dfbc18f69.png\" alt=\"_seenProviders\"></li>\n<li>图二、截图时 <code>token</code> 变量的值：<br>\n<img src=\"https://user-images.githubusercontent.com/9972503/44579937-b6fbfc80-a7ca-11e8-9581-52a373fb24e4.png\" alt=\"token\"></li>\n</ul>\n<p>在上述截图中，根据图二的 <code>token</code> 变量是能在 <code>_seenProviders</code> 中获取到非 <code>null</code> 值的，所以会向 <code>_errors</code> 中记录一个 <code>Cannot instantiate cyclic dependency!</code> 开头的错误。当执行完所有代码之后，控制台会出现该错误：</p>\n<p><img src=\"https://user-images.githubusercontent.com/9972503/44575832-8ebad080-a7bf-11e8-9578-81a064e4de39.png\" alt=\"interceptor 循环引用报错\"></p>\n<h2 id=\"用户的修复\"><a class=\"header-anchor\" href=\"#用户的修复\">¶</a>用户的修复</h2>\n<p>\b那么在 5.2.2 及以前，作为 Angular 开发者，要如何解决\b上述问题呢？</p>\n<p>我们可以通过注入 <code>Injector</code> 手动懒加载 <code>AuthService</code> 而不是直接注入其到 <code>constructor</code>，来使依赖关系变为如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthInterceptor --x-&gt; AuthService -&gt; HttpClient -&gt; AuthInterceptor --x-&gt;</span><br><span class=\"line\">即 AuthService -&gt; HttpClient -&gt; AuthInterceptor，其中，在 AuthInterceptor 中懒加载 AuthService</span><br></pre></td></tr></table></figure>\n<p>即将官方的示例代码修改为如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable, Injector &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpEvent, HttpHandler, HttpInterceptor, HttpRequest &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/Observable'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AuthService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../auth.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AuthInterceptor <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> auth: AuthService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> injector: Injector</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.auth = <span class=\"keyword\">this</span>.injector.get(AuthService);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> authToken = <span class=\"keyword\">this</span>.auth.getAuthorizationToken();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> authReq = req.clone(&#123;</span><br><span class=\"line\">      headers: req.headers.set(<span class=\"string\">'Authorization'</span>, authToken)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> next.handle(authReq);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到和官方的代码相比，我们改为\b依赖注入 <code>Injector</code>，并通过其实例对象 <code>this.injector</code> 在调用 <code>intercept</code> 方法时才去获取 <code>auth</code> 服务实例，而不是将 <code>auth</code> 作为依赖注入、在\b调用构造函数的时候去获取。</p>\n<p>由此我们绕开了编译阶段的\b对循环依赖做的检查。</p>\n<h2 id=\"官方的修复\"><a class=\"header-anchor\" href=\"#官方的修复\">¶</a>官方的修复</h2>\n<p>就像 <a href=\"https://github.com/angular/angular/pull/19809\" target=\"_blank\" rel=\"noopener\">PR</a> 里提到的这样：</p>\n<blockquote>\n<p>Either HttpClient or the user has to deal specially with the circular dependency.</p>\n</blockquote>\n<p>所以，为了造福大众，最终官方做出了修改，原理和作为用户的我们的代码的思路是一致的——<strong>利用懒加载解决循环依赖问题！</strong></p>\n<p>因为<a href=\"https://github.com/angular/angular/commit/ed2b717\" target=\"_blank\" rel=\"noopener\">修复的代码量</a>很少，所以这里整个摘录下。</p>\n<p>首先，新增\b <code>HttpInterceptingHandler</code> 类（代码一）：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// v5.2.3</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * An `HttpHandler` that applies a bunch of `HttpInterceptor`s</span></span><br><span class=\"line\"><span class=\"comment\"> * to a request before passing it to the given `HttpBackend`.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The interceptors are loaded lazily from the injector, to allow</span></span><br><span class=\"line\"><span class=\"comment\"> * interceptors to themselves inject classes depending indirectly</span></span><br><span class=\"line\"><span class=\"comment\"> * on `HttpInterceptingHandler` itself.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HttpInterceptingHandler <span class=\"keyword\">implements</span> HttpHandler &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> chain: HttpHandler|<span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> backend: HttpBackend, <span class=\"keyword\">private</span> injector: Injector</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handle(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;): Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.chain === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> interceptors = <span class=\"keyword\">this</span>.injector.get(HTTP_INTERCEPTORS, []);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chain = interceptors.reduceRight(</span><br><span class=\"line\">          (next, interceptor) =&gt; <span class=\"keyword\">new</span> HttpInterceptorHandler(next, interceptor), <span class=\"keyword\">this</span>.backend);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.chain.handle(req);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>HttpHandler</code> 依赖的创建方式由原来的使用 <code>useFactory: interceptingHandler</code> 函数（代码二）：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// v5.2.2</span></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [...],</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    HttpClient,</span><br><span class=\"line\">    <span class=\"comment\">// HttpHandler is the backend + interceptors and is constructed</span></span><br><span class=\"line\">    <span class=\"comment\">// using the interceptingHandler factory function.</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: HttpHandler,</span><br><span class=\"line\">      useFactory: interceptingHandler,</span><br><span class=\"line\">      deps: [HttpBackend, [<span class=\"keyword\">new</span> Optional(), <span class=\"keyword\">new</span> Inject(HTTP_INTERCEPTORS)]],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    HttpXhrBackend,</span><br><span class=\"line\">    &#123;provide: HttpBackend, useExisting: HttpXhrBackend&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HttpClientModule &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改为使用 <code>useClass: HttpInterceptingHandler</code> 类（代码三）：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// v5.2.3</span></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [...],</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    HttpClient,</span><br><span class=\"line\">    &#123;provide: HttpHandler, useClass: HttpInterceptingHandler&#125;,</span><br><span class=\"line\">    HttpXhrBackend,</span><br><span class=\"line\">    &#123;provide: HttpBackend, useExisting: HttpXhrBackend&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HttpClientModule &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不难发现，在“代码一”中我们看到了熟悉的写法：依赖注入 <code>Injector</code>，并通过其实例对象 <code>this.injector</code> 在调用 <code>handle</code> 方法时才去获取 <code>HTTP_INTERCEPTORS</code> 拦截器依赖，而不是将 <code>interceptors</code> 作为依赖注入（在\b调用构造函数的时候去\b获取）。</p>\n<p>也就是官方修复的思路如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthInterceptor -&gt; AuthService -&gt; HttpClient -x-&gt; AuthInterceptor</span><br><span class=\"line\">即 AuthInterceptor -&gt; AuthService -&gt; HttpClient，其中，在 HttpClient 中懒加载 interceptors</span><br></pre></td></tr></table></figure>\n<p>因为 <code>AuthInterceptor</code> 对 <code>AuthService</code> 的引用和 <code>AuthService</code> 对 <code>HttpClient</code> 的引用是用户定义的，所以官方可以控制的只剩下 <code>HttpClient</code> 到拦截器的依赖引用了。所以，官方选择从 <code>HttpClient</code> 处切断依赖。</p>\n<blockquote>\n<p>那么，我们为什么选择从 <code>AuthInterceptor</code> 处而不是\b从 <code>AuthService</code> 处切断依赖呢？</p>\n<p>我觉得\b原因有二：</p>\n<ol>\n<li>一个是为了让 <code>AuthService</code> 尽可能保持透明——对 interceptor 引起的问题没有察觉。<strong>因为本质上这是 interceptors 不能\b依赖注入 <code>HttpClient</code> 的问题。</strong></li>\n<li>另一个是 <code>AuthService</code> 往往有很多能触发 <code>HttpClient</code> 使用的方法，那么\b在什么时候去通过 <code>injector</code> 来 get <code>HttpClient</code> 服务实例呢？或者说所有方法都加上相关判断么？……所以为了避免问题的复杂化，选择选项更少（只有一个 <code>intercept</code> 方法）的 <code>AuthInterceptor</code> 显然更为明智。</li>\n</ol>\n</blockquote>\n<h2 id=\"后记\"><a class=\"header-anchor\" href=\"#后记\">¶</a>后记</h2>\n<p>还是太年轻，以前翻 github 的时候没有及时订阅 issue，导致一些问题修复了都毫无察觉……</p>\n<p>从今天起，好好订阅 issue，好好\b整理笔记，共勉～</p>\n<blockquote>\n<p>P.S. 好久没写文章了，这篇文章简直在划水……所以我肯定很多地方没讲清楚（\b特别\b是代码都没有细讲），\b各位看官哪里没看明白的请\b务必指出，我会根据需要慢慢补充。望轻拍砖（逃</p>\n</blockquote>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h2>\n<ul>\n<li><a href=\"https://github.com/angular/angular/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"noopener\">Angular CHANGELOG.md</a></li>\n<li><a href=\"https://github.com/angular/angular/commit/ed2b717\" target=\"_blank\" rel=\"noopener\">fix(common): allow HttpInterceptors to inject HttpClient</a></li>\n<li><a href=\"https://blog.angularindepth.com/insiders-guide-into-interceptors-and-httpclient-mechanics-in-angular-103fbdb397bf\" target=\"_blank\" rel=\"noopener\">Insider’s guide into interceptors and HttpClient mechanics in Angular</a>：这篇写得相当得好，深入了拦截器和 <code>HttpClient</code> 的\b内部机制，推荐\b阅读！</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">¶</a>前言</h2>\n<p>恍然间发现这个错误已经不复存在了，于是稍微看了下相关 issue、commit、PR。写篇笔记祭奠下～</p>\n<h2 id=\"需求描述\"><a class=\"header-anchor\" href=\"#需求描述\">¶</a>需求描述</h2>\n<p>一个使用 <code>HttpInterceptor</code> 的常见场景是实现基于 token 的验证机制。</p>\n<p>为什么要使用拦截（intercepting）呢？</p>\n<p>因为，在基于 token 的验证机制中，证明用户身份的 token 需要被附带在每一个（需要验证的请求的）请求头。如果不使用拦截手段，那么（由 <code>HttpClient</code> 实例触发的）每一个请求都需要手动修改请求头（header）。显然手动修改是繁琐和难以维护的。所以，我们选择做拦截。</p>\n<p><a href=\"https://angular.io/guide/http#set-default-headers\" target=\"_blank\" rel=\"noopener\">Angular 官网</a>也给出了范例，以下代码可以实现一个 <code>AuthInterceptor</code> 拦截器：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpEvent, HttpHandler, HttpInterceptor, HttpRequest &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/Observable'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AuthService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../auth.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AuthInterceptor <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> auth: AuthService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> authToken = <span class=\"keyword\">this</span>.auth.getAuthorizationToken();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> authReq = req.clone(&#123;</span><br><span class=\"line\">      headers: req.headers.set(<span class=\"string\">'Authorization'</span>, authToken)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> next.handle(authReq);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题描述\"><a class=\"header-anchor\" href=\"#问题描述\">¶</a>问题描述</h2>\n<p>但在 <a href=\"https://github.com/angular/angular/blob/master/CHANGELOG.md#523-2018-01-31\" target=\"_blank\" rel=\"noopener\">5.2.3</a> 之前，执行上述官方给出的代码是会报错的。原因是 <strong>存在循环引用问题</strong>！</p>","more":"<h3 id=\"依赖关系1\"><a class=\"header-anchor\" href=\"#依赖关系1\">¶</a>依赖关系1</h3>\n<p>我们看一下上述代码：<code>AuthInterceptor</code> 由于需要使用 <code>AuthService</code> 服务提供的获取 token 的方法，依赖注入了 <code>AuthService</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthInterceptor -&gt; AuthService  // AuthInterceptor 拦截器需要 AuthService 服务来获取 token</span><br></pre></td></tr></table></figure>\n<h3 id=\"依赖关系2\"><a class=\"header-anchor\" href=\"#依赖关系2\">¶</a>依赖关系2</h3>\n<p>而一般情况下我们的 <code>AuthService</code> 需要做登录登出等操作，特别是需要和后端交互以获取 token，所以需要依赖注入 <code>HttpClient</code>，存在依赖关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthService -&gt; HttpClient // AuthService 服务需要 HttpClient 服务来和后端交互</span><br></pre></td></tr></table></figure>\n<h3 id=\"依赖关系3\"><a class=\"header-anchor\" href=\"#依赖关系3\">¶</a>依赖关系3</h3>\n<p>从下述源码可以看出，<code>HttpClient</code> 服务依赖注入了 <code>HttpHandler</code>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// v5.2.x</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HttpClient &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> handler: HttpHandler</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  request(...): Observable&lt;<span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// Start with an Observable.of() the initial request, and run the handler (which</span></span><br><span class=\"line\">    <span class=\"comment\">// includes all interceptors) inside a concatMap(). This way, the handler runs</span></span><br><span class=\"line\">    <span class=\"comment\">// inside an Observable chain, which causes interceptors to be re-run on every</span></span><br><span class=\"line\">    <span class=\"comment\">// subscription (this also makes retries re-run the handler, including interceptors).</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> events$: Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; =</span><br><span class=\"line\">        concatMap.call(of (req), <span class=\"function\">(<span class=\"params\">req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;</span>) =&gt;</span> <span class=\"keyword\">this</span>.handler.handle(req));</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而 <code>HttpHandler</code> 的依赖中包含可选的 <code>new Inject(HTTP_INTERCEPTORS)</code>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// v5.2.2</span></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [...],</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    HttpClient,</span><br><span class=\"line\">    <span class=\"comment\">// HttpHandler is the backend + interceptors and is constructed</span></span><br><span class=\"line\">    <span class=\"comment\">// using the interceptingHandler factory function.</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: HttpHandler,</span><br><span class=\"line\">      useFactory: interceptingHandler,</span><br><span class=\"line\">      deps: [HttpBackend, [<span class=\"keyword\">new</span> Optional(), <span class=\"keyword\">new</span> Inject(HTTP_INTERCEPTORS)]],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    HttpXhrBackend,</span><br><span class=\"line\">    &#123;provide: HttpBackend, useExisting: HttpXhrBackend&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HttpClientModule &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，<code>HTTP_INTERCEPTORS</code> 是一个 <code>InjectionToken</code> 实例，用于标识所有拦截器服务。<code>new Inject(HTTP_INTERCEPTORS)</code> 可以获取拦截器服务的实例们。</p>\n<blockquote>\n<p>这里的“token”是 Angular 的 DI 系统中用于标识以来对象的东西。token 可以是字符串或者 <code>Type</code>/<code>InjectionToken</code>/<code>OpaqueToken</code> 类的实例。</p>\n<p>P.S. 关于使用哪一种 token 更好的问题，可以【TODO:】看一下<a href=\"https://blog.thoughtram.io/angular/2016/05/23/opaque-tokens-in-angular-2.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>（<a href=\"https://segmentfault.com/a/1190000008626348\" target=\"_blank\" rel=\"noopener\">译文</a>）。</p>\n</blockquote>\n<p>也就是说，<code>HttpClient</code> 依赖于所有 <code>HttpInterceptor</code>s，包括 <code>AuthInterceptor</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpClient -&gt; AuthInterceptor // HttpClient 服务需要 AuthInterceptor 在内的所有拦截器服务来处理请求</span><br></pre></td></tr></table></figure>\n<h3 id=\"循环依赖\"><a class=\"header-anchor\" href=\"#循环依赖\">¶</a>循环依赖</h3>\n<p>综上，我们有循环依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthInterceptor -&gt; AuthService -&gt; HttpClient -&gt; AuthInterceptor -&gt; ...</span><br></pre></td></tr></table></figure>\n<p>而在 Angular 里，每一个服务实例的初始化所需要的依赖都是需要事先准备好的，但一个循环依赖是永远也准备不好的……Angular 因此会检测循环依赖的存在，并在循环依赖被检测到时报错，部分源码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// v5.2.x</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NgModuleProviderAnalyzer &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _transformedProviders = <span class=\"keyword\">new</span> Map&lt;<span class=\"built_in\">any</span>, ProviderAst&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _seenProviders = <span class=\"keyword\">new</span> Map&lt;<span class=\"built_in\">any</span>, <span class=\"built_in\">boolean</span>&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _allProviders: Map&lt;<span class=\"built_in\">any</span>, ProviderAst&gt;;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _errors: ProviderError[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> _getOrCreateLocalProvider(token: CompileTokenMetadata, eager: <span class=\"built_in\">boolean</span>): ProviderAst|<span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> resolvedProvider = <span class=\"keyword\">this</span>._allProviders.get(tokenReference(token));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!resolvedProvider) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> transformedProviderAst = <span class=\"keyword\">this</span>._transformedProviders.get(tokenReference(token));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (transformedProviderAst) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> transformedProviderAst;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._seenProviders.get(tokenReference(token)) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._errors.push(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ProviderError(<span class=\"string\">`Cannot instantiate cyclic dependency! <span class=\"subst\">$&#123;tokenName(token)&#125;</span>`</span>, resolvedProvider.sourceSpan));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._seenProviders.set(tokenReference(token), <span class=\"literal\">true</span>);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>让我们稍微看一下代码：</p>\n<ul>\n<li><code>NgModuleProviderAnalyzer</code> 内部通过 <code>Map</code> 类型的 <code>_seenProviders</code> 来记录看到过的供应商。</li>\n<li>在其方法 <code>_getOrCreateLocalProvider</code> 内部判断是否已经看过，如果已经看过会在 <code>_errors</code> 中记录一个 <code>ProviderError</code> 错误。</li>\n</ul>\n<p>我用 5.2.2 版本的 Angular 编写了<a href=\"https://github.com/baishusama/fe-grocery-store/tree/master/ng-5.2.2-cyclic-dep-err-with-interceptor\" target=\"_blank\" rel=\"noopener\">一个遵循官方文档写法但出现“循环引用错误”的示例项目</a>。下面是我 <code>ng serve</code> \b运行该应用后，在 <code>compiler.js</code> 中添加断点调试得到的结果：</p>\n<ul>\n<li>图一、截图时 <code>_seenProviders</code> 中已经记录的各个供应商：<br>\n<img src=\"https://user-images.githubusercontent.com/9972503/44579887-87e58b00-a7ca-11e8-9c32-ca2dfbc18f69.png\" alt=\"_seenProviders\"></li>\n<li>图二、截图时 <code>token</code> 变量的值：<br>\n<img src=\"https://user-images.githubusercontent.com/9972503/44579937-b6fbfc80-a7ca-11e8-9581-52a373fb24e4.png\" alt=\"token\"></li>\n</ul>\n<p>在上述截图中，根据图二的 <code>token</code> 变量是能在 <code>_seenProviders</code> 中获取到非 <code>null</code> 值的，所以会向 <code>_errors</code> 中记录一个 <code>Cannot instantiate cyclic dependency!</code> 开头的错误。当执行完所有代码之后，控制台会出现该错误：</p>\n<p><img src=\"https://user-images.githubusercontent.com/9972503/44575832-8ebad080-a7bf-11e8-9578-81a064e4de39.png\" alt=\"interceptor 循环引用报错\"></p>\n<h2 id=\"用户的修复\"><a class=\"header-anchor\" href=\"#用户的修复\">¶</a>用户的修复</h2>\n<p>\b那么在 5.2.2 及以前，作为 Angular 开发者，要如何解决\b上述问题呢？</p>\n<p>我们可以通过注入 <code>Injector</code> 手动懒加载 <code>AuthService</code> 而不是直接注入其到 <code>constructor</code>，来使依赖关系变为如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthInterceptor --x-&gt; AuthService -&gt; HttpClient -&gt; AuthInterceptor --x-&gt;</span><br><span class=\"line\">即 AuthService -&gt; HttpClient -&gt; AuthInterceptor，其中，在 AuthInterceptor 中懒加载 AuthService</span><br></pre></td></tr></table></figure>\n<p>即将官方的示例代码修改为如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable, Injector &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HttpEvent, HttpHandler, HttpInterceptor, HttpRequest &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/Observable'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AuthService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../auth.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AuthInterceptor <span class=\"keyword\">implements</span> HttpInterceptor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> auth: AuthService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> injector: Injector</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  intercept(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.auth = <span class=\"keyword\">this</span>.injector.get(AuthService);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> authToken = <span class=\"keyword\">this</span>.auth.getAuthorizationToken();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> authReq = req.clone(&#123;</span><br><span class=\"line\">      headers: req.headers.set(<span class=\"string\">'Authorization'</span>, authToken)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> next.handle(authReq);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到和官方的代码相比，我们改为\b依赖注入 <code>Injector</code>，并通过其实例对象 <code>this.injector</code> 在调用 <code>intercept</code> 方法时才去获取 <code>auth</code> 服务实例，而不是将 <code>auth</code> 作为依赖注入、在\b调用构造函数的时候去获取。</p>\n<p>由此我们绕开了编译阶段的\b对循环依赖做的检查。</p>\n<h2 id=\"官方的修复\"><a class=\"header-anchor\" href=\"#官方的修复\">¶</a>官方的修复</h2>\n<p>就像 <a href=\"https://github.com/angular/angular/pull/19809\" target=\"_blank\" rel=\"noopener\">PR</a> 里提到的这样：</p>\n<blockquote>\n<p>Either HttpClient or the user has to deal specially with the circular dependency.</p>\n</blockquote>\n<p>所以，为了造福大众，最终官方做出了修改，原理和作为用户的我们的代码的思路是一致的——<strong>利用懒加载解决循环依赖问题！</strong></p>\n<p>因为<a href=\"https://github.com/angular/angular/commit/ed2b717\" target=\"_blank\" rel=\"noopener\">修复的代码量</a>很少，所以这里整个摘录下。</p>\n<p>首先，新增\b <code>HttpInterceptingHandler</code> 类（代码一）：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// v5.2.3</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * An `HttpHandler` that applies a bunch of `HttpInterceptor`s</span></span><br><span class=\"line\"><span class=\"comment\"> * to a request before passing it to the given `HttpBackend`.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The interceptors are loaded lazily from the injector, to allow</span></span><br><span class=\"line\"><span class=\"comment\"> * interceptors to themselves inject classes depending indirectly</span></span><br><span class=\"line\"><span class=\"comment\"> * on `HttpInterceptingHandler` itself.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HttpInterceptingHandler <span class=\"keyword\">implements</span> HttpHandler &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> chain: HttpHandler|<span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> backend: HttpBackend, <span class=\"keyword\">private</span> injector: Injector</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handle(req: HttpRequest&lt;<span class=\"built_in\">any</span>&gt;): Observable&lt;HttpEvent&lt;<span class=\"built_in\">any</span>&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.chain === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> interceptors = <span class=\"keyword\">this</span>.injector.get(HTTP_INTERCEPTORS, []);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chain = interceptors.reduceRight(</span><br><span class=\"line\">          (next, interceptor) =&gt; <span class=\"keyword\">new</span> HttpInterceptorHandler(next, interceptor), <span class=\"keyword\">this</span>.backend);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.chain.handle(req);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>HttpHandler</code> 依赖的创建方式由原来的使用 <code>useFactory: interceptingHandler</code> 函数（代码二）：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// v5.2.2</span></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [...],</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    HttpClient,</span><br><span class=\"line\">    <span class=\"comment\">// HttpHandler is the backend + interceptors and is constructed</span></span><br><span class=\"line\">    <span class=\"comment\">// using the interceptingHandler factory function.</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: HttpHandler,</span><br><span class=\"line\">      useFactory: interceptingHandler,</span><br><span class=\"line\">      deps: [HttpBackend, [<span class=\"keyword\">new</span> Optional(), <span class=\"keyword\">new</span> Inject(HTTP_INTERCEPTORS)]],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    HttpXhrBackend,</span><br><span class=\"line\">    &#123;provide: HttpBackend, useExisting: HttpXhrBackend&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HttpClientModule &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改为使用 <code>useClass: HttpInterceptingHandler</code> 类（代码三）：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// v5.2.3</span></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [...],</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    HttpClient,</span><br><span class=\"line\">    &#123;provide: HttpHandler, useClass: HttpInterceptingHandler&#125;,</span><br><span class=\"line\">    HttpXhrBackend,</span><br><span class=\"line\">    &#123;provide: HttpBackend, useExisting: HttpXhrBackend&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HttpClientModule &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不难发现，在“代码一”中我们看到了熟悉的写法：依赖注入 <code>Injector</code>，并通过其实例对象 <code>this.injector</code> 在调用 <code>handle</code> 方法时才去获取 <code>HTTP_INTERCEPTORS</code> 拦截器依赖，而不是将 <code>interceptors</code> 作为依赖注入（在\b调用构造函数的时候去\b获取）。</p>\n<p>也就是官方修复的思路如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthInterceptor -&gt; AuthService -&gt; HttpClient -x-&gt; AuthInterceptor</span><br><span class=\"line\">即 AuthInterceptor -&gt; AuthService -&gt; HttpClient，其中，在 HttpClient 中懒加载 interceptors</span><br></pre></td></tr></table></figure>\n<p>因为 <code>AuthInterceptor</code> 对 <code>AuthService</code> 的引用和 <code>AuthService</code> 对 <code>HttpClient</code> 的引用是用户定义的，所以官方可以控制的只剩下 <code>HttpClient</code> 到拦截器的依赖引用了。所以，官方选择从 <code>HttpClient</code> 处切断依赖。</p>\n<blockquote>\n<p>那么，我们为什么选择从 <code>AuthInterceptor</code> 处而不是\b从 <code>AuthService</code> 处切断依赖呢？</p>\n<p>我觉得\b原因有二：</p>\n<ol>\n<li>一个是为了让 <code>AuthService</code> 尽可能保持透明——对 interceptor 引起的问题没有察觉。<strong>因为本质上这是 interceptors 不能\b依赖注入 <code>HttpClient</code> 的问题。</strong></li>\n<li>另一个是 <code>AuthService</code> 往往有很多能触发 <code>HttpClient</code> 使用的方法，那么\b在什么时候去通过 <code>injector</code> 来 get <code>HttpClient</code> 服务实例呢？或者说所有方法都加上相关判断么？……所以为了避免问题的复杂化，选择选项更少（只有一个 <code>intercept</code> 方法）的 <code>AuthInterceptor</code> 显然更为明智。</li>\n</ol>\n</blockquote>\n<h2 id=\"后记\"><a class=\"header-anchor\" href=\"#后记\">¶</a>后记</h2>\n<p>还是太年轻，以前翻 github 的时候没有及时订阅 issue，导致一些问题修复了都毫无察觉……</p>\n<p>从今天起，好好订阅 issue，好好\b整理笔记，共勉～</p>\n<blockquote>\n<p>P.S. 好久没写文章了，这篇文章简直在划水……所以我肯定很多地方没讲清楚（\b特别\b是代码都没有细讲），\b各位看官哪里没看明白的请\b务必指出，我会根据需要慢慢补充。望轻拍砖（逃</p>\n</blockquote>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h2>\n<ul>\n<li><a href=\"https://github.com/angular/angular/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"noopener\">Angular CHANGELOG.md</a></li>\n<li><a href=\"https://github.com/angular/angular/commit/ed2b717\" target=\"_blank\" rel=\"noopener\">fix(common): allow HttpInterceptors to inject HttpClient</a></li>\n<li><a href=\"https://blog.angularindepth.com/insiders-guide-into-interceptors-and-httpclient-mechanics-in-angular-103fbdb397bf\" target=\"_blank\" rel=\"noopener\">Insider’s guide into interceptors and HttpClient mechanics in Angular</a>：这篇写得相当得好，深入了拦截器和 <code>HttpClient</code> 的\b内部机制，推荐\b阅读！</li>\n</ul>"},{"title":"Hello World","date":"2016-11-20T17:04:44.000Z","_content":"\n## Dear Guest，\n\n这里是 imo++ 站点的第 0 篇文章。\n\n<!-- more -->\n\n## 从零开始的博客生涯\n\n从零开始计数可以算作是程序猿的陋习（笑）。但是鉴于本篇只是本站的欢迎文章，不能算作是一篇真正意义上的文章——一篇亦或干货满满亦或文笔清新亦或发自肺腑的文章，所以本篇仅以第零篇的身份面世。\n\n>这里得先向你们道个歉，由于笔者是从零开始写博客，可能第一篇正文也是那么名不副实 :P\n\n## 不忘初心，方得始终\n\n### 学习、思考、记录总结\n\n喜欢酷酷的极客范，向往神秘而无所不能的黑客们，然而我还只是一枚小小的才刚刚学会蠕动的苦逼程序猿。正如罗马不是一天建成的，真正的大牛也不是一天练成的。在这里，我将会记录工作学习过程中，遇到的一些问题及其解决方案，一些折腾的经历，一些我所爱的事物。\n\n### 开源、分享、共同成长\n\n如果我的文章能对你有所帮助，那将是对我写文的最大鼓励，也将会是我继续写文的最大动力。\n\n可能往往，写文的时间并不是那么充裕，笔者我见解狭隘甚至知识存在误区，在行文过程中难免多有疏漏。眼睛雪亮的读者们如若发现定不吝赐教。\n\nMay the force be with you.\n\n\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-11-21 01:04:44\ntags:\n---\n\n## Dear Guest，\n\n这里是 imo++ 站点的第 0 篇文章。\n\n<!-- more -->\n\n## 从零开始的博客生涯\n\n从零开始计数可以算作是程序猿的陋习（笑）。但是鉴于本篇只是本站的欢迎文章，不能算作是一篇真正意义上的文章——一篇亦或干货满满亦或文笔清新亦或发自肺腑的文章，所以本篇仅以第零篇的身份面世。\n\n>这里得先向你们道个歉，由于笔者是从零开始写博客，可能第一篇正文也是那么名不副实 :P\n\n## 不忘初心，方得始终\n\n### 学习、思考、记录总结\n\n喜欢酷酷的极客范，向往神秘而无所不能的黑客们，然而我还只是一枚小小的才刚刚学会蠕动的苦逼程序猿。正如罗马不是一天建成的，真正的大牛也不是一天练成的。在这里，我将会记录工作学习过程中，遇到的一些问题及其解决方案，一些折腾的经历，一些我所爱的事物。\n\n### 开源、分享、共同成长\n\n如果我的文章能对你有所帮助，那将是对我写文的最大鼓励，也将会是我继续写文的最大动力。\n\n可能往往，写文的时间并不是那么充裕，笔者我见解狭隘甚至知识存在误区，在行文过程中难免多有疏漏。眼睛雪亮的读者们如若发现定不吝赐教。\n\nMay the force be with you.\n\n\n\n","slug":"hello-world","published":1,"updated":"2018-08-25T02:37:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbpr00155xzx6grlbvk9","content":"<h2 id=\"dear-guest\"><a class=\"header-anchor\" href=\"#dear-guest\">¶</a>Dear Guest，</h2>\n<p>这里是 imo++ 站点的第 0 篇文章。</p>\n<a id=\"more\"></a>\n<h2 id=\"从零开始的博客生涯\"><a class=\"header-anchor\" href=\"#从零开始的博客生涯\">¶</a>从零开始的博客生涯</h2>\n<p>从零开始计数可以算作是程序猿的陋习（笑）。但是鉴于本篇只是本站的欢迎文章，不能算作是一篇真正意义上的文章——一篇亦或干货满满亦或文笔清新亦或发自肺腑的文章，所以本篇仅以第零篇的身份面世。</p>\n<blockquote>\n<p>这里得先向你们道个歉，由于笔者是从零开始写博客，可能第一篇正文也是那么名不副实 😛</p>\n</blockquote>\n<h2 id=\"不忘初心-方得始终\"><a class=\"header-anchor\" href=\"#不忘初心-方得始终\">¶</a>不忘初心，方得始终</h2>\n<h3 id=\"学习-思考-记录总结\"><a class=\"header-anchor\" href=\"#学习-思考-记录总结\">¶</a>学习、思考、记录总结</h3>\n<p>喜欢酷酷的极客范，向往神秘而无所不能的黑客们，然而我还只是一枚小小的才刚刚学会蠕动的苦逼程序猿。正如罗马不是一天建成的，真正的大牛也不是一天练成的。在这里，我将会记录工作学习过程中，遇到的一些问题及其解决方案，一些折腾的经历，一些我所爱的事物。</p>\n<h3 id=\"开源-分享-共同成长\"><a class=\"header-anchor\" href=\"#开源-分享-共同成长\">¶</a>开源、分享、共同成长</h3>\n<p>如果我的文章能对你有所帮助，那将是对我写文的最大鼓励，也将会是我继续写文的最大动力。</p>\n<p>可能往往，写文的时间并不是那么充裕，笔者我见解狭隘甚至知识存在误区，在行文过程中难免多有疏漏。眼睛雪亮的读者们如若发现定不吝赐教。</p>\n<p>May the force be with you.</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"dear-guest\"><a class=\"header-anchor\" href=\"#dear-guest\">¶</a>Dear Guest，</h2>\n<p>这里是 imo++ 站点的第 0 篇文章。</p>","more":"<h2 id=\"从零开始的博客生涯\"><a class=\"header-anchor\" href=\"#从零开始的博客生涯\">¶</a>从零开始的博客生涯</h2>\n<p>从零开始计数可以算作是程序猿的陋习（笑）。但是鉴于本篇只是本站的欢迎文章，不能算作是一篇真正意义上的文章——一篇亦或干货满满亦或文笔清新亦或发自肺腑的文章，所以本篇仅以第零篇的身份面世。</p>\n<blockquote>\n<p>这里得先向你们道个歉，由于笔者是从零开始写博客，可能第一篇正文也是那么名不副实 😛</p>\n</blockquote>\n<h2 id=\"不忘初心-方得始终\"><a class=\"header-anchor\" href=\"#不忘初心-方得始终\">¶</a>不忘初心，方得始终</h2>\n<h3 id=\"学习-思考-记录总结\"><a class=\"header-anchor\" href=\"#学习-思考-记录总结\">¶</a>学习、思考、记录总结</h3>\n<p>喜欢酷酷的极客范，向往神秘而无所不能的黑客们，然而我还只是一枚小小的才刚刚学会蠕动的苦逼程序猿。正如罗马不是一天建成的，真正的大牛也不是一天练成的。在这里，我将会记录工作学习过程中，遇到的一些问题及其解决方案，一些折腾的经历，一些我所爱的事物。</p>\n<h3 id=\"开源-分享-共同成长\"><a class=\"header-anchor\" href=\"#开源-分享-共同成长\">¶</a>开源、分享、共同成长</h3>\n<p>如果我的文章能对你有所帮助，那将是对我写文的最大鼓励，也将会是我继续写文的最大动力。</p>\n<p>可能往往，写文的时间并不是那么充裕，笔者我见解狭隘甚至知识存在误区，在行文过程中难免多有疏漏。眼睛雪亮的读者们如若发现定不吝赐教。</p>\n<p>May the force be with you.</p>"},{"title":"emoji-cheat-sheet","date":"2016-12-26T15:05:51.000Z","_content":"\n> [emoji-cheat-sheet](http://www.webpagefx.com/tools/emoji-cheat-sheet/)  \n> [emoji.codes](http://emoji.codes/#)  \n\n### People\n\n:bowtie: - `:bowtie:`\n:smile: - `:smile:`\n:laughing: - `:laughing:`\n:blush: - `:blush:`\n:smiley: - `:smiley:`\n:relaxed: - `:relaxed:`\n:smirk: - `:smirk:`\n:heart_eyes: - `:heart_eyes:`\n:kissing_heart: - `:kissing_heart:`\n<!-- more -->\n:kissing_closed_eyes: - `:kissing_closed_eyes:`\n:flushed: - `:flushed:`\n:relieved: - `:relieved:`\n:satisfied: - `:satisfied:`\n:grin: - `:grin:`\n:wink: - `:wink:`\n:stuck_out_tongue_winking_eye: - `:stuck_out_tongue_winking_eye:`\n:stuck_out_tongue_closed_eyes: - `:stuck_out_tongue_closed_eyes:`\n:grinning: - `:grinning:`\n:kissing: - `:kissing:`\n:kissing_smiling_eyes: - `:kissing_smiling_eyes:`\n:stuck_out_tongue: - `:stuck_out_tongue:`\n:sleeping: - `:sleeping:`\n:worried: - `:worried:`\n:frowning: - `:frowning:`\n:anguished: - `:anguished:`\n:open_mouth: - `:open_mouth:`\n:grimacing: - `:grimacing:`\n:confused: - `:confused:`\n:hushed: - `:hushed:`\n:expressionless: - `:expressionless:`\n:unamused: - `:unamused:`\n:sweat_smile: - `:sweat_smile:`\n:sweat: - `:sweat:`\n:disappointed_relieved: - `:disappointed_relieved:`\n:weary: - `:weary:`\n:pensive: - `:pensive:`\n:disappointed: - `:disappointed:`\n:confounded: - `:confounded:`\n:fearful: - `:fearful:`\n:cold_sweat: - `:cold_sweat:`\n:persevere: - `:persevere:`\n:cry: - `:cry:`\n:sob: - `:sob:`\n:joy: - `:joy:`\n:astonished: - `:astonished:`\n:scream: - `:scream:`\n:neckbeard: - `:neckbeard:`\n:tired_face: - `:tired_face:`\n:angry: - `:angry:`\n:rage: - `:rage:`\n:triumph: - `:triumph:`\n:sleepy: - `:sleepy:`\n:yum: - `:yum:`\n:mask: - `:mask:`\n:sunglasses: - `:sunglasses:`\n:dizzy_face: - `:dizzy_face:`\n:imp: - `:imp:`\n:smiling_imp: - `:smiling_imp:`\n:neutral_face: - `:neutral_face:`\n:no_mouth: - `:no_mouth:`\n:innocent: - `:innocent:`\n:alien: - `:alien:`\n:yellow_heart: - `:yellow_heart:`\n:blue_heart: - `:blue_heart:`\n:purple_heart: - `:purple_heart:`\n:heart: - `:heart:`\n:green_heart: - `:green_heart:`\n:broken_heart: - `:broken_heart:`\n:heartbeat: - `:heartbeat:`\n:heartpulse: - `:heartpulse:`\n:two_hearts: - `:two_hearts:`\n:revolving_hearts: - `:revolving_hearts:`\n:cupid: - `:cupid:`\n:sparkling_heart: - `:sparkling_heart:`\n:sparkles: - `:sparkles:`\n:star: - `:star:`\n:star2: - `:star2:`\n:dizzy: - `:dizzy:`\n:boom: - `:boom:`\n:collision: - `:collision:`\n:anger: - `:anger:`\n:exclamation: - `:exclamation:`\n:question: - `:question:`\n:grey_exclamation: - `:grey_exclamation:`\n:grey_question: - `:grey_question:`\n:zzz: - `:zzz:`\n:dash: - `:dash:`\n:sweat_drops: - `:sweat_drops:`\n:notes: - `:notes:`\n:musical_note: - `:musical_note:`\n:fire: - `:fire:`\n:hankey: - `:hankey:`\n:poop: - `:poop:`\n:shit: - `:shit:`\n:+1: - `:+1:`\n:thumbsup: - `:thumbsup:`\n:-1: - `:-1:`\n:thumbsdown: - `:thumbsdown:`\n:ok_hand: - `:ok_hand:`\n:punch: - `:punch:`\n:facepunch: - `:facepunch:`\n:fist: - `:fist:`\n:v: - `:v:`\n:wave: - `:wave:`\n:hand: - `:hand:`\n:raised_hand: - `:raised_hand:`\n:open_hands: - `:open_hands:`\n:point_up: - `:point_up:`\n:point_down: - `:point_down:`\n:point_left: - `:point_left:`\n:point_right: - `:point_right:`\n:raised_hands: - `:raised_hands:`\n:pray: - `:pray:`\n:point_up_2: - `:point_up_2:`\n:clap: - `:clap:`\n:muscle: - `:muscle:`\n:metal: - `:metal:`\n:fu: - `:fu:`\n:runner: - `:runner:`\n:running: - `:running:`\n:couple: - `:couple:`\n:family: - `:family:`\n:two_men_holding_hands: - `:two_men_holding_hands:`\n:two_women_holding_hands: - `:two_women_holding_hands:`\n:dancer: - `:dancer:`\n:dancers: - `:dancers:`\n:ok_woman: - `:ok_woman:`\n:no_good: - `:no_good:`\n:information_desk_person: - `:information_desk_person:`\n:raising_hand: - `:raising_hand:`\n:bride_with_veil: - `:bride_with_veil:`\n:person_with_pouting_face: - `:person_with_pouting_face:`\n:person_frowning: - `:person_frowning:`\n:bow: - `:bow:`\n:couplekiss: - `:couplekiss:`\n:couple_with_heart: - `:couple_with_heart:`\n:massage: - `:massage:`\n:haircut: - `:haircut:`\n:nail_care: - `:nail_care:`\n:boy: - `:boy:`\n:girl: - `:girl:`\n:woman: - `:woman:`\n:man: - `:man:`\n:baby: - `:baby:`\n:older_woman: - `:older_woman:`\n:older_man: - `:older_man:`\n:person_with_blond_hair: - `:person_with_blond_hair:`\n:man_with_gua_pi_mao: - `:man_with_gua_pi_mao:`\n:man_with_turban: - `:man_with_turban:`\n:construction_worker: - `:construction_worker:`\n:cop: - `:cop:`\n:angel: - `:angel:`\n:princess: - `:princess:`\n:smiley_cat: - `:smiley_cat:`\n:smile_cat: - `:smile_cat:`\n:heart_eyes_cat: - `:heart_eyes_cat:`\n:kissing_cat: - `:kissing_cat:`\n:smirk_cat: - `:smirk_cat:`\n:scream_cat: - `:scream_cat:`\n:crying_cat_face: - `:crying_cat_face:`\n:joy_cat: - `:joy_cat:`\n:pouting_cat: - `:pouting_cat:`\n:japanese_ogre: - `:japanese_ogre:`\n:japanese_goblin: - `:japanese_goblin:`\n:see_no_evil: - `:see_no_evil:`\n:hear_no_evil: - `:hear_no_evil:`\n:speak_no_evil: - `:speak_no_evil:`\n:guardsman: - `:guardsman:`\n:skull: - `:skull:`\n:feet: - `:feet:`\n:lips: - `:lips:`\n:kiss: - `:kiss:`\n:droplet: - `:droplet:`\n:ear: - `:ear:`\n:eyes: - `:eyes:`\n:nose: - `:nose:`\n:tongue: - `:tongue:`\n:love_letter: - `:love_letter:`\n:bust_in_silhouette: - `:bust_in_silhouette:`\n:busts_in_silhouette: - `:busts_in_silhouette:`\n:speech_balloon: - `:speech_balloon:`\n:thought_balloon: - `:thought_balloon:`\n:feelsgood: - `:feelsgood:`\n:finnadie: - `:finnadie:`\n:goberserk: - `:goberserk:`\n:godmode: - `:godmode:`\n:hurtrealbad: - `:hurtrealbad:`\n:rage1: - `:rage1:`\n:rage2: - `:rage2:`\n:rage3: - `:rage3:`\n:rage4: - `:rage4:`\n:suspect: - `:suspect:`\n:trollface: - `:trollface:`\n\n### Nature\n\n:sunny: - `:sunny:`\n:umbrella: - `:umbrella:`\n:cloud: - `:cloud:`\n:snowflake: - `:snowflake:`\n:snowman: - `:snowman:`\n:zap: - `:zap:`\n:cyclone: - `:cyclone:`\n:foggy: - `:foggy:`\n:ocean: - `:ocean:`\n:cat: - `:cat:`\n:dog: - `:dog:`\n:mouse: - `:mouse:`\n:hamster: - `:hamster:`\n:rabbit: - `:rabbit:`\n:wolf: - `:wolf:`\n:frog: - `:frog:`\n:tiger: - `:tiger:`\n:koala: - `:koala:`\n:bear: - `:bear:`\n:pig: - `:pig:`\n:pig_nose: - `:pig_nose:`\n:cow: - `:cow:`\n:boar: - `:boar:`\n:monkey_face: - `:monkey_face:`\n:monkey: - `:monkey:`\n:horse: - `:horse:`\n:racehorse: - `:racehorse:`\n:camel: - `:camel:`\n:sheep: - `:sheep:`\n:elephant: - `:elephant:`\n:panda_face: - `:panda_face:`\n:snake: - `:snake:`\n:bird: - `:bird:`\n:baby_chick: - `:baby_chick:`\n:hatched_chick: - `:hatched_chick:`\n:hatching_chick: - `:hatching_chick:`\n:chicken: - `:chicken:`\n:penguin: - `:penguin:`\n:turtle: - `:turtle:`\n:bug: - `:bug:`\n:honeybee: - `:honeybee:`\n:ant: - `:ant:`\n:beetle: - `:beetle:`\n:snail: - `:snail:`\n:octopus: - `:octopus:`\n:tropical_fish: - `:tropical_fish:`\n:fish: - `:fish:`\n:whale: - `:whale:`\n:whale2: - `:whale2:`\n:dolphin: - `:dolphin:`\n:cow2: - `:cow2:`\n:ram: - `:ram:`\n:rat: - `:rat:`\n:water_buffalo: - `:water_buffalo:`\n:tiger2: - `:tiger2:`\n:rabbit2: - `:rabbit2:`\n:dragon: - `:dragon:`\n:goat: - `:goat:`\n:rooster: - `:rooster:`\n:dog2: - `:dog2:`\n:pig2: - `:pig2:`\n:mouse2: - `:mouse2:`\n:ox: - `:ox:`\n:dragon_face: - `:dragon_face:`\n:blowfish: - `:blowfish:`\n:crocodile: - `:crocodile:`\n:dromedary_camel: - `:dromedary_camel:`\n:leopard: - `:leopard:`\n:cat2: - `:cat2:`\n:poodle: - `:poodle:`\n:paw_prints: - `:paw_prints:`\n:bouquet: - `:bouquet:`\n:cherry_blossom: - `:cherry_blossom:`\n:tulip: - `:tulip:`\n:four_leaf_clover: - `:four_leaf_clover:`\n:rose: - `:rose:`\n:sunflower: - `:sunflower:`\n:hibiscus: - `:hibiscus:`\n:maple_leaf: - `:maple_leaf:`\n:leaves: - `:leaves:`\n:fallen_leaf: - `:fallen_leaf:`\n:herb: - `:herb:`\n:mushroom: - `:mushroom:`\n:cactus: - `:cactus:`\n:palm_tree: - `:palm_tree:`\n:evergreen_tree: - `:evergreen_tree:`\n:deciduous_tree: - `:deciduous_tree:`\n:chestnut: - `:chestnut:`\n:seedling: - `:seedling:`\n:blossom: - `:blossom:`\n:ear_of_rice: - `:ear_of_rice:`\n:shell: - `:shell:`\n:globe_with_meridians: - `:globe_with_meridians:`\n:sun_with_face: - `:sun_with_face:`\n:full_moon_with_face: - `:full_moon_with_face:`\n:new_moon_with_face: - `:new_moon_with_face:`\n:new_moon: - `:new_moon:`\n:waxing_crescent_moon: - `:waxing_crescent_moon:`\n:first_quarter_moon: - `:first_quarter_moon:`\n:waxing_gibbous_moon: - `:waxing_gibbous_moon:`\n:full_moon: - `:full_moon:`\n:waning_gibbous_moon: - `:waning_gibbous_moon:`\n:last_quarter_moon: - `:last_quarter_moon:`\n:waning_crescent_moon: - `:waning_crescent_moon:`\n:last_quarter_moon_with_face: - `:last_quarter_moon_with_face:`\n:first_quarter_moon_with_face: - `:first_quarter_moon_with_face:`\n:crescent_moon: - `:crescent_moon:`\n:earth_africa: - `:earth_africa:`\n:earth_americas: - `:earth_americas:`\n:earth_asia: - `:earth_asia:`\n:volcano: - `:volcano:`\n:milky_way: - `:milky_way:`\n:partly_sunny: - `:partly_sunny:`\n:octocat: - `:octocat:`\n:squirrel: - `:squirrel:`\n\n### Objects\n\n:bamboo: - `:bamboo:`\n:gift_heart: - `:gift_heart:`\n:dolls: - `:dolls:`\n:school_satchel: - `:school_satchel:`\n:mortar_board: - `:mortar_board:`\n:flags: - `:flags:`\n:fireworks: - `:fireworks:`\n:sparkler: - `:sparkler:`\n:wind_chime: - `:wind_chime:`\n:rice_scene: - `:rice_scene:`\n:jack_o_lantern: - `:jack_o_lantern:`\n:ghost: - `:ghost:`\n:santa: - `:santa:`\n:christmas_tree: - `:christmas_tree:`\n:gift: - `:gift:`\n:bell: - `:bell:`\n:no_bell: - `:no_bell:`\n:tanabata_tree: - `:tanabata_tree:`\n:tada: - `:tada:`\n:confetti_ball: - `:confetti_ball:`\n:balloon: - `:balloon:`\n:crystal_ball: - `:crystal_ball:`\n:cd: - `:cd:`\n:dvd: - `:dvd:`\n:floppy_disk: - `:floppy_disk:`\n:camera: - `:camera:`\n:video_camera: - `:video_camera:`\n:movie_camera: - `:movie_camera:`\n:computer: - `:computer:`\n:tv: - `:tv:`\n:iphone: - `:iphone:`\n:phone: - `:phone:`\n:telephone: - `:telephone:`\n:telephone_receiver: - `:telephone_receiver:`\n:pager: - `:pager:`\n:fax: - `:fax:`\n:minidisc: - `:minidisc:`\n:vhs: - `:vhs:`\n:sound: - `:sound:`\n:speaker: - `:speaker:`\n:mute: - `:mute:`\n:loudspeaker: - `:loudspeaker:`\n:mega: - `:mega:`\n:hourglass: - `:hourglass:`\n:hourglass_flowing_sand: - `:hourglass_flowing_sand:`\n:alarm_clock: - `:alarm_clock:`\n:watch: - `:watch:`\n:radio: - `:radio:`\n:satellite: - `:satellite:`\n:loop: - `:loop:`\n:mag: - `:mag:`\n:mag_right: - `:mag_right:`\n:unlock: - `:unlock:`\n:lock: - `:lock:`\n:lock_with_ink_pen: - `:lock_with_ink_pen:`\n:closed_lock_with_key: - `:closed_lock_with_key:`\n:key: - `:key:`\n:bulb: - `:bulb:`\n:flashlight: - `:flashlight:`\n:high_brightness: - `:high_brightness:`\n:low_brightness: - `:low_brightness:`\n:electric_plug: - `:electric_plug:`\n:battery: - `:battery:`\n:calling: - `:calling:`\n:email: - `:email:`\n:mailbox: - `:mailbox:`\n:postbox: - `:postbox:`\n:bath: - `:bath:`\n:bathtub: - `:bathtub:`\n:shower: - `:shower:`\n:toilet: - `:toilet:`\n:wrench: - `:wrench:`\n:nut_and_bolt: - `:nut_and_bolt:`\n:hammer: - `:hammer:`\n:seat: - `:seat:`\n:moneybag: - `:moneybag:`\n:yen: - `:yen:`\n:dollar: - `:dollar:`\n:pound: - `:pound:`\n:euro: - `:euro:`\n:credit_card: - `:credit_card:`\n:money_with_wings: - `:money_with_wings:`\n:e-mail: - `:e-mail:`\n:inbox_tray: - `:inbox_tray:`\n:outbox_tray: - `:outbox_tray:`\n:envelope: - `:envelope:`\n:incoming_envelope: - `:incoming_envelope:`\n:postal_horn: - `:postal_horn:`\n:mailbox_closed: - `:mailbox_closed:`\n:mailbox_with_mail: - `:mailbox_with_mail:`\n:mailbox_with_no_mail: - `:mailbox_with_no_mail:`\n:package: - `:package:`\n:door: - `:door:`\n:smoking: - `:smoking:`\n:bomb: - `:bomb:`\n:gun: - `:gun:`\n:hocho: - `:hocho:`\n:pill: - `:pill:`\n:syringe: - `:syringe:`\n:page_facing_up: - `:page_facing_up:`\n:page_with_curl: - `:page_with_curl:`\n:bookmark_tabs: - `:bookmark_tabs:`\n:bar_chart: - `:bar_chart:`\n:chart_with_upwards_trend: - `:chart_with_upwards_trend:`\n:chart_with_downwards_trend: - `:chart_with_downwards_trend:`\n:scroll: - `:scroll:`\n:clipboard: - `:clipboard:`\n:calendar: - `:calendar:`\n:date: - `:date:`\n:card_index: - `:card_index:`\n:file_folder: - `:file_folder:`\n:open_file_folder: - `:open_file_folder:`\n:scissors: - `:scissors:`\n:pushpin: - `:pushpin:`\n:paperclip: - `:paperclip:`\n:black_nib: - `:black_nib:`\n:pencil2: - `:pencil2:`\n:straight_ruler: - `:straight_ruler:`\n:triangular_ruler: - `:triangular_ruler:`\n:closed_book: - `:closed_book:`\n:green_book: - `:green_book:`\n:blue_book: - `:blue_book:`\n:orange_book: - `:orange_book:`\n:notebook: - `:notebook:`\n:notebook_with_decorative_cover: - `:notebook_with_decorative_cover:`\n:ledger: - `:ledger:`\n:books: - `:books:`\n:bookmark: - `:bookmark:`\n:name_badge: - `:name_badge:`\n:microscope: - `:microscope:`\n:telescope: - `:telescope:`\n:newspaper: - `:newspaper:`\n:football: - `:football:`\n:basketball: - `:basketball:`\n:soccer: - `:soccer:`\n:baseball: - `:baseball:`\n:tennis: - `:tennis:`\n:8ball: - `:8ball:`\n:8ball: - `:8ball:`\n:rugby_football: - `:rugby_football:`\n:bowling: - `:bowling:`\n:golf: - `:golf:`\n:mountain_bicyclist: - `:mountain_bicyclist:`\n:bicyclist: - `:bicyclist:`\n:horse_racing: - `:horse_racing:`\n:snowboarder: - `:snowboarder:`\n:swimmer: - `:swimmer:`\n:surfer: - `:surfer:`\n:ski: - `:ski:`\n:spades: - `:spades:`\n:hearts: - `:hearts:`\n:clubs: - `:clubs:`\n:diamonds: - `:diamonds:`\n:gem: - `:gem:`\n:ring: - `:ring:`\n:trophy: - `:trophy:`\n:musical_score: - `:musical_score:`\n:musical_keyboard: - `:musical_keyboard:`\n:violin: - `:violin:`\n:space_invader: - `:space_invader:`\n:video_game: - `:video_game:`\n:black_joker: - `:black_joker:`\n:flower_playing_cards: - `:flower_playing_cards:`\n:game_die: - `:game_die:`\n:dart: - `:dart:`\n:mahjong: - `:mahjong:`\n:clapper: - `:clapper:`\n:memo: - `:memo:`\n:pencil: - `:pencil:`\n:book: - `:book:`\n:art: - `:art:`\n:microphone: - `:microphone:`\n:headphones: - `:headphones:`\n:trumpet: - `:trumpet:`\n:saxophone: - `:saxophone:`\n:guitar: - `:guitar:`\n:shoe: - `:shoe:`\n:sandal: - `:sandal:`\n:high_heel: - `:high_heel:`\n:lipstick: - `:lipstick:`\n:boot: - `:boot:`\n:shirt: - `:shirt:`\n:tshirt: - `:tshirt:`\n:necktie: - `:necktie:`\n:womans_clothes: - `:womans_clothes:`\n:dress: - `:dress:`\n:running_shirt_with_sash: - `:running_shirt_with_sash:`\n:jeans: - `:jeans:`\n:kimono: - `:kimono:`\n:bikini: - `:bikini:`\n:ribbon: - `:ribbon:`\n:tophat: - `:tophat:`\n:crown: - `:crown:`\n:womans_hat: - `:womans_hat:`\n:mans_shoe: - `:mans_shoe:`\n:closed_umbrella: - `:closed_umbrella:`\n:briefcase: - `:briefcase:`\n:handbag: - `:handbag:`\n:pouch: - `:pouch:`\n:purse: - `:purse:`\n:eyeglasses: - `:eyeglasses:`\n:fishing_pole_and_fish: - `:fishing_pole_and_fish:`\n:coffee: - `:coffee:`\n:tea: - `:tea:`\n:sake: - `:sake:`\n:baby_bottle: - `:baby_bottle:`\n:beer: - `:beer:`\n:beers: - `:beers:`\n:cocktail: - `:cocktail:`\n:tropical_drink: - `:tropical_drink:`\n:wine_glass: - `:wine_glass:`\n:fork_and_knife: - `:fork_and_knife:`\n:pizza: - `:pizza:`\n:hamburger: - `:hamburger:`\n:fries: - `:fries:`\n:poultry_leg: - `:poultry_leg:`\n:meat_on_bone: - `:meat_on_bone:`\n:spaghetti: - `:spaghetti:`\n:curry: - `:curry:`\n:fried_shrimp: - `:fried_shrimp:`\n:bento: - `:bento:`\n:sushi: - `:sushi:`\n:fish_cake: - `:fish_cake:`\n:rice_ball: - `:rice_ball:`\n:rice_cracker: - `:rice_cracker:`\n:rice: - `:rice:`\n:ramen: - `:ramen:`\n:stew: - `:stew:`\n:oden: - `:oden:`\n:dango: - `:dango:`\n:egg: - `:egg:`\n:bread: - `:bread:`\n:doughnut: - `:doughnut:`\n:custard: - `:custard:`\n:icecream: - `:icecream:`\n:ice_cream: - `:ice_cream:`\n:shaved_ice: - `:shaved_ice:`\n:birthday: - `:birthday:`\n:cake: - `:cake:`\n:cookie: - `:cookie:`\n:chocolate_bar: - `:chocolate_bar:`\n:candy: - `:candy:`\n:lollipop: - `:lollipop:`\n:honey_pot: - `:honey_pot:`\n:apple: - `:apple:`\n:green_apple: - `:green_apple:`\n:tangerine: - `:tangerine:`\n:lemon: - `:lemon:`\n:cherries: - `:cherries:`\n:grapes: - `:grapes:`\n:watermelon: - `:watermelon:`\n:strawberry: - `:strawberry:`\n:peach: - `:peach:`\n:melon: - `:melon:`\n:banana: - `:banana:`\n:pear: - `:pear:`\n:pineapple: - `:pineapple:`\n:sweet_potato: - `:sweet_potato:`\n:eggplant: - `:eggplant:`\n:tomato: - `:tomato:`\n:corn: - `:corn:`\n\n### Places\n\n:house: - `:house:`\n:house_with_garden: - `:house_with_garden:`\n:school: - `:school:`\n:office: - `:office:`\n:post_office: - `:post_office:`\n:hospital: - `:hospital:`\n:bank: - `:bank:`\n:convenience_store: - `:convenience_store:`\n:love_hotel: - `:love_hotel:`\n:hotel: - `:hotel:`\n:wedding: - `:wedding:`\n:church: - `:church:`\n:department_store: - `:department_store:`\n:european_post_office: - `:european_post_office:`\n:city_sunrise: - `:city_sunrise:`\n:city_sunset: - `:city_sunset:`\n:japanese_castle: - `:japanese_castle:`\n:european_castle: - `:european_castle:`\n:tent: - `:tent:`\n:factory: - `:factory:`\n:tokyo_tower: - `:tokyo_tower:`\n:japan: - `:japan:`\n:mount_fuji: - `:mount_fuji:`\n:sunrise_over_mountains: - `:sunrise_over_mountains:`\n:sunrise: - `:sunrise:`\n:stars: - `:stars:`\n:statue_of_liberty: - `:statue_of_liberty:`\n:bridge_at_night: - `:bridge_at_night:`\n:carousel_horse: - `:carousel_horse:`\n:rainbow: - `:rainbow:`\n:ferris_wheel: - `:ferris_wheel:`\n:fountain: - `:fountain:`\n:roller_coaster: - `:roller_coaster:`\n:ship: - `:ship:`\n:speedboat: - `:speedboat:`\n:boat: - `:boat:`\n:sailboat: - `:sailboat:`\n:rowboat: - `:rowboat:`\n:anchor: - `:anchor:`\n:rocket: - `:rocket:`\n:airplane: - `:airplane:`\n:helicopter: - `:helicopter:`\n:steam_locomotive: - `:steam_locomotive:`\n:tram: - `:tram:`\n:mountain_railway: - `:mountain_railway:`\n:bike: - `:bike:`\n:aerial_tramway: - `:aerial_tramway:`\n:suspension_railway: - `:suspension_railway:`\n:mountain_cableway: - `:mountain_cableway:`\n:tractor: - `:tractor:`\n:blue_car: - `:blue_car:`\n:oncoming_automobile: - `:oncoming_automobile:`\n:car: - `:car:`\n:red_car: - `:red_car:`\n:taxi: - `:taxi:`\n:oncoming_taxi: - `:oncoming_taxi:`\n:articulated_lorry: - `:articulated_lorry:`\n:bus: - `:bus:`\n:oncoming_bus: - `:oncoming_bus:`\n:rotating_light: - `:rotating_light:`\n:police_car: - `:police_car:`\n:oncoming_police_car: - `:oncoming_police_car:`\n:fire_engine: - `:fire_engine:`\n:ambulance: - `:ambulance:`\n:minibus: - `:minibus:`\n:truck: - `:truck:`\n:train: - `:train:`\n:station: - `:station:`\n:train2: - `:train2:`\n:bullettrain_front: - `:bullettrain_front:`\n:bullettrain_side: - `:bullettrain_side:`\n:light_rail: - `:light_rail:`\n:monorail: - `:monorail:`\n:railway_car: - `:railway_car:`\n:trolleybus: - `:trolleybus:`\n:ticket: - `:ticket:`\n:fuelpump: - `:fuelpump:`\n:vertical_traffic_light: - `:vertical_traffic_light:`\n:traffic_light: - `:traffic_light:`\n:warning: - `:warning:`\n:construction: - `:construction:`\n:beginner: - `:beginner:`\n:atm: - `:atm:`\n:slot_machine: - `:slot_machine:`\n:busstop: - `:busstop:`\n:barber: - `:barber:`\n:hotsprings: - `:hotsprings:`\n:checkered_flag: - `:checkered_flag:`\n:crossed_flags: - `:crossed_flags:`\n:izakaya_lantern: - `:izakaya_lantern:`\n:moyai: - `:moyai:`\n:circus_tent: - `:circus_tent:`\n:performing_arts: - `:performing_arts:`\n:round_pushpin: - `:round_pushpin:`\n:triangular_flag_on_post: - `:triangular_flag_on_post:`\n:jp: - `:jp:`\n:kr: - `:kr:`\n:cn: - `:cn:`\n:us: - `:us:`\n:fr: - `:fr:`\n:es: - `:es:`\n:it: - `:it:`\n:ru: - `:ru:`\n:gb: - `:gb:`\n:uk: - `:uk:`\n:de: - `:de:`\n\n### Symbols\n\n:one: - `:one:`\n:two: - `:two:`\n:three: - `:three:`\n:four: - `:four:`\n:five: - `:five:`\n:six: - `:six:`\n:seven: - `:seven:`\n:eight: - `:eight:`\n:nine: - `:nine:`\n:keycap_ten: - `:keycap_ten:`\n:1234: - `:1234:`\n:zero: - `:zero:`\n:hash: - `:hash:`\n:symbols: - `:symbols:`\n:arrow_backward: - `:arrow_backward:`\n:arrow_down: - `:arrow_down:`\n:arrow_forward: - `:arrow_forward:`\n:arrow_left: - `:arrow_left:`\n:capital_abcd: - `:capital_abcd:`\n:abcd: - `:abcd:`\n:abc: - `:abc:`\n:arrow_lower_left: - `:arrow_lower_left:`\n:arrow_lower_right: - `:arrow_lower_right:`\n:arrow_right: - `:arrow_right:`\n:arrow_up: - `:arrow_up:`\n:arrow_upper_left: - `:arrow_upper_left:`\n:arrow_upper_right: - `:arrow_upper_right:`\n:arrow_double_down: - `:arrow_double_down:`\n:arrow_double_up: - `:arrow_double_up:`\n:arrow_down_small: - `:arrow_down_small:`\n:arrow_heading_down: - `:arrow_heading_down:`\n:arrow_heading_up: - `:arrow_heading_up:`\n:leftwards_arrow_with_hook: - `:leftwards_arrow_with_hook:`\n:arrow_right_hook: - `:arrow_right_hook:`\n:left_right_arrow: - `:left_right_arrow:`\n:arrow_up_down: - `:arrow_up_down:`\n:arrow_up_small: - `:arrow_up_small:`\n:arrows_clockwise: - `:arrows_clockwise:`\n:arrows_counterclockwise: - `:arrows_counterclockwise:`\n:rewind: - `:rewind:`\n:fast_forward: - `:fast_forward:`\n:information_source: - `:information_source:`\n:ok: - `:ok:`\n:twisted_rightwards_arrows: - `:twisted_rightwards_arrows:`\n:repeat: - `:repeat:`\n:repeat_one: - `:repeat_one:`\n:new: - `:new:`\n:top: - `:top:`\n:up: - `:up:`\n:cool: - `:cool:`\n:free: - `:free:`\n:ng: - `:ng:`\n:cinema: - `:cinema:`\n:koko: - `:koko:`\n:signal_strength: - `:signal_strength:`\n:u5272: - `:u5272:`\n:u5408: - `:u5408:`\n:u55b6: - `:u55b6:`\n:u6307: - `:u6307:`\n:u6708: - `:u6708:`\n:u6709: - `:u6709:`\n:u6e80: - `:u6e80:`\n:u7121: - `:u7121:`\n:u7533: - `:u7533:`\n:u7a7a: - `:u7a7a:`\n:u7981: - `:u7981:`\n:sa: - `:sa:`\n:restroom: - `:restroom:`\n:mens: - `:mens:`\n:womens: - `:womens:`\n:baby_symbol: - `:baby_symbol:`\n:no_smoking: - `:no_smoking:`\n:parking: - `:parking:`\n:wheelchair: - `:wheelchair:`\n:metro: - `:metro:`\n:baggage_claim: - `:baggage_claim:`\n:accept: - `:accept:`\n:wc: - `:wc:`\n:potable_water: - `:potable_water:`\n:put_litter_in_its_place: - `:put_litter_in_its_place:`\n:secret: - `:secret:`\n:congratulations: - `:congratulations:`\n:m: - `:m:`\n:passport_control: - `:passport_control:`\n:left_luggage: - `:left_luggage:`\n:customs: - `:customs:`\n:ideograph_advantage: - `:ideograph_advantage:`\n:cl: - `:cl:`\n:sos: - `:sos:`\n:id: - `:id:`\n:no_entry_sign: - `:no_entry_sign:`\n:underage: - `:underage:`\n:no_mobile_phones: - `:no_mobile_phones:`\n:do_not_litter: - `:do_not_litter:`\n:non-potable_water: - `:non-potable_water:`\n:no_bicycles: - `:no_bicycles:`\n:no_pedestrians: - `:no_pedestrians:`\n:children_crossing: - `:children_crossing:`\n:no_entry: - `:no_entry:`\n:eight_spoked_asterisk: - `:eight_spoked_asterisk:`\n:sparkle: - `:sparkle:`\n:eight_pointed_black_star: - `:eight_pointed_black_star:`\n:heart_decoration: - `:heart_decoration:`\n:vs: - `:vs:`\n:vibration_mode: - `:vibration_mode:`\n:mobile_phone_off: - `:mobile_phone_off:`\n:chart: - `:chart:`\n:currency_exchange: - `:currency_exchange:`\n:aries: - `:aries:`\n:taurus: - `:taurus:`\n:gemini: - `:gemini:`\n:cancer: - `:cancer:`\n:leo: - `:leo:`\n:virgo: - `:virgo:`\n:libra: - `:libra:`\n:scorpius: - `:scorpius:`\n:sagittarius: - `:sagittarius:`\n:capricorn: - `:capricorn:`\n:aquarius: - `:aquarius:`\n:pisces: - `:pisces:`\n:ophiuchus: - `:ophiuchus:`\n:six_pointed_star: - `:six_pointed_star:`\n:negative_squared_cross_mark: - `:negative_squared_cross_mark:`\n:a: - `:a:`\n:b: - `:b:`\n:ab: - `:ab:`\n:o2: - `:o2:`\n:diamond_shape_with_a_dot_inside: - `:diamond_shape_with_a_dot_inside:`\n:recycle: - `:recycle:`\n:end: - `:end:`\n:back: - `:back:`\n:on: - `:on:`\n:soon: - `:soon:`\n:clock1: - `:clock1:`\n:clock130: - `:clock130:`\n:clock10: - `:clock10:`\n:clock1030: - `:clock1030:`\n:clock11: - `:clock11:`\n:clock1130: - `:clock1130:`\n:clock12: - `:clock12:`\n:clock1230: - `:clock1230:`\n:clock2: - `:clock2:`\n:clock230: - `:clock230:`\n:clock3: - `:clock3:`\n:clock330: - `:clock330:`\n:clock4: - `:clock4:`\n:clock430: - `:clock430:`\n:clock5: - `:clock5:`\n:clock530: - `:clock530:`\n:clock6: - `:clock6:`\n:clock630: - `:clock630:`\n:clock7: - `:clock7:`\n:clock730: - `:clock730:`\n:clock8: - `:clock8:`\n:clock830: - `:clock830:`\n:clock9: - `:clock9:`\n:clock930: - `:clock930:`\n:heavy_dollar_sign: - `:heavy_dollar_sign:`\n:copyright: - `:copyright:`\n:registered: - `:registered:`\n:tm: - `:tm:`\n:x: - `:x:`\n:heavy_exclamation_mark: - `:heavy_exclamation_mark:`\n:bangbang: - `:bangbang:`\n:interrobang: - `:interrobang:`\n:o: - `:o:`\n:heavy_multiplication_x: - `:heavy_multiplication_x:`\n:heavy_plus_sign: - `:heavy_plus_sign:`\n:heavy_minus_sign: - `:heavy_minus_sign:`\n:heavy_division_sign: - `:heavy_division_sign:`\n:white_flower: - `:white_flower:`\n:100: - `:100:`\n:heavy_check_mark: - `:heavy_check_mark:`\n:ballot_box_with_check: - `:ballot_box_with_check:`\n:radio_button: - `:radio_button:`\n:link: - `:link:`\n:curly_loop: - `:curly_loop:`\n:wavy_dash: - `:wavy_dash:`\n:part_alternation_mark: - `:part_alternation_mark:`\n:trident: - `:trident:`\n:black_small_square: - `:black_small_square:`\n:white_small_square: - `:white_small_square:`\n:black_medium_small_square: - `:black_medium_small_square:`\n:white_medium_small_square: - `:white_medium_small_square:`\n:black_medium_square: - `:black_medium_square:`\n:white_medium_square: - `:white_medium_square:`\n:black_large_square: - `:black_large_square:`\n:white_large_square: - `:white_large_square:`\n:white_check_mark: - `:white_check_mark:`\n:black_square_button: - `:black_square_button:`\n:white_square_button: - `:white_square_button:`\n:black_circle: - `:black_circle:`\n:white_circle: - `:white_circle:`\n:red_circle: - `:red_circle:`\n:large_blue_circle: - `:large_blue_circle:`\n:large_blue_diamond: - `:large_blue_diamond:`\n:large_orange_diamond: - `:large_orange_diamond:`\n:small_blue_diamond: - `:small_blue_diamond:`\n:small_orange_diamond: - `:small_orange_diamond:`\n:small_red_triangle: - `:small_red_triangle:`\n:small_red_triangle_down: - `:small_red_triangle_down:`\n:shipit: - `:shipit:`","source":"_posts/emoji-cheat-sheet.md","raw":"---\ntitle: emoji-cheat-sheet\ndate: 2016-12-26 23:05:51\ntags: [emoji]\n---\n\n> [emoji-cheat-sheet](http://www.webpagefx.com/tools/emoji-cheat-sheet/)  \n> [emoji.codes](http://emoji.codes/#)  \n\n### People\n\n:bowtie: - `:bowtie:`\n:smile: - `:smile:`\n:laughing: - `:laughing:`\n:blush: - `:blush:`\n:smiley: - `:smiley:`\n:relaxed: - `:relaxed:`\n:smirk: - `:smirk:`\n:heart_eyes: - `:heart_eyes:`\n:kissing_heart: - `:kissing_heart:`\n<!-- more -->\n:kissing_closed_eyes: - `:kissing_closed_eyes:`\n:flushed: - `:flushed:`\n:relieved: - `:relieved:`\n:satisfied: - `:satisfied:`\n:grin: - `:grin:`\n:wink: - `:wink:`\n:stuck_out_tongue_winking_eye: - `:stuck_out_tongue_winking_eye:`\n:stuck_out_tongue_closed_eyes: - `:stuck_out_tongue_closed_eyes:`\n:grinning: - `:grinning:`\n:kissing: - `:kissing:`\n:kissing_smiling_eyes: - `:kissing_smiling_eyes:`\n:stuck_out_tongue: - `:stuck_out_tongue:`\n:sleeping: - `:sleeping:`\n:worried: - `:worried:`\n:frowning: - `:frowning:`\n:anguished: - `:anguished:`\n:open_mouth: - `:open_mouth:`\n:grimacing: - `:grimacing:`\n:confused: - `:confused:`\n:hushed: - `:hushed:`\n:expressionless: - `:expressionless:`\n:unamused: - `:unamused:`\n:sweat_smile: - `:sweat_smile:`\n:sweat: - `:sweat:`\n:disappointed_relieved: - `:disappointed_relieved:`\n:weary: - `:weary:`\n:pensive: - `:pensive:`\n:disappointed: - `:disappointed:`\n:confounded: - `:confounded:`\n:fearful: - `:fearful:`\n:cold_sweat: - `:cold_sweat:`\n:persevere: - `:persevere:`\n:cry: - `:cry:`\n:sob: - `:sob:`\n:joy: - `:joy:`\n:astonished: - `:astonished:`\n:scream: - `:scream:`\n:neckbeard: - `:neckbeard:`\n:tired_face: - `:tired_face:`\n:angry: - `:angry:`\n:rage: - `:rage:`\n:triumph: - `:triumph:`\n:sleepy: - `:sleepy:`\n:yum: - `:yum:`\n:mask: - `:mask:`\n:sunglasses: - `:sunglasses:`\n:dizzy_face: - `:dizzy_face:`\n:imp: - `:imp:`\n:smiling_imp: - `:smiling_imp:`\n:neutral_face: - `:neutral_face:`\n:no_mouth: - `:no_mouth:`\n:innocent: - `:innocent:`\n:alien: - `:alien:`\n:yellow_heart: - `:yellow_heart:`\n:blue_heart: - `:blue_heart:`\n:purple_heart: - `:purple_heart:`\n:heart: - `:heart:`\n:green_heart: - `:green_heart:`\n:broken_heart: - `:broken_heart:`\n:heartbeat: - `:heartbeat:`\n:heartpulse: - `:heartpulse:`\n:two_hearts: - `:two_hearts:`\n:revolving_hearts: - `:revolving_hearts:`\n:cupid: - `:cupid:`\n:sparkling_heart: - `:sparkling_heart:`\n:sparkles: - `:sparkles:`\n:star: - `:star:`\n:star2: - `:star2:`\n:dizzy: - `:dizzy:`\n:boom: - `:boom:`\n:collision: - `:collision:`\n:anger: - `:anger:`\n:exclamation: - `:exclamation:`\n:question: - `:question:`\n:grey_exclamation: - `:grey_exclamation:`\n:grey_question: - `:grey_question:`\n:zzz: - `:zzz:`\n:dash: - `:dash:`\n:sweat_drops: - `:sweat_drops:`\n:notes: - `:notes:`\n:musical_note: - `:musical_note:`\n:fire: - `:fire:`\n:hankey: - `:hankey:`\n:poop: - `:poop:`\n:shit: - `:shit:`\n:+1: - `:+1:`\n:thumbsup: - `:thumbsup:`\n:-1: - `:-1:`\n:thumbsdown: - `:thumbsdown:`\n:ok_hand: - `:ok_hand:`\n:punch: - `:punch:`\n:facepunch: - `:facepunch:`\n:fist: - `:fist:`\n:v: - `:v:`\n:wave: - `:wave:`\n:hand: - `:hand:`\n:raised_hand: - `:raised_hand:`\n:open_hands: - `:open_hands:`\n:point_up: - `:point_up:`\n:point_down: - `:point_down:`\n:point_left: - `:point_left:`\n:point_right: - `:point_right:`\n:raised_hands: - `:raised_hands:`\n:pray: - `:pray:`\n:point_up_2: - `:point_up_2:`\n:clap: - `:clap:`\n:muscle: - `:muscle:`\n:metal: - `:metal:`\n:fu: - `:fu:`\n:runner: - `:runner:`\n:running: - `:running:`\n:couple: - `:couple:`\n:family: - `:family:`\n:two_men_holding_hands: - `:two_men_holding_hands:`\n:two_women_holding_hands: - `:two_women_holding_hands:`\n:dancer: - `:dancer:`\n:dancers: - `:dancers:`\n:ok_woman: - `:ok_woman:`\n:no_good: - `:no_good:`\n:information_desk_person: - `:information_desk_person:`\n:raising_hand: - `:raising_hand:`\n:bride_with_veil: - `:bride_with_veil:`\n:person_with_pouting_face: - `:person_with_pouting_face:`\n:person_frowning: - `:person_frowning:`\n:bow: - `:bow:`\n:couplekiss: - `:couplekiss:`\n:couple_with_heart: - `:couple_with_heart:`\n:massage: - `:massage:`\n:haircut: - `:haircut:`\n:nail_care: - `:nail_care:`\n:boy: - `:boy:`\n:girl: - `:girl:`\n:woman: - `:woman:`\n:man: - `:man:`\n:baby: - `:baby:`\n:older_woman: - `:older_woman:`\n:older_man: - `:older_man:`\n:person_with_blond_hair: - `:person_with_blond_hair:`\n:man_with_gua_pi_mao: - `:man_with_gua_pi_mao:`\n:man_with_turban: - `:man_with_turban:`\n:construction_worker: - `:construction_worker:`\n:cop: - `:cop:`\n:angel: - `:angel:`\n:princess: - `:princess:`\n:smiley_cat: - `:smiley_cat:`\n:smile_cat: - `:smile_cat:`\n:heart_eyes_cat: - `:heart_eyes_cat:`\n:kissing_cat: - `:kissing_cat:`\n:smirk_cat: - `:smirk_cat:`\n:scream_cat: - `:scream_cat:`\n:crying_cat_face: - `:crying_cat_face:`\n:joy_cat: - `:joy_cat:`\n:pouting_cat: - `:pouting_cat:`\n:japanese_ogre: - `:japanese_ogre:`\n:japanese_goblin: - `:japanese_goblin:`\n:see_no_evil: - `:see_no_evil:`\n:hear_no_evil: - `:hear_no_evil:`\n:speak_no_evil: - `:speak_no_evil:`\n:guardsman: - `:guardsman:`\n:skull: - `:skull:`\n:feet: - `:feet:`\n:lips: - `:lips:`\n:kiss: - `:kiss:`\n:droplet: - `:droplet:`\n:ear: - `:ear:`\n:eyes: - `:eyes:`\n:nose: - `:nose:`\n:tongue: - `:tongue:`\n:love_letter: - `:love_letter:`\n:bust_in_silhouette: - `:bust_in_silhouette:`\n:busts_in_silhouette: - `:busts_in_silhouette:`\n:speech_balloon: - `:speech_balloon:`\n:thought_balloon: - `:thought_balloon:`\n:feelsgood: - `:feelsgood:`\n:finnadie: - `:finnadie:`\n:goberserk: - `:goberserk:`\n:godmode: - `:godmode:`\n:hurtrealbad: - `:hurtrealbad:`\n:rage1: - `:rage1:`\n:rage2: - `:rage2:`\n:rage3: - `:rage3:`\n:rage4: - `:rage4:`\n:suspect: - `:suspect:`\n:trollface: - `:trollface:`\n\n### Nature\n\n:sunny: - `:sunny:`\n:umbrella: - `:umbrella:`\n:cloud: - `:cloud:`\n:snowflake: - `:snowflake:`\n:snowman: - `:snowman:`\n:zap: - `:zap:`\n:cyclone: - `:cyclone:`\n:foggy: - `:foggy:`\n:ocean: - `:ocean:`\n:cat: - `:cat:`\n:dog: - `:dog:`\n:mouse: - `:mouse:`\n:hamster: - `:hamster:`\n:rabbit: - `:rabbit:`\n:wolf: - `:wolf:`\n:frog: - `:frog:`\n:tiger: - `:tiger:`\n:koala: - `:koala:`\n:bear: - `:bear:`\n:pig: - `:pig:`\n:pig_nose: - `:pig_nose:`\n:cow: - `:cow:`\n:boar: - `:boar:`\n:monkey_face: - `:monkey_face:`\n:monkey: - `:monkey:`\n:horse: - `:horse:`\n:racehorse: - `:racehorse:`\n:camel: - `:camel:`\n:sheep: - `:sheep:`\n:elephant: - `:elephant:`\n:panda_face: - `:panda_face:`\n:snake: - `:snake:`\n:bird: - `:bird:`\n:baby_chick: - `:baby_chick:`\n:hatched_chick: - `:hatched_chick:`\n:hatching_chick: - `:hatching_chick:`\n:chicken: - `:chicken:`\n:penguin: - `:penguin:`\n:turtle: - `:turtle:`\n:bug: - `:bug:`\n:honeybee: - `:honeybee:`\n:ant: - `:ant:`\n:beetle: - `:beetle:`\n:snail: - `:snail:`\n:octopus: - `:octopus:`\n:tropical_fish: - `:tropical_fish:`\n:fish: - `:fish:`\n:whale: - `:whale:`\n:whale2: - `:whale2:`\n:dolphin: - `:dolphin:`\n:cow2: - `:cow2:`\n:ram: - `:ram:`\n:rat: - `:rat:`\n:water_buffalo: - `:water_buffalo:`\n:tiger2: - `:tiger2:`\n:rabbit2: - `:rabbit2:`\n:dragon: - `:dragon:`\n:goat: - `:goat:`\n:rooster: - `:rooster:`\n:dog2: - `:dog2:`\n:pig2: - `:pig2:`\n:mouse2: - `:mouse2:`\n:ox: - `:ox:`\n:dragon_face: - `:dragon_face:`\n:blowfish: - `:blowfish:`\n:crocodile: - `:crocodile:`\n:dromedary_camel: - `:dromedary_camel:`\n:leopard: - `:leopard:`\n:cat2: - `:cat2:`\n:poodle: - `:poodle:`\n:paw_prints: - `:paw_prints:`\n:bouquet: - `:bouquet:`\n:cherry_blossom: - `:cherry_blossom:`\n:tulip: - `:tulip:`\n:four_leaf_clover: - `:four_leaf_clover:`\n:rose: - `:rose:`\n:sunflower: - `:sunflower:`\n:hibiscus: - `:hibiscus:`\n:maple_leaf: - `:maple_leaf:`\n:leaves: - `:leaves:`\n:fallen_leaf: - `:fallen_leaf:`\n:herb: - `:herb:`\n:mushroom: - `:mushroom:`\n:cactus: - `:cactus:`\n:palm_tree: - `:palm_tree:`\n:evergreen_tree: - `:evergreen_tree:`\n:deciduous_tree: - `:deciduous_tree:`\n:chestnut: - `:chestnut:`\n:seedling: - `:seedling:`\n:blossom: - `:blossom:`\n:ear_of_rice: - `:ear_of_rice:`\n:shell: - `:shell:`\n:globe_with_meridians: - `:globe_with_meridians:`\n:sun_with_face: - `:sun_with_face:`\n:full_moon_with_face: - `:full_moon_with_face:`\n:new_moon_with_face: - `:new_moon_with_face:`\n:new_moon: - `:new_moon:`\n:waxing_crescent_moon: - `:waxing_crescent_moon:`\n:first_quarter_moon: - `:first_quarter_moon:`\n:waxing_gibbous_moon: - `:waxing_gibbous_moon:`\n:full_moon: - `:full_moon:`\n:waning_gibbous_moon: - `:waning_gibbous_moon:`\n:last_quarter_moon: - `:last_quarter_moon:`\n:waning_crescent_moon: - `:waning_crescent_moon:`\n:last_quarter_moon_with_face: - `:last_quarter_moon_with_face:`\n:first_quarter_moon_with_face: - `:first_quarter_moon_with_face:`\n:crescent_moon: - `:crescent_moon:`\n:earth_africa: - `:earth_africa:`\n:earth_americas: - `:earth_americas:`\n:earth_asia: - `:earth_asia:`\n:volcano: - `:volcano:`\n:milky_way: - `:milky_way:`\n:partly_sunny: - `:partly_sunny:`\n:octocat: - `:octocat:`\n:squirrel: - `:squirrel:`\n\n### Objects\n\n:bamboo: - `:bamboo:`\n:gift_heart: - `:gift_heart:`\n:dolls: - `:dolls:`\n:school_satchel: - `:school_satchel:`\n:mortar_board: - `:mortar_board:`\n:flags: - `:flags:`\n:fireworks: - `:fireworks:`\n:sparkler: - `:sparkler:`\n:wind_chime: - `:wind_chime:`\n:rice_scene: - `:rice_scene:`\n:jack_o_lantern: - `:jack_o_lantern:`\n:ghost: - `:ghost:`\n:santa: - `:santa:`\n:christmas_tree: - `:christmas_tree:`\n:gift: - `:gift:`\n:bell: - `:bell:`\n:no_bell: - `:no_bell:`\n:tanabata_tree: - `:tanabata_tree:`\n:tada: - `:tada:`\n:confetti_ball: - `:confetti_ball:`\n:balloon: - `:balloon:`\n:crystal_ball: - `:crystal_ball:`\n:cd: - `:cd:`\n:dvd: - `:dvd:`\n:floppy_disk: - `:floppy_disk:`\n:camera: - `:camera:`\n:video_camera: - `:video_camera:`\n:movie_camera: - `:movie_camera:`\n:computer: - `:computer:`\n:tv: - `:tv:`\n:iphone: - `:iphone:`\n:phone: - `:phone:`\n:telephone: - `:telephone:`\n:telephone_receiver: - `:telephone_receiver:`\n:pager: - `:pager:`\n:fax: - `:fax:`\n:minidisc: - `:minidisc:`\n:vhs: - `:vhs:`\n:sound: - `:sound:`\n:speaker: - `:speaker:`\n:mute: - `:mute:`\n:loudspeaker: - `:loudspeaker:`\n:mega: - `:mega:`\n:hourglass: - `:hourglass:`\n:hourglass_flowing_sand: - `:hourglass_flowing_sand:`\n:alarm_clock: - `:alarm_clock:`\n:watch: - `:watch:`\n:radio: - `:radio:`\n:satellite: - `:satellite:`\n:loop: - `:loop:`\n:mag: - `:mag:`\n:mag_right: - `:mag_right:`\n:unlock: - `:unlock:`\n:lock: - `:lock:`\n:lock_with_ink_pen: - `:lock_with_ink_pen:`\n:closed_lock_with_key: - `:closed_lock_with_key:`\n:key: - `:key:`\n:bulb: - `:bulb:`\n:flashlight: - `:flashlight:`\n:high_brightness: - `:high_brightness:`\n:low_brightness: - `:low_brightness:`\n:electric_plug: - `:electric_plug:`\n:battery: - `:battery:`\n:calling: - `:calling:`\n:email: - `:email:`\n:mailbox: - `:mailbox:`\n:postbox: - `:postbox:`\n:bath: - `:bath:`\n:bathtub: - `:bathtub:`\n:shower: - `:shower:`\n:toilet: - `:toilet:`\n:wrench: - `:wrench:`\n:nut_and_bolt: - `:nut_and_bolt:`\n:hammer: - `:hammer:`\n:seat: - `:seat:`\n:moneybag: - `:moneybag:`\n:yen: - `:yen:`\n:dollar: - `:dollar:`\n:pound: - `:pound:`\n:euro: - `:euro:`\n:credit_card: - `:credit_card:`\n:money_with_wings: - `:money_with_wings:`\n:e-mail: - `:e-mail:`\n:inbox_tray: - `:inbox_tray:`\n:outbox_tray: - `:outbox_tray:`\n:envelope: - `:envelope:`\n:incoming_envelope: - `:incoming_envelope:`\n:postal_horn: - `:postal_horn:`\n:mailbox_closed: - `:mailbox_closed:`\n:mailbox_with_mail: - `:mailbox_with_mail:`\n:mailbox_with_no_mail: - `:mailbox_with_no_mail:`\n:package: - `:package:`\n:door: - `:door:`\n:smoking: - `:smoking:`\n:bomb: - `:bomb:`\n:gun: - `:gun:`\n:hocho: - `:hocho:`\n:pill: - `:pill:`\n:syringe: - `:syringe:`\n:page_facing_up: - `:page_facing_up:`\n:page_with_curl: - `:page_with_curl:`\n:bookmark_tabs: - `:bookmark_tabs:`\n:bar_chart: - `:bar_chart:`\n:chart_with_upwards_trend: - `:chart_with_upwards_trend:`\n:chart_with_downwards_trend: - `:chart_with_downwards_trend:`\n:scroll: - `:scroll:`\n:clipboard: - `:clipboard:`\n:calendar: - `:calendar:`\n:date: - `:date:`\n:card_index: - `:card_index:`\n:file_folder: - `:file_folder:`\n:open_file_folder: - `:open_file_folder:`\n:scissors: - `:scissors:`\n:pushpin: - `:pushpin:`\n:paperclip: - `:paperclip:`\n:black_nib: - `:black_nib:`\n:pencil2: - `:pencil2:`\n:straight_ruler: - `:straight_ruler:`\n:triangular_ruler: - `:triangular_ruler:`\n:closed_book: - `:closed_book:`\n:green_book: - `:green_book:`\n:blue_book: - `:blue_book:`\n:orange_book: - `:orange_book:`\n:notebook: - `:notebook:`\n:notebook_with_decorative_cover: - `:notebook_with_decorative_cover:`\n:ledger: - `:ledger:`\n:books: - `:books:`\n:bookmark: - `:bookmark:`\n:name_badge: - `:name_badge:`\n:microscope: - `:microscope:`\n:telescope: - `:telescope:`\n:newspaper: - `:newspaper:`\n:football: - `:football:`\n:basketball: - `:basketball:`\n:soccer: - `:soccer:`\n:baseball: - `:baseball:`\n:tennis: - `:tennis:`\n:8ball: - `:8ball:`\n:8ball: - `:8ball:`\n:rugby_football: - `:rugby_football:`\n:bowling: - `:bowling:`\n:golf: - `:golf:`\n:mountain_bicyclist: - `:mountain_bicyclist:`\n:bicyclist: - `:bicyclist:`\n:horse_racing: - `:horse_racing:`\n:snowboarder: - `:snowboarder:`\n:swimmer: - `:swimmer:`\n:surfer: - `:surfer:`\n:ski: - `:ski:`\n:spades: - `:spades:`\n:hearts: - `:hearts:`\n:clubs: - `:clubs:`\n:diamonds: - `:diamonds:`\n:gem: - `:gem:`\n:ring: - `:ring:`\n:trophy: - `:trophy:`\n:musical_score: - `:musical_score:`\n:musical_keyboard: - `:musical_keyboard:`\n:violin: - `:violin:`\n:space_invader: - `:space_invader:`\n:video_game: - `:video_game:`\n:black_joker: - `:black_joker:`\n:flower_playing_cards: - `:flower_playing_cards:`\n:game_die: - `:game_die:`\n:dart: - `:dart:`\n:mahjong: - `:mahjong:`\n:clapper: - `:clapper:`\n:memo: - `:memo:`\n:pencil: - `:pencil:`\n:book: - `:book:`\n:art: - `:art:`\n:microphone: - `:microphone:`\n:headphones: - `:headphones:`\n:trumpet: - `:trumpet:`\n:saxophone: - `:saxophone:`\n:guitar: - `:guitar:`\n:shoe: - `:shoe:`\n:sandal: - `:sandal:`\n:high_heel: - `:high_heel:`\n:lipstick: - `:lipstick:`\n:boot: - `:boot:`\n:shirt: - `:shirt:`\n:tshirt: - `:tshirt:`\n:necktie: - `:necktie:`\n:womans_clothes: - `:womans_clothes:`\n:dress: - `:dress:`\n:running_shirt_with_sash: - `:running_shirt_with_sash:`\n:jeans: - `:jeans:`\n:kimono: - `:kimono:`\n:bikini: - `:bikini:`\n:ribbon: - `:ribbon:`\n:tophat: - `:tophat:`\n:crown: - `:crown:`\n:womans_hat: - `:womans_hat:`\n:mans_shoe: - `:mans_shoe:`\n:closed_umbrella: - `:closed_umbrella:`\n:briefcase: - `:briefcase:`\n:handbag: - `:handbag:`\n:pouch: - `:pouch:`\n:purse: - `:purse:`\n:eyeglasses: - `:eyeglasses:`\n:fishing_pole_and_fish: - `:fishing_pole_and_fish:`\n:coffee: - `:coffee:`\n:tea: - `:tea:`\n:sake: - `:sake:`\n:baby_bottle: - `:baby_bottle:`\n:beer: - `:beer:`\n:beers: - `:beers:`\n:cocktail: - `:cocktail:`\n:tropical_drink: - `:tropical_drink:`\n:wine_glass: - `:wine_glass:`\n:fork_and_knife: - `:fork_and_knife:`\n:pizza: - `:pizza:`\n:hamburger: - `:hamburger:`\n:fries: - `:fries:`\n:poultry_leg: - `:poultry_leg:`\n:meat_on_bone: - `:meat_on_bone:`\n:spaghetti: - `:spaghetti:`\n:curry: - `:curry:`\n:fried_shrimp: - `:fried_shrimp:`\n:bento: - `:bento:`\n:sushi: - `:sushi:`\n:fish_cake: - `:fish_cake:`\n:rice_ball: - `:rice_ball:`\n:rice_cracker: - `:rice_cracker:`\n:rice: - `:rice:`\n:ramen: - `:ramen:`\n:stew: - `:stew:`\n:oden: - `:oden:`\n:dango: - `:dango:`\n:egg: - `:egg:`\n:bread: - `:bread:`\n:doughnut: - `:doughnut:`\n:custard: - `:custard:`\n:icecream: - `:icecream:`\n:ice_cream: - `:ice_cream:`\n:shaved_ice: - `:shaved_ice:`\n:birthday: - `:birthday:`\n:cake: - `:cake:`\n:cookie: - `:cookie:`\n:chocolate_bar: - `:chocolate_bar:`\n:candy: - `:candy:`\n:lollipop: - `:lollipop:`\n:honey_pot: - `:honey_pot:`\n:apple: - `:apple:`\n:green_apple: - `:green_apple:`\n:tangerine: - `:tangerine:`\n:lemon: - `:lemon:`\n:cherries: - `:cherries:`\n:grapes: - `:grapes:`\n:watermelon: - `:watermelon:`\n:strawberry: - `:strawberry:`\n:peach: - `:peach:`\n:melon: - `:melon:`\n:banana: - `:banana:`\n:pear: - `:pear:`\n:pineapple: - `:pineapple:`\n:sweet_potato: - `:sweet_potato:`\n:eggplant: - `:eggplant:`\n:tomato: - `:tomato:`\n:corn: - `:corn:`\n\n### Places\n\n:house: - `:house:`\n:house_with_garden: - `:house_with_garden:`\n:school: - `:school:`\n:office: - `:office:`\n:post_office: - `:post_office:`\n:hospital: - `:hospital:`\n:bank: - `:bank:`\n:convenience_store: - `:convenience_store:`\n:love_hotel: - `:love_hotel:`\n:hotel: - `:hotel:`\n:wedding: - `:wedding:`\n:church: - `:church:`\n:department_store: - `:department_store:`\n:european_post_office: - `:european_post_office:`\n:city_sunrise: - `:city_sunrise:`\n:city_sunset: - `:city_sunset:`\n:japanese_castle: - `:japanese_castle:`\n:european_castle: - `:european_castle:`\n:tent: - `:tent:`\n:factory: - `:factory:`\n:tokyo_tower: - `:tokyo_tower:`\n:japan: - `:japan:`\n:mount_fuji: - `:mount_fuji:`\n:sunrise_over_mountains: - `:sunrise_over_mountains:`\n:sunrise: - `:sunrise:`\n:stars: - `:stars:`\n:statue_of_liberty: - `:statue_of_liberty:`\n:bridge_at_night: - `:bridge_at_night:`\n:carousel_horse: - `:carousel_horse:`\n:rainbow: - `:rainbow:`\n:ferris_wheel: - `:ferris_wheel:`\n:fountain: - `:fountain:`\n:roller_coaster: - `:roller_coaster:`\n:ship: - `:ship:`\n:speedboat: - `:speedboat:`\n:boat: - `:boat:`\n:sailboat: - `:sailboat:`\n:rowboat: - `:rowboat:`\n:anchor: - `:anchor:`\n:rocket: - `:rocket:`\n:airplane: - `:airplane:`\n:helicopter: - `:helicopter:`\n:steam_locomotive: - `:steam_locomotive:`\n:tram: - `:tram:`\n:mountain_railway: - `:mountain_railway:`\n:bike: - `:bike:`\n:aerial_tramway: - `:aerial_tramway:`\n:suspension_railway: - `:suspension_railway:`\n:mountain_cableway: - `:mountain_cableway:`\n:tractor: - `:tractor:`\n:blue_car: - `:blue_car:`\n:oncoming_automobile: - `:oncoming_automobile:`\n:car: - `:car:`\n:red_car: - `:red_car:`\n:taxi: - `:taxi:`\n:oncoming_taxi: - `:oncoming_taxi:`\n:articulated_lorry: - `:articulated_lorry:`\n:bus: - `:bus:`\n:oncoming_bus: - `:oncoming_bus:`\n:rotating_light: - `:rotating_light:`\n:police_car: - `:police_car:`\n:oncoming_police_car: - `:oncoming_police_car:`\n:fire_engine: - `:fire_engine:`\n:ambulance: - `:ambulance:`\n:minibus: - `:minibus:`\n:truck: - `:truck:`\n:train: - `:train:`\n:station: - `:station:`\n:train2: - `:train2:`\n:bullettrain_front: - `:bullettrain_front:`\n:bullettrain_side: - `:bullettrain_side:`\n:light_rail: - `:light_rail:`\n:monorail: - `:monorail:`\n:railway_car: - `:railway_car:`\n:trolleybus: - `:trolleybus:`\n:ticket: - `:ticket:`\n:fuelpump: - `:fuelpump:`\n:vertical_traffic_light: - `:vertical_traffic_light:`\n:traffic_light: - `:traffic_light:`\n:warning: - `:warning:`\n:construction: - `:construction:`\n:beginner: - `:beginner:`\n:atm: - `:atm:`\n:slot_machine: - `:slot_machine:`\n:busstop: - `:busstop:`\n:barber: - `:barber:`\n:hotsprings: - `:hotsprings:`\n:checkered_flag: - `:checkered_flag:`\n:crossed_flags: - `:crossed_flags:`\n:izakaya_lantern: - `:izakaya_lantern:`\n:moyai: - `:moyai:`\n:circus_tent: - `:circus_tent:`\n:performing_arts: - `:performing_arts:`\n:round_pushpin: - `:round_pushpin:`\n:triangular_flag_on_post: - `:triangular_flag_on_post:`\n:jp: - `:jp:`\n:kr: - `:kr:`\n:cn: - `:cn:`\n:us: - `:us:`\n:fr: - `:fr:`\n:es: - `:es:`\n:it: - `:it:`\n:ru: - `:ru:`\n:gb: - `:gb:`\n:uk: - `:uk:`\n:de: - `:de:`\n\n### Symbols\n\n:one: - `:one:`\n:two: - `:two:`\n:three: - `:three:`\n:four: - `:four:`\n:five: - `:five:`\n:six: - `:six:`\n:seven: - `:seven:`\n:eight: - `:eight:`\n:nine: - `:nine:`\n:keycap_ten: - `:keycap_ten:`\n:1234: - `:1234:`\n:zero: - `:zero:`\n:hash: - `:hash:`\n:symbols: - `:symbols:`\n:arrow_backward: - `:arrow_backward:`\n:arrow_down: - `:arrow_down:`\n:arrow_forward: - `:arrow_forward:`\n:arrow_left: - `:arrow_left:`\n:capital_abcd: - `:capital_abcd:`\n:abcd: - `:abcd:`\n:abc: - `:abc:`\n:arrow_lower_left: - `:arrow_lower_left:`\n:arrow_lower_right: - `:arrow_lower_right:`\n:arrow_right: - `:arrow_right:`\n:arrow_up: - `:arrow_up:`\n:arrow_upper_left: - `:arrow_upper_left:`\n:arrow_upper_right: - `:arrow_upper_right:`\n:arrow_double_down: - `:arrow_double_down:`\n:arrow_double_up: - `:arrow_double_up:`\n:arrow_down_small: - `:arrow_down_small:`\n:arrow_heading_down: - `:arrow_heading_down:`\n:arrow_heading_up: - `:arrow_heading_up:`\n:leftwards_arrow_with_hook: - `:leftwards_arrow_with_hook:`\n:arrow_right_hook: - `:arrow_right_hook:`\n:left_right_arrow: - `:left_right_arrow:`\n:arrow_up_down: - `:arrow_up_down:`\n:arrow_up_small: - `:arrow_up_small:`\n:arrows_clockwise: - `:arrows_clockwise:`\n:arrows_counterclockwise: - `:arrows_counterclockwise:`\n:rewind: - `:rewind:`\n:fast_forward: - `:fast_forward:`\n:information_source: - `:information_source:`\n:ok: - `:ok:`\n:twisted_rightwards_arrows: - `:twisted_rightwards_arrows:`\n:repeat: - `:repeat:`\n:repeat_one: - `:repeat_one:`\n:new: - `:new:`\n:top: - `:top:`\n:up: - `:up:`\n:cool: - `:cool:`\n:free: - `:free:`\n:ng: - `:ng:`\n:cinema: - `:cinema:`\n:koko: - `:koko:`\n:signal_strength: - `:signal_strength:`\n:u5272: - `:u5272:`\n:u5408: - `:u5408:`\n:u55b6: - `:u55b6:`\n:u6307: - `:u6307:`\n:u6708: - `:u6708:`\n:u6709: - `:u6709:`\n:u6e80: - `:u6e80:`\n:u7121: - `:u7121:`\n:u7533: - `:u7533:`\n:u7a7a: - `:u7a7a:`\n:u7981: - `:u7981:`\n:sa: - `:sa:`\n:restroom: - `:restroom:`\n:mens: - `:mens:`\n:womens: - `:womens:`\n:baby_symbol: - `:baby_symbol:`\n:no_smoking: - `:no_smoking:`\n:parking: - `:parking:`\n:wheelchair: - `:wheelchair:`\n:metro: - `:metro:`\n:baggage_claim: - `:baggage_claim:`\n:accept: - `:accept:`\n:wc: - `:wc:`\n:potable_water: - `:potable_water:`\n:put_litter_in_its_place: - `:put_litter_in_its_place:`\n:secret: - `:secret:`\n:congratulations: - `:congratulations:`\n:m: - `:m:`\n:passport_control: - `:passport_control:`\n:left_luggage: - `:left_luggage:`\n:customs: - `:customs:`\n:ideograph_advantage: - `:ideograph_advantage:`\n:cl: - `:cl:`\n:sos: - `:sos:`\n:id: - `:id:`\n:no_entry_sign: - `:no_entry_sign:`\n:underage: - `:underage:`\n:no_mobile_phones: - `:no_mobile_phones:`\n:do_not_litter: - `:do_not_litter:`\n:non-potable_water: - `:non-potable_water:`\n:no_bicycles: - `:no_bicycles:`\n:no_pedestrians: - `:no_pedestrians:`\n:children_crossing: - `:children_crossing:`\n:no_entry: - `:no_entry:`\n:eight_spoked_asterisk: - `:eight_spoked_asterisk:`\n:sparkle: - `:sparkle:`\n:eight_pointed_black_star: - `:eight_pointed_black_star:`\n:heart_decoration: - `:heart_decoration:`\n:vs: - `:vs:`\n:vibration_mode: - `:vibration_mode:`\n:mobile_phone_off: - `:mobile_phone_off:`\n:chart: - `:chart:`\n:currency_exchange: - `:currency_exchange:`\n:aries: - `:aries:`\n:taurus: - `:taurus:`\n:gemini: - `:gemini:`\n:cancer: - `:cancer:`\n:leo: - `:leo:`\n:virgo: - `:virgo:`\n:libra: - `:libra:`\n:scorpius: - `:scorpius:`\n:sagittarius: - `:sagittarius:`\n:capricorn: - `:capricorn:`\n:aquarius: - `:aquarius:`\n:pisces: - `:pisces:`\n:ophiuchus: - `:ophiuchus:`\n:six_pointed_star: - `:six_pointed_star:`\n:negative_squared_cross_mark: - `:negative_squared_cross_mark:`\n:a: - `:a:`\n:b: - `:b:`\n:ab: - `:ab:`\n:o2: - `:o2:`\n:diamond_shape_with_a_dot_inside: - `:diamond_shape_with_a_dot_inside:`\n:recycle: - `:recycle:`\n:end: - `:end:`\n:back: - `:back:`\n:on: - `:on:`\n:soon: - `:soon:`\n:clock1: - `:clock1:`\n:clock130: - `:clock130:`\n:clock10: - `:clock10:`\n:clock1030: - `:clock1030:`\n:clock11: - `:clock11:`\n:clock1130: - `:clock1130:`\n:clock12: - `:clock12:`\n:clock1230: - `:clock1230:`\n:clock2: - `:clock2:`\n:clock230: - `:clock230:`\n:clock3: - `:clock3:`\n:clock330: - `:clock330:`\n:clock4: - `:clock4:`\n:clock430: - `:clock430:`\n:clock5: - `:clock5:`\n:clock530: - `:clock530:`\n:clock6: - `:clock6:`\n:clock630: - `:clock630:`\n:clock7: - `:clock7:`\n:clock730: - `:clock730:`\n:clock8: - `:clock8:`\n:clock830: - `:clock830:`\n:clock9: - `:clock9:`\n:clock930: - `:clock930:`\n:heavy_dollar_sign: - `:heavy_dollar_sign:`\n:copyright: - `:copyright:`\n:registered: - `:registered:`\n:tm: - `:tm:`\n:x: - `:x:`\n:heavy_exclamation_mark: - `:heavy_exclamation_mark:`\n:bangbang: - `:bangbang:`\n:interrobang: - `:interrobang:`\n:o: - `:o:`\n:heavy_multiplication_x: - `:heavy_multiplication_x:`\n:heavy_plus_sign: - `:heavy_plus_sign:`\n:heavy_minus_sign: - `:heavy_minus_sign:`\n:heavy_division_sign: - `:heavy_division_sign:`\n:white_flower: - `:white_flower:`\n:100: - `:100:`\n:heavy_check_mark: - `:heavy_check_mark:`\n:ballot_box_with_check: - `:ballot_box_with_check:`\n:radio_button: - `:radio_button:`\n:link: - `:link:`\n:curly_loop: - `:curly_loop:`\n:wavy_dash: - `:wavy_dash:`\n:part_alternation_mark: - `:part_alternation_mark:`\n:trident: - `:trident:`\n:black_small_square: - `:black_small_square:`\n:white_small_square: - `:white_small_square:`\n:black_medium_small_square: - `:black_medium_small_square:`\n:white_medium_small_square: - `:white_medium_small_square:`\n:black_medium_square: - `:black_medium_square:`\n:white_medium_square: - `:white_medium_square:`\n:black_large_square: - `:black_large_square:`\n:white_large_square: - `:white_large_square:`\n:white_check_mark: - `:white_check_mark:`\n:black_square_button: - `:black_square_button:`\n:white_square_button: - `:white_square_button:`\n:black_circle: - `:black_circle:`\n:white_circle: - `:white_circle:`\n:red_circle: - `:red_circle:`\n:large_blue_circle: - `:large_blue_circle:`\n:large_blue_diamond: - `:large_blue_diamond:`\n:large_orange_diamond: - `:large_orange_diamond:`\n:small_blue_diamond: - `:small_blue_diamond:`\n:small_orange_diamond: - `:small_orange_diamond:`\n:small_red_triangle: - `:small_red_triangle:`\n:small_red_triangle_down: - `:small_red_triangle_down:`\n:shipit: - `:shipit:`","slug":"emoji-cheat-sheet","published":1,"updated":"2018-08-25T02:22:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbpt00175xzxi1h2vvim","content":"<blockquote>\n<p><a href=\"http://www.webpagefx.com/tools/emoji-cheat-sheet/\" target=\"_blank\" rel=\"noopener\">emoji-cheat-sheet</a><br>\n<a href=\"http://emoji.codes/#\" target=\"_blank\" rel=\"noopener\">emoji.codes</a></p>\n</blockquote>\n<h3 id=\"people\"><a class=\"header-anchor\" href=\"#people\">¶</a>People</h3>\n<p>:bowtie: - <code>:bowtie:</code><br>\n😄 - <code>:smile:</code><br>\n😆 - <code>:laughing:</code><br>\n😊 - <code>:blush:</code><br>\n😃 - <code>:smiley:</code><br>\n☺️ - <code>:relaxed:</code><br>\n😏 - <code>:smirk:</code><br>\n😍 - <code>:heart_eyes:</code><br>\n😘 - <code>:kissing_heart:</code></p>\n<a id=\"more\"></a>\n<p>😚 - <code>:kissing_closed_eyes:</code><br>\n😳 - <code>:flushed:</code><br>\n😌 - <code>:relieved:</code><br>\n😆 - <code>:satisfied:</code><br>\n😁 - <code>:grin:</code><br>\n😉 - <code>:wink:</code><br>\n😜 - <code>:stuck_out_tongue_winking_eye:</code><br>\n😝 - <code>:stuck_out_tongue_closed_eyes:</code><br>\n😀 - <code>:grinning:</code><br>\n😗 - <code>:kissing:</code><br>\n😙 - <code>:kissing_smiling_eyes:</code><br>\n😛 - <code>:stuck_out_tongue:</code><br>\n😴 - <code>:sleeping:</code><br>\n😟 - <code>:worried:</code><br>\n😦 - <code>:frowning:</code><br>\n😧 - <code>:anguished:</code><br>\n😮 - <code>:open_mouth:</code><br>\n😬 - <code>:grimacing:</code><br>\n😕 - <code>:confused:</code><br>\n😯 - <code>:hushed:</code><br>\n😑 - <code>:expressionless:</code><br>\n😒 - <code>:unamused:</code><br>\n😅 - <code>:sweat_smile:</code><br>\n😓 - <code>:sweat:</code><br>\n😥 - <code>:disappointed_relieved:</code><br>\n😩 - <code>:weary:</code><br>\n😔 - <code>:pensive:</code><br>\n😞 - <code>:disappointed:</code><br>\n😖 - <code>:confounded:</code><br>\n😨 - <code>:fearful:</code><br>\n😰 - <code>:cold_sweat:</code><br>\n😣 - <code>:persevere:</code><br>\n😢 - <code>:cry:</code><br>\n😭 - <code>:sob:</code><br>\n😂 - <code>:joy:</code><br>\n😲 - <code>:astonished:</code><br>\n😱 - <code>:scream:</code><br>\n:neckbeard: - <code>:neckbeard:</code><br>\n😫 - <code>:tired_face:</code><br>\n😠 - <code>:angry:</code><br>\n😡 - <code>:rage:</code><br>\n😤 - <code>:triumph:</code><br>\n😪 - <code>:sleepy:</code><br>\n😋 - <code>:yum:</code><br>\n😷 - <code>:mask:</code><br>\n😎 - <code>:sunglasses:</code><br>\n😵 - <code>:dizzy_face:</code><br>\n👿 - <code>:imp:</code><br>\n😈 - <code>:smiling_imp:</code><br>\n😐 - <code>:neutral_face:</code><br>\n😶 - <code>:no_mouth:</code><br>\n😇 - <code>:innocent:</code><br>\n👽 - <code>:alien:</code><br>\n💛 - <code>:yellow_heart:</code><br>\n💙 - <code>:blue_heart:</code><br>\n💜 - <code>:purple_heart:</code><br>\n❤️ - <code>:heart:</code><br>\n💚 - <code>:green_heart:</code><br>\n💔 - <code>:broken_heart:</code><br>\n💓 - <code>:heartbeat:</code><br>\n💗 - <code>:heartpulse:</code><br>\n💕 - <code>:two_hearts:</code><br>\n💞 - <code>:revolving_hearts:</code><br>\n💘 - <code>:cupid:</code><br>\n💖 - <code>:sparkling_heart:</code><br>\n✨ - <code>:sparkles:</code><br>\n⭐️ - <code>:star:</code><br>\n🌟 - <code>:star2:</code><br>\n💫 - <code>:dizzy:</code><br>\n💥 - <code>:boom:</code><br>\n💥 - <code>:collision:</code><br>\n💢 - <code>:anger:</code><br>\n❗️ - <code>:exclamation:</code><br>\n❓ - <code>:question:</code><br>\n❕ - <code>:grey_exclamation:</code><br>\n❔ - <code>:grey_question:</code><br>\n💤 - <code>:zzz:</code><br>\n💨 - <code>:dash:</code><br>\n💦 - <code>:sweat_drops:</code><br>\n🎶 - <code>:notes:</code><br>\n🎵 - <code>:musical_note:</code><br>\n🔥 - <code>:fire:</code><br>\n💩 - <code>:hankey:</code><br>\n💩 - <code>:poop:</code><br>\n💩 - <code>:shit:</code><br>\n👍 - <code>:+1:</code><br>\n👍 - <code>:thumbsup:</code><br>\n👎 - <code>:-1:</code><br>\n👎 - <code>:thumbsdown:</code><br>\n👌 - <code>:ok_hand:</code><br>\n👊 - <code>:punch:</code><br>\n👊 - <code>:facepunch:</code><br>\n✊ - <code>:fist:</code><br>\n✌️ - <code>:v:</code><br>\n👋 - <code>:wave:</code><br>\n✋ - <code>:hand:</code><br>\n✋ - <code>:raised_hand:</code><br>\n👐 - <code>:open_hands:</code><br>\n☝️ - <code>:point_up:</code><br>\n👇 - <code>:point_down:</code><br>\n👈 - <code>:point_left:</code><br>\n👉 - <code>:point_right:</code><br>\n🙌 - <code>:raised_hands:</code><br>\n🙏 - <code>:pray:</code><br>\n👆 - <code>:point_up_2:</code><br>\n👏 - <code>:clap:</code><br>\n💪 - <code>:muscle:</code><br>\n🤘 - <code>:metal:</code><br>\n🖕 - <code>:fu:</code><br>\n🏃 - <code>:runner:</code><br>\n🏃 - <code>:running:</code><br>\n👫 - <code>:couple:</code><br>\n👪 - <code>:family:</code><br>\n👬 - <code>:two_men_holding_hands:</code><br>\n👭 - <code>:two_women_holding_hands:</code><br>\n💃 - <code>:dancer:</code><br>\n👯 - <code>:dancers:</code><br>\n🙆 - <code>:ok_woman:</code><br>\n🙅 - <code>:no_good:</code><br>\n💁 - <code>:information_desk_person:</code><br>\n🙋 - <code>:raising_hand:</code><br>\n👰 - <code>:bride_with_veil:</code><br>\n🙎 - <code>:person_with_pouting_face:</code><br>\n🙍 - <code>:person_frowning:</code><br>\n🙇 - <code>:bow:</code><br>\n:couplekiss: - <code>:couplekiss:</code><br>\n💑 - <code>:couple_with_heart:</code><br>\n💆 - <code>:massage:</code><br>\n💇 - <code>:haircut:</code><br>\n💅 - <code>:nail_care:</code><br>\n👦 - <code>:boy:</code><br>\n👧 - <code>:girl:</code><br>\n👩 - <code>:woman:</code><br>\n👨 - <code>:man:</code><br>\n👶 - <code>:baby:</code><br>\n👵 - <code>:older_woman:</code><br>\n👴 - <code>:older_man:</code><br>\n👱 - <code>:person_with_blond_hair:</code><br>\n👲 - <code>:man_with_gua_pi_mao:</code><br>\n👳 - <code>:man_with_turban:</code><br>\n👷 - <code>:construction_worker:</code><br>\n👮 - <code>:cop:</code><br>\n👼 - <code>:angel:</code><br>\n👸 - <code>:princess:</code><br>\n😺 - <code>:smiley_cat:</code><br>\n😸 - <code>:smile_cat:</code><br>\n😻 - <code>:heart_eyes_cat:</code><br>\n😽 - <code>:kissing_cat:</code><br>\n😼 - <code>:smirk_cat:</code><br>\n🙀 - <code>:scream_cat:</code><br>\n😿 - <code>:crying_cat_face:</code><br>\n😹 - <code>:joy_cat:</code><br>\n😾 - <code>:pouting_cat:</code><br>\n👹 - <code>:japanese_ogre:</code><br>\n👺 - <code>:japanese_goblin:</code><br>\n🙈 - <code>:see_no_evil:</code><br>\n🙉 - <code>:hear_no_evil:</code><br>\n🙊 - <code>:speak_no_evil:</code><br>\n💂 - <code>:guardsman:</code><br>\n💀 - <code>:skull:</code><br>\n🐾 - <code>:feet:</code><br>\n👄 - <code>:lips:</code><br>\n💋 - <code>:kiss:</code><br>\n💧 - <code>:droplet:</code><br>\n👂 - <code>:ear:</code><br>\n👀 - <code>:eyes:</code><br>\n👃 - <code>:nose:</code><br>\n👅 - <code>:tongue:</code><br>\n💌 - <code>:love_letter:</code><br>\n👤 - <code>:bust_in_silhouette:</code><br>\n👥 - <code>:busts_in_silhouette:</code><br>\n💬 - <code>:speech_balloon:</code><br>\n💭 - <code>:thought_balloon:</code><br>\n:feelsgood: - <code>:feelsgood:</code><br>\n:finnadie: - <code>:finnadie:</code><br>\n:goberserk: - <code>:goberserk:</code><br>\n:godmode: - <code>:godmode:</code><br>\n:hurtrealbad: - <code>:hurtrealbad:</code><br>\n:rage1: - <code>:rage1:</code><br>\n:rage2: - <code>:rage2:</code><br>\n:rage3: - <code>:rage3:</code><br>\n:rage4: - <code>:rage4:</code><br>\n:suspect: - <code>:suspect:</code><br>\n:trollface: - <code>:trollface:</code></p>\n<h3 id=\"nature\"><a class=\"header-anchor\" href=\"#nature\">¶</a>Nature</h3>\n<p>☀️ - <code>:sunny:</code><br>\n☔️ - <code>:umbrella:</code><br>\n☁️ - <code>:cloud:</code><br>\n❄️ - <code>:snowflake:</code><br>\n⛄️ - <code>:snowman:</code><br>\n⚡️ - <code>:zap:</code><br>\n🌀 - <code>:cyclone:</code><br>\n🌁 - <code>:foggy:</code><br>\n🌊 - <code>:ocean:</code><br>\n🐱 - <code>:cat:</code><br>\n🐶 - <code>:dog:</code><br>\n🐭 - <code>:mouse:</code><br>\n🐹 - <code>:hamster:</code><br>\n🐰 - <code>:rabbit:</code><br>\n🐺 - <code>:wolf:</code><br>\n🐸 - <code>:frog:</code><br>\n🐯 - <code>:tiger:</code><br>\n🐨 - <code>:koala:</code><br>\n🐻 - <code>:bear:</code><br>\n🐷 - <code>:pig:</code><br>\n🐽 - <code>:pig_nose:</code><br>\n🐮 - <code>:cow:</code><br>\n🐗 - <code>:boar:</code><br>\n🐵 - <code>:monkey_face:</code><br>\n🐒 - <code>:monkey:</code><br>\n🐴 - <code>:horse:</code><br>\n🐎 - <code>:racehorse:</code><br>\n🐫 - <code>:camel:</code><br>\n🐑 - <code>:sheep:</code><br>\n🐘 - <code>:elephant:</code><br>\n🐼 - <code>:panda_face:</code><br>\n🐍 - <code>:snake:</code><br>\n🐦 - <code>:bird:</code><br>\n🐤 - <code>:baby_chick:</code><br>\n🐥 - <code>:hatched_chick:</code><br>\n🐣 - <code>:hatching_chick:</code><br>\n🐔 - <code>:chicken:</code><br>\n🐧 - <code>:penguin:</code><br>\n🐢 - <code>:turtle:</code><br>\n🐛 - <code>:bug:</code><br>\n🐝 - <code>:honeybee:</code><br>\n🐜 - <code>:ant:</code><br>\n🐞 - <code>:beetle:</code><br>\n🐌 - <code>:snail:</code><br>\n🐙 - <code>:octopus:</code><br>\n🐠 - <code>:tropical_fish:</code><br>\n🐟 - <code>:fish:</code><br>\n🐳 - <code>:whale:</code><br>\n🐋 - <code>:whale2:</code><br>\n🐬 - <code>:dolphin:</code><br>\n🐄 - <code>:cow2:</code><br>\n🐏 - <code>:ram:</code><br>\n🐀 - <code>:rat:</code><br>\n🐃 - <code>:water_buffalo:</code><br>\n🐅 - <code>:tiger2:</code><br>\n🐇 - <code>:rabbit2:</code><br>\n🐉 - <code>:dragon:</code><br>\n🐐 - <code>:goat:</code><br>\n🐓 - <code>:rooster:</code><br>\n🐕 - <code>:dog2:</code><br>\n🐖 - <code>:pig2:</code><br>\n🐁 - <code>:mouse2:</code><br>\n🐂 - <code>:ox:</code><br>\n🐲 - <code>:dragon_face:</code><br>\n🐡 - <code>:blowfish:</code><br>\n🐊 - <code>:crocodile:</code><br>\n🐪 - <code>:dromedary_camel:</code><br>\n🐆 - <code>:leopard:</code><br>\n🐈 - <code>:cat2:</code><br>\n🐩 - <code>:poodle:</code><br>\n🐾 - <code>:paw_prints:</code><br>\n💐 - <code>:bouquet:</code><br>\n🌸 - <code>:cherry_blossom:</code><br>\n🌷 - <code>:tulip:</code><br>\n🍀 - <code>:four_leaf_clover:</code><br>\n🌹 - <code>:rose:</code><br>\n🌻 - <code>:sunflower:</code><br>\n🌺 - <code>:hibiscus:</code><br>\n🍁 - <code>:maple_leaf:</code><br>\n🍃 - <code>:leaves:</code><br>\n🍂 - <code>:fallen_leaf:</code><br>\n🌿 - <code>:herb:</code><br>\n🍄 - <code>:mushroom:</code><br>\n🌵 - <code>:cactus:</code><br>\n🌴 - <code>:palm_tree:</code><br>\n🌲 - <code>:evergreen_tree:</code><br>\n🌳 - <code>:deciduous_tree:</code><br>\n🌰 - <code>:chestnut:</code><br>\n🌱 - <code>:seedling:</code><br>\n🌼 - <code>:blossom:</code><br>\n🌾 - <code>:ear_of_rice:</code><br>\n🐚 - <code>:shell:</code><br>\n🌐 - <code>:globe_with_meridians:</code><br>\n🌞 - <code>:sun_with_face:</code><br>\n🌝 - <code>:full_moon_with_face:</code><br>\n🌚 - <code>:new_moon_with_face:</code><br>\n🌑 - <code>:new_moon:</code><br>\n🌒 - <code>:waxing_crescent_moon:</code><br>\n🌓 - <code>:first_quarter_moon:</code><br>\n🌔 - <code>:waxing_gibbous_moon:</code><br>\n🌕 - <code>:full_moon:</code><br>\n🌖 - <code>:waning_gibbous_moon:</code><br>\n🌗 - <code>:last_quarter_moon:</code><br>\n🌘 - <code>:waning_crescent_moon:</code><br>\n🌜 - <code>:last_quarter_moon_with_face:</code><br>\n🌛 - <code>:first_quarter_moon_with_face:</code><br>\n🌙 - <code>:crescent_moon:</code><br>\n🌍 - <code>:earth_africa:</code><br>\n🌎 - <code>:earth_americas:</code><br>\n🌏 - <code>:earth_asia:</code><br>\n🌋 - <code>:volcano:</code><br>\n🌌 - <code>:milky_way:</code><br>\n⛅️ - <code>:partly_sunny:</code><br>\n:octocat: - <code>:octocat:</code><br>\n:squirrel: - <code>:squirrel:</code></p>\n<h3 id=\"objects\"><a class=\"header-anchor\" href=\"#objects\">¶</a>Objects</h3>\n<p>🎍 - <code>:bamboo:</code><br>\n💝 - <code>:gift_heart:</code><br>\n🎎 - <code>:dolls:</code><br>\n🎒 - <code>:school_satchel:</code><br>\n🎓 - <code>:mortar_board:</code><br>\n🎏 - <code>:flags:</code><br>\n🎆 - <code>:fireworks:</code><br>\n🎇 - <code>:sparkler:</code><br>\n🎐 - <code>:wind_chime:</code><br>\n🎑 - <code>:rice_scene:</code><br>\n🎃 - <code>:jack_o_lantern:</code><br>\n👻 - <code>:ghost:</code><br>\n🎅 - <code>:santa:</code><br>\n🎄 - <code>:christmas_tree:</code><br>\n🎁 - <code>:gift:</code><br>\n🔔 - <code>:bell:</code><br>\n🔕 - <code>:no_bell:</code><br>\n🎋 - <code>:tanabata_tree:</code><br>\n🎉 - <code>:tada:</code><br>\n🎊 - <code>:confetti_ball:</code><br>\n🎈 - <code>:balloon:</code><br>\n🔮 - <code>:crystal_ball:</code><br>\n💿 - <code>:cd:</code><br>\n📀 - <code>:dvd:</code><br>\n💾 - <code>:floppy_disk:</code><br>\n📷 - <code>:camera:</code><br>\n📹 - <code>:video_camera:</code><br>\n🎥 - <code>:movie_camera:</code><br>\n💻 - <code>:computer:</code><br>\n📺 - <code>:tv:</code><br>\n📱 - <code>:iphone:</code><br>\n☎️ - <code>:phone:</code><br>\n☎️ - <code>:telephone:</code><br>\n📞 - <code>:telephone_receiver:</code><br>\n📟 - <code>:pager:</code><br>\n📠 - <code>:fax:</code><br>\n💽 - <code>:minidisc:</code><br>\n📼 - <code>:vhs:</code><br>\n🔉 - <code>:sound:</code><br>\n🔈 - <code>:speaker:</code><br>\n🔇 - <code>:mute:</code><br>\n📢 - <code>:loudspeaker:</code><br>\n📣 - <code>:mega:</code><br>\n⌛️ - <code>:hourglass:</code><br>\n⏳ - <code>:hourglass_flowing_sand:</code><br>\n⏰ - <code>:alarm_clock:</code><br>\n⌚️ - <code>:watch:</code><br>\n📻 - <code>:radio:</code><br>\n📡 - <code>:satellite:</code><br>\n➿ - <code>:loop:</code><br>\n🔍 - <code>:mag:</code><br>\n🔎 - <code>:mag_right:</code><br>\n🔓 - <code>:unlock:</code><br>\n🔒 - <code>:lock:</code><br>\n🔏 - <code>:lock_with_ink_pen:</code><br>\n🔐 - <code>:closed_lock_with_key:</code><br>\n🔑 - <code>:key:</code><br>\n💡 - <code>:bulb:</code><br>\n🔦 - <code>:flashlight:</code><br>\n🔆 - <code>:high_brightness:</code><br>\n🔅 - <code>:low_brightness:</code><br>\n🔌 - <code>:electric_plug:</code><br>\n🔋 - <code>:battery:</code><br>\n📲 - <code>:calling:</code><br>\n✉️ - <code>:email:</code><br>\n📫 - <code>:mailbox:</code><br>\n📮 - <code>:postbox:</code><br>\n🛀 - <code>:bath:</code><br>\n🛁 - <code>:bathtub:</code><br>\n🚿 - <code>:shower:</code><br>\n🚽 - <code>:toilet:</code><br>\n🔧 - <code>:wrench:</code><br>\n🔩 - <code>:nut_and_bolt:</code><br>\n🔨 - <code>:hammer:</code><br>\n💺 - <code>:seat:</code><br>\n💰 - <code>:moneybag:</code><br>\n💴 - <code>:yen:</code><br>\n💵 - <code>:dollar:</code><br>\n💷 - <code>:pound:</code><br>\n💶 - <code>:euro:</code><br>\n💳 - <code>:credit_card:</code><br>\n💸 - <code>:money_with_wings:</code><br>\n📧 - <code>:e-mail:</code><br>\n📥 - <code>:inbox_tray:</code><br>\n📤 - <code>:outbox_tray:</code><br>\n✉️ - <code>:envelope:</code><br>\n📨 - <code>:incoming_envelope:</code><br>\n📯 - <code>:postal_horn:</code><br>\n📪 - <code>:mailbox_closed:</code><br>\n📬 - <code>:mailbox_with_mail:</code><br>\n📭 - <code>:mailbox_with_no_mail:</code><br>\n📦 - <code>:package:</code><br>\n🚪 - <code>:door:</code><br>\n🚬 - <code>:smoking:</code><br>\n💣 - <code>:bomb:</code><br>\n🔫 - <code>:gun:</code><br>\n🔪 - <code>:hocho:</code><br>\n💊 - <code>:pill:</code><br>\n💉 - <code>:syringe:</code><br>\n📄 - <code>:page_facing_up:</code><br>\n📃 - <code>:page_with_curl:</code><br>\n📑 - <code>:bookmark_tabs:</code><br>\n📊 - <code>:bar_chart:</code><br>\n📈 - <code>:chart_with_upwards_trend:</code><br>\n📉 - <code>:chart_with_downwards_trend:</code><br>\n📜 - <code>:scroll:</code><br>\n📋 - <code>:clipboard:</code><br>\n📆 - <code>:calendar:</code><br>\n📅 - <code>:date:</code><br>\n📇 - <code>:card_index:</code><br>\n📁 - <code>:file_folder:</code><br>\n📂 - <code>:open_file_folder:</code><br>\n✂️ - <code>:scissors:</code><br>\n📌 - <code>:pushpin:</code><br>\n📎 - <code>:paperclip:</code><br>\n✒️ - <code>:black_nib:</code><br>\n✏️ - <code>:pencil2:</code><br>\n📏 - <code>:straight_ruler:</code><br>\n📐 - <code>:triangular_ruler:</code><br>\n📕 - <code>:closed_book:</code><br>\n📗 - <code>:green_book:</code><br>\n📘 - <code>:blue_book:</code><br>\n📙 - <code>:orange_book:</code><br>\n📓 - <code>:notebook:</code><br>\n📔 - <code>:notebook_with_decorative_cover:</code><br>\n📒 - <code>:ledger:</code><br>\n📚 - <code>:books:</code><br>\n🔖 - <code>:bookmark:</code><br>\n📛 - <code>:name_badge:</code><br>\n🔬 - <code>:microscope:</code><br>\n🔭 - <code>:telescope:</code><br>\n📰 - <code>:newspaper:</code><br>\n🏈 - <code>:football:</code><br>\n🏀 - <code>:basketball:</code><br>\n⚽️ - <code>:soccer:</code><br>\n⚾️ - <code>:baseball:</code><br>\n🎾 - <code>:tennis:</code><br>\n🎱 - <code>:8ball:</code><br>\n🎱 - <code>:8ball:</code><br>\n🏉 - <code>:rugby_football:</code><br>\n🎳 - <code>:bowling:</code><br>\n⛳️ - <code>:golf:</code><br>\n🚵 - <code>:mountain_bicyclist:</code><br>\n🚴 - <code>:bicyclist:</code><br>\n🏇 - <code>:horse_racing:</code><br>\n🏂 - <code>:snowboarder:</code><br>\n🏊 - <code>:swimmer:</code><br>\n🏄 - <code>:surfer:</code><br>\n🎿 - <code>:ski:</code><br>\n♠️ - <code>:spades:</code><br>\n♥️ - <code>:hearts:</code><br>\n♣️ - <code>:clubs:</code><br>\n♦️ - <code>:diamonds:</code><br>\n💎 - <code>:gem:</code><br>\n💍 - <code>:ring:</code><br>\n🏆 - <code>:trophy:</code><br>\n🎼 - <code>:musical_score:</code><br>\n🎹 - <code>:musical_keyboard:</code><br>\n🎻 - <code>:violin:</code><br>\n👾 - <code>:space_invader:</code><br>\n🎮 - <code>:video_game:</code><br>\n🃏 - <code>:black_joker:</code><br>\n🎴 - <code>:flower_playing_cards:</code><br>\n🎲 - <code>:game_die:</code><br>\n🎯 - <code>:dart:</code><br>\n🀄️ - <code>:mahjong:</code><br>\n🎬 - <code>:clapper:</code><br>\n📝 - <code>:memo:</code><br>\n📝 - <code>:pencil:</code><br>\n📖 - <code>:book:</code><br>\n🎨 - <code>:art:</code><br>\n🎤 - <code>:microphone:</code><br>\n🎧 - <code>:headphones:</code><br>\n🎺 - <code>:trumpet:</code><br>\n🎷 - <code>:saxophone:</code><br>\n🎸 - <code>:guitar:</code><br>\n👞 - <code>:shoe:</code><br>\n👡 - <code>:sandal:</code><br>\n👠 - <code>:high_heel:</code><br>\n💄 - <code>:lipstick:</code><br>\n👢 - <code>:boot:</code><br>\n👕 - <code>:shirt:</code><br>\n👕 - <code>:tshirt:</code><br>\n👔 - <code>:necktie:</code><br>\n👚 - <code>:womans_clothes:</code><br>\n👗 - <code>:dress:</code><br>\n🎽 - <code>:running_shirt_with_sash:</code><br>\n👖 - <code>:jeans:</code><br>\n👘 - <code>:kimono:</code><br>\n👙 - <code>:bikini:</code><br>\n🎀 - <code>:ribbon:</code><br>\n🎩 - <code>:tophat:</code><br>\n👑 - <code>:crown:</code><br>\n👒 - <code>:womans_hat:</code><br>\n👞 - <code>:mans_shoe:</code><br>\n🌂 - <code>:closed_umbrella:</code><br>\n💼 - <code>:briefcase:</code><br>\n👜 - <code>:handbag:</code><br>\n👝 - <code>:pouch:</code><br>\n👛 - <code>:purse:</code><br>\n👓 - <code>:eyeglasses:</code><br>\n🎣 - <code>:fishing_pole_and_fish:</code><br>\n☕️ - <code>:coffee:</code><br>\n🍵 - <code>:tea:</code><br>\n🍶 - <code>:sake:</code><br>\n🍼 - <code>:baby_bottle:</code><br>\n🍺 - <code>:beer:</code><br>\n🍻 - <code>:beers:</code><br>\n🍸 - <code>:cocktail:</code><br>\n🍹 - <code>:tropical_drink:</code><br>\n🍷 - <code>:wine_glass:</code><br>\n🍴 - <code>:fork_and_knife:</code><br>\n🍕 - <code>:pizza:</code><br>\n🍔 - <code>:hamburger:</code><br>\n🍟 - <code>:fries:</code><br>\n🍗 - <code>:poultry_leg:</code><br>\n🍖 - <code>:meat_on_bone:</code><br>\n🍝 - <code>:spaghetti:</code><br>\n🍛 - <code>:curry:</code><br>\n🍤 - <code>:fried_shrimp:</code><br>\n🍱 - <code>:bento:</code><br>\n🍣 - <code>:sushi:</code><br>\n🍥 - <code>:fish_cake:</code><br>\n🍙 - <code>:rice_ball:</code><br>\n🍘 - <code>:rice_cracker:</code><br>\n🍚 - <code>:rice:</code><br>\n🍜 - <code>:ramen:</code><br>\n🍲 - <code>:stew:</code><br>\n🍢 - <code>:oden:</code><br>\n🍡 - <code>:dango:</code><br>\n🥚 - <code>:egg:</code><br>\n🍞 - <code>:bread:</code><br>\n🍩 - <code>:doughnut:</code><br>\n🍮 - <code>:custard:</code><br>\n🍦 - <code>:icecream:</code><br>\n🍨 - <code>:ice_cream:</code><br>\n🍧 - <code>:shaved_ice:</code><br>\n🎂 - <code>:birthday:</code><br>\n🍰 - <code>:cake:</code><br>\n🍪 - <code>:cookie:</code><br>\n🍫 - <code>:chocolate_bar:</code><br>\n🍬 - <code>:candy:</code><br>\n🍭 - <code>:lollipop:</code><br>\n🍯 - <code>:honey_pot:</code><br>\n🍎 - <code>:apple:</code><br>\n🍏 - <code>:green_apple:</code><br>\n🍊 - <code>:tangerine:</code><br>\n🍋 - <code>:lemon:</code><br>\n🍒 - <code>:cherries:</code><br>\n🍇 - <code>:grapes:</code><br>\n🍉 - <code>:watermelon:</code><br>\n🍓 - <code>:strawberry:</code><br>\n🍑 - <code>:peach:</code><br>\n🍈 - <code>:melon:</code><br>\n🍌 - <code>:banana:</code><br>\n🍐 - <code>:pear:</code><br>\n🍍 - <code>:pineapple:</code><br>\n🍠 - <code>:sweet_potato:</code><br>\n🍆 - <code>:eggplant:</code><br>\n🍅 - <code>:tomato:</code><br>\n🌽 - <code>:corn:</code></p>\n<h3 id=\"places\"><a class=\"header-anchor\" href=\"#places\">¶</a>Places</h3>\n<p>🏠 - <code>:house:</code><br>\n🏡 - <code>:house_with_garden:</code><br>\n🏫 - <code>:school:</code><br>\n🏢 - <code>:office:</code><br>\n🏣 - <code>:post_office:</code><br>\n🏥 - <code>:hospital:</code><br>\n🏦 - <code>:bank:</code><br>\n🏪 - <code>:convenience_store:</code><br>\n🏩 - <code>:love_hotel:</code><br>\n🏨 - <code>:hotel:</code><br>\n💒 - <code>:wedding:</code><br>\n⛪️ - <code>:church:</code><br>\n🏬 - <code>:department_store:</code><br>\n🏤 - <code>:european_post_office:</code><br>\n🌇 - <code>:city_sunrise:</code><br>\n🌆 - <code>:city_sunset:</code><br>\n🏯 - <code>:japanese_castle:</code><br>\n🏰 - <code>:european_castle:</code><br>\n⛺️ - <code>:tent:</code><br>\n🏭 - <code>:factory:</code><br>\n🗼 - <code>:tokyo_tower:</code><br>\n🗾 - <code>:japan:</code><br>\n🗻 - <code>:mount_fuji:</code><br>\n🌄 - <code>:sunrise_over_mountains:</code><br>\n🌅 - <code>:sunrise:</code><br>\n🌠 - <code>:stars:</code><br>\n🗽 - <code>:statue_of_liberty:</code><br>\n🌉 - <code>:bridge_at_night:</code><br>\n🎠 - <code>:carousel_horse:</code><br>\n🌈 - <code>:rainbow:</code><br>\n🎡 - <code>:ferris_wheel:</code><br>\n⛲️ - <code>:fountain:</code><br>\n🎢 - <code>:roller_coaster:</code><br>\n🚢 - <code>:ship:</code><br>\n🚤 - <code>:speedboat:</code><br>\n⛵️ - <code>:boat:</code><br>\n⛵️ - <code>:sailboat:</code><br>\n🚣 - <code>:rowboat:</code><br>\n⚓️ - <code>:anchor:</code><br>\n🚀 - <code>:rocket:</code><br>\n✈️ - <code>:airplane:</code><br>\n🚁 - <code>:helicopter:</code><br>\n🚂 - <code>:steam_locomotive:</code><br>\n🚊 - <code>:tram:</code><br>\n🚞 - <code>:mountain_railway:</code><br>\n🚲 - <code>:bike:</code><br>\n🚡 - <code>:aerial_tramway:</code><br>\n🚟 - <code>:suspension_railway:</code><br>\n🚠 - <code>:mountain_cableway:</code><br>\n🚜 - <code>:tractor:</code><br>\n🚙 - <code>:blue_car:</code><br>\n🚘 - <code>:oncoming_automobile:</code><br>\n🚗 - <code>:car:</code><br>\n🚗 - <code>:red_car:</code><br>\n🚕 - <code>:taxi:</code><br>\n🚖 - <code>:oncoming_taxi:</code><br>\n🚛 - <code>:articulated_lorry:</code><br>\n🚌 - <code>:bus:</code><br>\n🚍 - <code>:oncoming_bus:</code><br>\n🚨 - <code>:rotating_light:</code><br>\n🚓 - <code>:police_car:</code><br>\n🚔 - <code>:oncoming_police_car:</code><br>\n🚒 - <code>:fire_engine:</code><br>\n🚑 - <code>:ambulance:</code><br>\n🚐 - <code>:minibus:</code><br>\n🚚 - <code>:truck:</code><br>\n🚋 - <code>:train:</code><br>\n🚉 - <code>:station:</code><br>\n🚆 - <code>:train2:</code><br>\n🚅 - <code>:bullettrain_front:</code><br>\n🚄 - <code>:bullettrain_side:</code><br>\n🚈 - <code>:light_rail:</code><br>\n🚝 - <code>:monorail:</code><br>\n🚃 - <code>:railway_car:</code><br>\n🚎 - <code>:trolleybus:</code><br>\n🎫 - <code>:ticket:</code><br>\n⛽️ - <code>:fuelpump:</code><br>\n🚦 - <code>:vertical_traffic_light:</code><br>\n🚥 - <code>:traffic_light:</code><br>\n⚠️ - <code>:warning:</code><br>\n🚧 - <code>:construction:</code><br>\n🔰 - <code>:beginner:</code><br>\n🏧 - <code>:atm:</code><br>\n🎰 - <code>:slot_machine:</code><br>\n🚏 - <code>:busstop:</code><br>\n💈 - <code>:barber:</code><br>\n♨️ - <code>:hotsprings:</code><br>\n🏁 - <code>:checkered_flag:</code><br>\n🎌 - <code>:crossed_flags:</code><br>\n🏮 - <code>:izakaya_lantern:</code><br>\n🗿 - <code>:moyai:</code><br>\n🎪 - <code>:circus_tent:</code><br>\n🎭 - <code>:performing_arts:</code><br>\n📍 - <code>:round_pushpin:</code><br>\n🚩 - <code>:triangular_flag_on_post:</code><br>\n🇯🇵 - <code>:jp:</code><br>\n🇰🇷 - <code>:kr:</code><br>\n🇨🇳 - <code>:cn:</code><br>\n🇺🇸 - <code>:us:</code><br>\n🇫🇷 - <code>:fr:</code><br>\n🇪🇸 - <code>:es:</code><br>\n🇮🇹 - <code>:it:</code><br>\n🇷🇺 - <code>:ru:</code><br>\n🇬🇧 - <code>:gb:</code><br>\n🇬🇧 - <code>:uk:</code><br>\n🇩🇪 - <code>:de:</code></p>\n<h3 id=\"symbols\"><a class=\"header-anchor\" href=\"#symbols\">¶</a>Symbols</h3>\n<p>1️⃣ - <code>:one:</code><br>\n2️⃣ - <code>:two:</code><br>\n3️⃣ - <code>:three:</code><br>\n4️⃣ - <code>:four:</code><br>\n5️⃣ - <code>:five:</code><br>\n6️⃣ - <code>:six:</code><br>\n7️⃣ - <code>:seven:</code><br>\n8️⃣ - <code>:eight:</code><br>\n9️⃣ - <code>:nine:</code><br>\n🔟 - <code>:keycap_ten:</code><br>\n🔢 - <code>:1234:</code><br>\n0️⃣ - <code>:zero:</code><br>\n#️⃣ - <code>:hash:</code><br>\n🔣 - <code>:symbols:</code><br>\n◀️ - <code>:arrow_backward:</code><br>\n⬇️ - <code>:arrow_down:</code><br>\n▶️ - <code>:arrow_forward:</code><br>\n⬅️ - <code>:arrow_left:</code><br>\n🔠 - <code>:capital_abcd:</code><br>\n🔡 - <code>:abcd:</code><br>\n🔤 - <code>:abc:</code><br>\n↙️ - <code>:arrow_lower_left:</code><br>\n↘️ - <code>:arrow_lower_right:</code><br>\n➡️ - <code>:arrow_right:</code><br>\n⬆️ - <code>:arrow_up:</code><br>\n↖️ - <code>:arrow_upper_left:</code><br>\n↗️ - <code>:arrow_upper_right:</code><br>\n⏬ - <code>:arrow_double_down:</code><br>\n⏫ - <code>:arrow_double_up:</code><br>\n🔽 - <code>:arrow_down_small:</code><br>\n⤵️ - <code>:arrow_heading_down:</code><br>\n⤴️ - <code>:arrow_heading_up:</code><br>\n↩️ - <code>:leftwards_arrow_with_hook:</code><br>\n↪️ - <code>:arrow_right_hook:</code><br>\n↔️ - <code>:left_right_arrow:</code><br>\n↕️ - <code>:arrow_up_down:</code><br>\n🔼 - <code>:arrow_up_small:</code><br>\n🔃 - <code>:arrows_clockwise:</code><br>\n🔄 - <code>:arrows_counterclockwise:</code><br>\n⏪ - <code>:rewind:</code><br>\n⏩ - <code>:fast_forward:</code><br>\nℹ️ - <code>:information_source:</code><br>\n🆗 - <code>:ok:</code><br>\n🔀 - <code>:twisted_rightwards_arrows:</code><br>\n🔁 - <code>:repeat:</code><br>\n🔂 - <code>:repeat_one:</code><br>\n🆕 - <code>:new:</code><br>\n🔝 - <code>:top:</code><br>\n🆙 - <code>:up:</code><br>\n🆒 - <code>:cool:</code><br>\n🆓 - <code>:free:</code><br>\n🆖 - <code>:ng:</code><br>\n🎦 - <code>:cinema:</code><br>\n🈁 - <code>:koko:</code><br>\n📶 - <code>:signal_strength:</code><br>\n:u5272: - <code>:u5272:</code><br>\n:u5408: - <code>:u5408:</code><br>\n:u55b6: - <code>:u55b6:</code><br>\n:u6307: - <code>:u6307:</code><br>\n:u6708: - <code>:u6708:</code><br>\n:u6709: - <code>:u6709:</code><br>\n🈵 - <code>:u6e80:</code><br>\n:u7121: - <code>:u7121:</code><br>\n:u7533: - <code>:u7533:</code><br>\n:u7a7a: - <code>:u7a7a:</code><br>\n:u7981: - <code>:u7981:</code><br>\n🈂️ - <code>:sa:</code><br>\n🚻 - <code>:restroom:</code><br>\n🚹 - <code>:mens:</code><br>\n🚺 - <code>:womens:</code><br>\n🚼 - <code>:baby_symbol:</code><br>\n🚭 - <code>:no_smoking:</code><br>\n🅿️ - <code>:parking:</code><br>\n♿️ - <code>:wheelchair:</code><br>\n🚇 - <code>:metro:</code><br>\n🛄 - <code>:baggage_claim:</code><br>\n🉑 - <code>:accept:</code><br>\n🚾 - <code>:wc:</code><br>\n🚰 - <code>:potable_water:</code><br>\n🚮 - <code>:put_litter_in_its_place:</code><br>\n㊙️ - <code>:secret:</code><br>\n㊗️ - <code>:congratulations:</code><br>\nⓂ️ - <code>:m:</code><br>\n🛂 - <code>:passport_control:</code><br>\n🛅 - <code>:left_luggage:</code><br>\n🛃 - <code>:customs:</code><br>\n🉐 - <code>:ideograph_advantage:</code><br>\n🆑 - <code>:cl:</code><br>\n🆘 - <code>:sos:</code><br>\n🆔 - <code>:id:</code><br>\n🚫 - <code>:no_entry_sign:</code><br>\n🔞 - <code>:underage:</code><br>\n📵 - <code>:no_mobile_phones:</code><br>\n🚯 - <code>:do_not_litter:</code><br>\n🚱 - <code>:non-potable_water:</code><br>\n🚳 - <code>:no_bicycles:</code><br>\n🚷 - <code>:no_pedestrians:</code><br>\n🚸 - <code>:children_crossing:</code><br>\n⛔️ - <code>:no_entry:</code><br>\n✳️ - <code>:eight_spoked_asterisk:</code><br>\n❇️ - <code>:sparkle:</code><br>\n✴️ - <code>:eight_pointed_black_star:</code><br>\n💟 - <code>:heart_decoration:</code><br>\n🆚 - <code>:vs:</code><br>\n📳 - <code>:vibration_mode:</code><br>\n📴 - <code>:mobile_phone_off:</code><br>\n💹 - <code>:chart:</code><br>\n💱 - <code>:currency_exchange:</code><br>\n♈️ - <code>:aries:</code><br>\n♉️ - <code>:taurus:</code><br>\n♊️ - <code>:gemini:</code><br>\n♋️ - <code>:cancer:</code><br>\n♌️ - <code>:leo:</code><br>\n♍️ - <code>:virgo:</code><br>\n♎️ - <code>:libra:</code><br>\n♏️ - <code>:scorpius:</code><br>\n♐️ - <code>:sagittarius:</code><br>\n♑️ - <code>:capricorn:</code><br>\n♒️ - <code>:aquarius:</code><br>\n♓️ - <code>:pisces:</code><br>\n⛎ - <code>:ophiuchus:</code><br>\n🔯 - <code>:six_pointed_star:</code><br>\n❎ - <code>:negative_squared_cross_mark:</code><br>\n🅰️ - <code>:a:</code><br>\n🅱️ - <code>:b:</code><br>\n🆎 - <code>:ab:</code><br>\n🅾️ - <code>:o2:</code><br>\n💠 - <code>:diamond_shape_with_a_dot_inside:</code><br>\n♻️ - <code>:recycle:</code><br>\n🔚 - <code>:end:</code><br>\n🔙 - <code>:back:</code><br>\n🔛 - <code>:on:</code><br>\n🔜 - <code>:soon:</code><br>\n🕐 - <code>:clock1:</code><br>\n🕜 - <code>:clock130:</code><br>\n🕙 - <code>:clock10:</code><br>\n🕥 - <code>:clock1030:</code><br>\n🕚 - <code>:clock11:</code><br>\n🕦 - <code>:clock1130:</code><br>\n🕛 - <code>:clock12:</code><br>\n🕧 - <code>:clock1230:</code><br>\n🕑 - <code>:clock2:</code><br>\n🕝 - <code>:clock230:</code><br>\n🕒 - <code>:clock3:</code><br>\n🕞 - <code>:clock330:</code><br>\n🕓 - <code>:clock4:</code><br>\n🕟 - <code>:clock430:</code><br>\n🕔 - <code>:clock5:</code><br>\n🕠 - <code>:clock530:</code><br>\n🕕 - <code>:clock6:</code><br>\n🕡 - <code>:clock630:</code><br>\n🕖 - <code>:clock7:</code><br>\n🕢 - <code>:clock730:</code><br>\n🕗 - <code>:clock8:</code><br>\n🕣 - <code>:clock830:</code><br>\n🕘 - <code>:clock9:</code><br>\n🕤 - <code>:clock930:</code><br>\n💲 - <code>:heavy_dollar_sign:</code><br>\n©️ - <code>:copyright:</code><br>\n®️ - <code>:registered:</code><br>\n™️ - <code>:tm:</code><br>\n❌ - <code>:x:</code><br>\n❗️ - <code>:heavy_exclamation_mark:</code><br>\n‼️ - <code>:bangbang:</code><br>\n⁉️ - <code>:interrobang:</code><br>\n⭕️ - <code>:o:</code><br>\n✖️ - <code>:heavy_multiplication_x:</code><br>\n➕ - <code>:heavy_plus_sign:</code><br>\n➖ - <code>:heavy_minus_sign:</code><br>\n➗ - <code>:heavy_division_sign:</code><br>\n💮 - <code>:white_flower:</code><br>\n💯 - <code>:100:</code><br>\n✔️ - <code>:heavy_check_mark:</code><br>\n☑️ - <code>:ballot_box_with_check:</code><br>\n🔘 - <code>:radio_button:</code><br>\n🔗 - <code>:link:</code><br>\n➰ - <code>:curly_loop:</code><br>\n〰️ - <code>:wavy_dash:</code><br>\n〽️ - <code>:part_alternation_mark:</code><br>\n🔱 - <code>:trident:</code><br>\n▪️ - <code>:black_small_square:</code><br>\n▫️ - <code>:white_small_square:</code><br>\n◾️ - <code>:black_medium_small_square:</code><br>\n◽️ - <code>:white_medium_small_square:</code><br>\n◼️ - <code>:black_medium_square:</code><br>\n◻️ - <code>:white_medium_square:</code><br>\n⬛️ - <code>:black_large_square:</code><br>\n⬜️ - <code>:white_large_square:</code><br>\n✅ - <code>:white_check_mark:</code><br>\n🔲 - <code>:black_square_button:</code><br>\n🔳 - <code>:white_square_button:</code><br>\n⚫️ - <code>:black_circle:</code><br>\n⚪️ - <code>:white_circle:</code><br>\n🔴 - <code>:red_circle:</code><br>\n🔵 - <code>:large_blue_circle:</code><br>\n🔷 - <code>:large_blue_diamond:</code><br>\n🔶 - <code>:large_orange_diamond:</code><br>\n🔹 - <code>:small_blue_diamond:</code><br>\n🔸 - <code>:small_orange_diamond:</code><br>\n🔺 - <code>:small_red_triangle:</code><br>\n🔻 - <code>:small_red_triangle_down:</code><br>\n:shipit: - <code>:shipit:</code></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p><a href=\"http://www.webpagefx.com/tools/emoji-cheat-sheet/\" target=\"_blank\" rel=\"noopener\">emoji-cheat-sheet</a><br>\n<a href=\"http://emoji.codes/#\" target=\"_blank\" rel=\"noopener\">emoji.codes</a></p>\n</blockquote>\n<h3 id=\"people\"><a class=\"header-anchor\" href=\"#people\">¶</a>People</h3>\n<p>:bowtie: - <code>:bowtie:</code><br>\n😄 - <code>:smile:</code><br>\n😆 - <code>:laughing:</code><br>\n😊 - <code>:blush:</code><br>\n😃 - <code>:smiley:</code><br>\n☺️ - <code>:relaxed:</code><br>\n😏 - <code>:smirk:</code><br>\n😍 - <code>:heart_eyes:</code><br>\n😘 - <code>:kissing_heart:</code></p>","more":"<p>😚 - <code>:kissing_closed_eyes:</code><br>\n😳 - <code>:flushed:</code><br>\n😌 - <code>:relieved:</code><br>\n😆 - <code>:satisfied:</code><br>\n😁 - <code>:grin:</code><br>\n😉 - <code>:wink:</code><br>\n😜 - <code>:stuck_out_tongue_winking_eye:</code><br>\n😝 - <code>:stuck_out_tongue_closed_eyes:</code><br>\n😀 - <code>:grinning:</code><br>\n😗 - <code>:kissing:</code><br>\n😙 - <code>:kissing_smiling_eyes:</code><br>\n😛 - <code>:stuck_out_tongue:</code><br>\n😴 - <code>:sleeping:</code><br>\n😟 - <code>:worried:</code><br>\n😦 - <code>:frowning:</code><br>\n😧 - <code>:anguished:</code><br>\n😮 - <code>:open_mouth:</code><br>\n😬 - <code>:grimacing:</code><br>\n😕 - <code>:confused:</code><br>\n😯 - <code>:hushed:</code><br>\n😑 - <code>:expressionless:</code><br>\n😒 - <code>:unamused:</code><br>\n😅 - <code>:sweat_smile:</code><br>\n😓 - <code>:sweat:</code><br>\n😥 - <code>:disappointed_relieved:</code><br>\n😩 - <code>:weary:</code><br>\n😔 - <code>:pensive:</code><br>\n😞 - <code>:disappointed:</code><br>\n😖 - <code>:confounded:</code><br>\n😨 - <code>:fearful:</code><br>\n😰 - <code>:cold_sweat:</code><br>\n😣 - <code>:persevere:</code><br>\n😢 - <code>:cry:</code><br>\n😭 - <code>:sob:</code><br>\n😂 - <code>:joy:</code><br>\n😲 - <code>:astonished:</code><br>\n😱 - <code>:scream:</code><br>\n:neckbeard: - <code>:neckbeard:</code><br>\n😫 - <code>:tired_face:</code><br>\n😠 - <code>:angry:</code><br>\n😡 - <code>:rage:</code><br>\n😤 - <code>:triumph:</code><br>\n😪 - <code>:sleepy:</code><br>\n😋 - <code>:yum:</code><br>\n😷 - <code>:mask:</code><br>\n😎 - <code>:sunglasses:</code><br>\n😵 - <code>:dizzy_face:</code><br>\n👿 - <code>:imp:</code><br>\n😈 - <code>:smiling_imp:</code><br>\n😐 - <code>:neutral_face:</code><br>\n😶 - <code>:no_mouth:</code><br>\n😇 - <code>:innocent:</code><br>\n👽 - <code>:alien:</code><br>\n💛 - <code>:yellow_heart:</code><br>\n💙 - <code>:blue_heart:</code><br>\n💜 - <code>:purple_heart:</code><br>\n❤️ - <code>:heart:</code><br>\n💚 - <code>:green_heart:</code><br>\n💔 - <code>:broken_heart:</code><br>\n💓 - <code>:heartbeat:</code><br>\n💗 - <code>:heartpulse:</code><br>\n💕 - <code>:two_hearts:</code><br>\n💞 - <code>:revolving_hearts:</code><br>\n💘 - <code>:cupid:</code><br>\n💖 - <code>:sparkling_heart:</code><br>\n✨ - <code>:sparkles:</code><br>\n⭐️ - <code>:star:</code><br>\n🌟 - <code>:star2:</code><br>\n💫 - <code>:dizzy:</code><br>\n💥 - <code>:boom:</code><br>\n💥 - <code>:collision:</code><br>\n💢 - <code>:anger:</code><br>\n❗️ - <code>:exclamation:</code><br>\n❓ - <code>:question:</code><br>\n❕ - <code>:grey_exclamation:</code><br>\n❔ - <code>:grey_question:</code><br>\n💤 - <code>:zzz:</code><br>\n💨 - <code>:dash:</code><br>\n💦 - <code>:sweat_drops:</code><br>\n🎶 - <code>:notes:</code><br>\n🎵 - <code>:musical_note:</code><br>\n🔥 - <code>:fire:</code><br>\n💩 - <code>:hankey:</code><br>\n💩 - <code>:poop:</code><br>\n💩 - <code>:shit:</code><br>\n👍 - <code>:+1:</code><br>\n👍 - <code>:thumbsup:</code><br>\n👎 - <code>:-1:</code><br>\n👎 - <code>:thumbsdown:</code><br>\n👌 - <code>:ok_hand:</code><br>\n👊 - <code>:punch:</code><br>\n👊 - <code>:facepunch:</code><br>\n✊ - <code>:fist:</code><br>\n✌️ - <code>:v:</code><br>\n👋 - <code>:wave:</code><br>\n✋ - <code>:hand:</code><br>\n✋ - <code>:raised_hand:</code><br>\n👐 - <code>:open_hands:</code><br>\n☝️ - <code>:point_up:</code><br>\n👇 - <code>:point_down:</code><br>\n👈 - <code>:point_left:</code><br>\n👉 - <code>:point_right:</code><br>\n🙌 - <code>:raised_hands:</code><br>\n🙏 - <code>:pray:</code><br>\n👆 - <code>:point_up_2:</code><br>\n👏 - <code>:clap:</code><br>\n💪 - <code>:muscle:</code><br>\n🤘 - <code>:metal:</code><br>\n🖕 - <code>:fu:</code><br>\n🏃 - <code>:runner:</code><br>\n🏃 - <code>:running:</code><br>\n👫 - <code>:couple:</code><br>\n👪 - <code>:family:</code><br>\n👬 - <code>:two_men_holding_hands:</code><br>\n👭 - <code>:two_women_holding_hands:</code><br>\n💃 - <code>:dancer:</code><br>\n👯 - <code>:dancers:</code><br>\n🙆 - <code>:ok_woman:</code><br>\n🙅 - <code>:no_good:</code><br>\n💁 - <code>:information_desk_person:</code><br>\n🙋 - <code>:raising_hand:</code><br>\n👰 - <code>:bride_with_veil:</code><br>\n🙎 - <code>:person_with_pouting_face:</code><br>\n🙍 - <code>:person_frowning:</code><br>\n🙇 - <code>:bow:</code><br>\n:couplekiss: - <code>:couplekiss:</code><br>\n💑 - <code>:couple_with_heart:</code><br>\n💆 - <code>:massage:</code><br>\n💇 - <code>:haircut:</code><br>\n💅 - <code>:nail_care:</code><br>\n👦 - <code>:boy:</code><br>\n👧 - <code>:girl:</code><br>\n👩 - <code>:woman:</code><br>\n👨 - <code>:man:</code><br>\n👶 - <code>:baby:</code><br>\n👵 - <code>:older_woman:</code><br>\n👴 - <code>:older_man:</code><br>\n👱 - <code>:person_with_blond_hair:</code><br>\n👲 - <code>:man_with_gua_pi_mao:</code><br>\n👳 - <code>:man_with_turban:</code><br>\n👷 - <code>:construction_worker:</code><br>\n👮 - <code>:cop:</code><br>\n👼 - <code>:angel:</code><br>\n👸 - <code>:princess:</code><br>\n😺 - <code>:smiley_cat:</code><br>\n😸 - <code>:smile_cat:</code><br>\n😻 - <code>:heart_eyes_cat:</code><br>\n😽 - <code>:kissing_cat:</code><br>\n😼 - <code>:smirk_cat:</code><br>\n🙀 - <code>:scream_cat:</code><br>\n😿 - <code>:crying_cat_face:</code><br>\n😹 - <code>:joy_cat:</code><br>\n😾 - <code>:pouting_cat:</code><br>\n👹 - <code>:japanese_ogre:</code><br>\n👺 - <code>:japanese_goblin:</code><br>\n🙈 - <code>:see_no_evil:</code><br>\n🙉 - <code>:hear_no_evil:</code><br>\n🙊 - <code>:speak_no_evil:</code><br>\n💂 - <code>:guardsman:</code><br>\n💀 - <code>:skull:</code><br>\n🐾 - <code>:feet:</code><br>\n👄 - <code>:lips:</code><br>\n💋 - <code>:kiss:</code><br>\n💧 - <code>:droplet:</code><br>\n👂 - <code>:ear:</code><br>\n👀 - <code>:eyes:</code><br>\n👃 - <code>:nose:</code><br>\n👅 - <code>:tongue:</code><br>\n💌 - <code>:love_letter:</code><br>\n👤 - <code>:bust_in_silhouette:</code><br>\n👥 - <code>:busts_in_silhouette:</code><br>\n💬 - <code>:speech_balloon:</code><br>\n💭 - <code>:thought_balloon:</code><br>\n:feelsgood: - <code>:feelsgood:</code><br>\n:finnadie: - <code>:finnadie:</code><br>\n:goberserk: - <code>:goberserk:</code><br>\n:godmode: - <code>:godmode:</code><br>\n:hurtrealbad: - <code>:hurtrealbad:</code><br>\n:rage1: - <code>:rage1:</code><br>\n:rage2: - <code>:rage2:</code><br>\n:rage3: - <code>:rage3:</code><br>\n:rage4: - <code>:rage4:</code><br>\n:suspect: - <code>:suspect:</code><br>\n:trollface: - <code>:trollface:</code></p>\n<h3 id=\"nature\"><a class=\"header-anchor\" href=\"#nature\">¶</a>Nature</h3>\n<p>☀️ - <code>:sunny:</code><br>\n☔️ - <code>:umbrella:</code><br>\n☁️ - <code>:cloud:</code><br>\n❄️ - <code>:snowflake:</code><br>\n⛄️ - <code>:snowman:</code><br>\n⚡️ - <code>:zap:</code><br>\n🌀 - <code>:cyclone:</code><br>\n🌁 - <code>:foggy:</code><br>\n🌊 - <code>:ocean:</code><br>\n🐱 - <code>:cat:</code><br>\n🐶 - <code>:dog:</code><br>\n🐭 - <code>:mouse:</code><br>\n🐹 - <code>:hamster:</code><br>\n🐰 - <code>:rabbit:</code><br>\n🐺 - <code>:wolf:</code><br>\n🐸 - <code>:frog:</code><br>\n🐯 - <code>:tiger:</code><br>\n🐨 - <code>:koala:</code><br>\n🐻 - <code>:bear:</code><br>\n🐷 - <code>:pig:</code><br>\n🐽 - <code>:pig_nose:</code><br>\n🐮 - <code>:cow:</code><br>\n🐗 - <code>:boar:</code><br>\n🐵 - <code>:monkey_face:</code><br>\n🐒 - <code>:monkey:</code><br>\n🐴 - <code>:horse:</code><br>\n🐎 - <code>:racehorse:</code><br>\n🐫 - <code>:camel:</code><br>\n🐑 - <code>:sheep:</code><br>\n🐘 - <code>:elephant:</code><br>\n🐼 - <code>:panda_face:</code><br>\n🐍 - <code>:snake:</code><br>\n🐦 - <code>:bird:</code><br>\n🐤 - <code>:baby_chick:</code><br>\n🐥 - <code>:hatched_chick:</code><br>\n🐣 - <code>:hatching_chick:</code><br>\n🐔 - <code>:chicken:</code><br>\n🐧 - <code>:penguin:</code><br>\n🐢 - <code>:turtle:</code><br>\n🐛 - <code>:bug:</code><br>\n🐝 - <code>:honeybee:</code><br>\n🐜 - <code>:ant:</code><br>\n🐞 - <code>:beetle:</code><br>\n🐌 - <code>:snail:</code><br>\n🐙 - <code>:octopus:</code><br>\n🐠 - <code>:tropical_fish:</code><br>\n🐟 - <code>:fish:</code><br>\n🐳 - <code>:whale:</code><br>\n🐋 - <code>:whale2:</code><br>\n🐬 - <code>:dolphin:</code><br>\n🐄 - <code>:cow2:</code><br>\n🐏 - <code>:ram:</code><br>\n🐀 - <code>:rat:</code><br>\n🐃 - <code>:water_buffalo:</code><br>\n🐅 - <code>:tiger2:</code><br>\n🐇 - <code>:rabbit2:</code><br>\n🐉 - <code>:dragon:</code><br>\n🐐 - <code>:goat:</code><br>\n🐓 - <code>:rooster:</code><br>\n🐕 - <code>:dog2:</code><br>\n🐖 - <code>:pig2:</code><br>\n🐁 - <code>:mouse2:</code><br>\n🐂 - <code>:ox:</code><br>\n🐲 - <code>:dragon_face:</code><br>\n🐡 - <code>:blowfish:</code><br>\n🐊 - <code>:crocodile:</code><br>\n🐪 - <code>:dromedary_camel:</code><br>\n🐆 - <code>:leopard:</code><br>\n🐈 - <code>:cat2:</code><br>\n🐩 - <code>:poodle:</code><br>\n🐾 - <code>:paw_prints:</code><br>\n💐 - <code>:bouquet:</code><br>\n🌸 - <code>:cherry_blossom:</code><br>\n🌷 - <code>:tulip:</code><br>\n🍀 - <code>:four_leaf_clover:</code><br>\n🌹 - <code>:rose:</code><br>\n🌻 - <code>:sunflower:</code><br>\n🌺 - <code>:hibiscus:</code><br>\n🍁 - <code>:maple_leaf:</code><br>\n🍃 - <code>:leaves:</code><br>\n🍂 - <code>:fallen_leaf:</code><br>\n🌿 - <code>:herb:</code><br>\n🍄 - <code>:mushroom:</code><br>\n🌵 - <code>:cactus:</code><br>\n🌴 - <code>:palm_tree:</code><br>\n🌲 - <code>:evergreen_tree:</code><br>\n🌳 - <code>:deciduous_tree:</code><br>\n🌰 - <code>:chestnut:</code><br>\n🌱 - <code>:seedling:</code><br>\n🌼 - <code>:blossom:</code><br>\n🌾 - <code>:ear_of_rice:</code><br>\n🐚 - <code>:shell:</code><br>\n🌐 - <code>:globe_with_meridians:</code><br>\n🌞 - <code>:sun_with_face:</code><br>\n🌝 - <code>:full_moon_with_face:</code><br>\n🌚 - <code>:new_moon_with_face:</code><br>\n🌑 - <code>:new_moon:</code><br>\n🌒 - <code>:waxing_crescent_moon:</code><br>\n🌓 - <code>:first_quarter_moon:</code><br>\n🌔 - <code>:waxing_gibbous_moon:</code><br>\n🌕 - <code>:full_moon:</code><br>\n🌖 - <code>:waning_gibbous_moon:</code><br>\n🌗 - <code>:last_quarter_moon:</code><br>\n🌘 - <code>:waning_crescent_moon:</code><br>\n🌜 - <code>:last_quarter_moon_with_face:</code><br>\n🌛 - <code>:first_quarter_moon_with_face:</code><br>\n🌙 - <code>:crescent_moon:</code><br>\n🌍 - <code>:earth_africa:</code><br>\n🌎 - <code>:earth_americas:</code><br>\n🌏 - <code>:earth_asia:</code><br>\n🌋 - <code>:volcano:</code><br>\n🌌 - <code>:milky_way:</code><br>\n⛅️ - <code>:partly_sunny:</code><br>\n:octocat: - <code>:octocat:</code><br>\n:squirrel: - <code>:squirrel:</code></p>\n<h3 id=\"objects\"><a class=\"header-anchor\" href=\"#objects\">¶</a>Objects</h3>\n<p>🎍 - <code>:bamboo:</code><br>\n💝 - <code>:gift_heart:</code><br>\n🎎 - <code>:dolls:</code><br>\n🎒 - <code>:school_satchel:</code><br>\n🎓 - <code>:mortar_board:</code><br>\n🎏 - <code>:flags:</code><br>\n🎆 - <code>:fireworks:</code><br>\n🎇 - <code>:sparkler:</code><br>\n🎐 - <code>:wind_chime:</code><br>\n🎑 - <code>:rice_scene:</code><br>\n🎃 - <code>:jack_o_lantern:</code><br>\n👻 - <code>:ghost:</code><br>\n🎅 - <code>:santa:</code><br>\n🎄 - <code>:christmas_tree:</code><br>\n🎁 - <code>:gift:</code><br>\n🔔 - <code>:bell:</code><br>\n🔕 - <code>:no_bell:</code><br>\n🎋 - <code>:tanabata_tree:</code><br>\n🎉 - <code>:tada:</code><br>\n🎊 - <code>:confetti_ball:</code><br>\n🎈 - <code>:balloon:</code><br>\n🔮 - <code>:crystal_ball:</code><br>\n💿 - <code>:cd:</code><br>\n📀 - <code>:dvd:</code><br>\n💾 - <code>:floppy_disk:</code><br>\n📷 - <code>:camera:</code><br>\n📹 - <code>:video_camera:</code><br>\n🎥 - <code>:movie_camera:</code><br>\n💻 - <code>:computer:</code><br>\n📺 - <code>:tv:</code><br>\n📱 - <code>:iphone:</code><br>\n☎️ - <code>:phone:</code><br>\n☎️ - <code>:telephone:</code><br>\n📞 - <code>:telephone_receiver:</code><br>\n📟 - <code>:pager:</code><br>\n📠 - <code>:fax:</code><br>\n💽 - <code>:minidisc:</code><br>\n📼 - <code>:vhs:</code><br>\n🔉 - <code>:sound:</code><br>\n🔈 - <code>:speaker:</code><br>\n🔇 - <code>:mute:</code><br>\n📢 - <code>:loudspeaker:</code><br>\n📣 - <code>:mega:</code><br>\n⌛️ - <code>:hourglass:</code><br>\n⏳ - <code>:hourglass_flowing_sand:</code><br>\n⏰ - <code>:alarm_clock:</code><br>\n⌚️ - <code>:watch:</code><br>\n📻 - <code>:radio:</code><br>\n📡 - <code>:satellite:</code><br>\n➿ - <code>:loop:</code><br>\n🔍 - <code>:mag:</code><br>\n🔎 - <code>:mag_right:</code><br>\n🔓 - <code>:unlock:</code><br>\n🔒 - <code>:lock:</code><br>\n🔏 - <code>:lock_with_ink_pen:</code><br>\n🔐 - <code>:closed_lock_with_key:</code><br>\n🔑 - <code>:key:</code><br>\n💡 - <code>:bulb:</code><br>\n🔦 - <code>:flashlight:</code><br>\n🔆 - <code>:high_brightness:</code><br>\n🔅 - <code>:low_brightness:</code><br>\n🔌 - <code>:electric_plug:</code><br>\n🔋 - <code>:battery:</code><br>\n📲 - <code>:calling:</code><br>\n✉️ - <code>:email:</code><br>\n📫 - <code>:mailbox:</code><br>\n📮 - <code>:postbox:</code><br>\n🛀 - <code>:bath:</code><br>\n🛁 - <code>:bathtub:</code><br>\n🚿 - <code>:shower:</code><br>\n🚽 - <code>:toilet:</code><br>\n🔧 - <code>:wrench:</code><br>\n🔩 - <code>:nut_and_bolt:</code><br>\n🔨 - <code>:hammer:</code><br>\n💺 - <code>:seat:</code><br>\n💰 - <code>:moneybag:</code><br>\n💴 - <code>:yen:</code><br>\n💵 - <code>:dollar:</code><br>\n💷 - <code>:pound:</code><br>\n💶 - <code>:euro:</code><br>\n💳 - <code>:credit_card:</code><br>\n💸 - <code>:money_with_wings:</code><br>\n📧 - <code>:e-mail:</code><br>\n📥 - <code>:inbox_tray:</code><br>\n📤 - <code>:outbox_tray:</code><br>\n✉️ - <code>:envelope:</code><br>\n📨 - <code>:incoming_envelope:</code><br>\n📯 - <code>:postal_horn:</code><br>\n📪 - <code>:mailbox_closed:</code><br>\n📬 - <code>:mailbox_with_mail:</code><br>\n📭 - <code>:mailbox_with_no_mail:</code><br>\n📦 - <code>:package:</code><br>\n🚪 - <code>:door:</code><br>\n🚬 - <code>:smoking:</code><br>\n💣 - <code>:bomb:</code><br>\n🔫 - <code>:gun:</code><br>\n🔪 - <code>:hocho:</code><br>\n💊 - <code>:pill:</code><br>\n💉 - <code>:syringe:</code><br>\n📄 - <code>:page_facing_up:</code><br>\n📃 - <code>:page_with_curl:</code><br>\n📑 - <code>:bookmark_tabs:</code><br>\n📊 - <code>:bar_chart:</code><br>\n📈 - <code>:chart_with_upwards_trend:</code><br>\n📉 - <code>:chart_with_downwards_trend:</code><br>\n📜 - <code>:scroll:</code><br>\n📋 - <code>:clipboard:</code><br>\n📆 - <code>:calendar:</code><br>\n📅 - <code>:date:</code><br>\n📇 - <code>:card_index:</code><br>\n📁 - <code>:file_folder:</code><br>\n📂 - <code>:open_file_folder:</code><br>\n✂️ - <code>:scissors:</code><br>\n📌 - <code>:pushpin:</code><br>\n📎 - <code>:paperclip:</code><br>\n✒️ - <code>:black_nib:</code><br>\n✏️ - <code>:pencil2:</code><br>\n📏 - <code>:straight_ruler:</code><br>\n📐 - <code>:triangular_ruler:</code><br>\n📕 - <code>:closed_book:</code><br>\n📗 - <code>:green_book:</code><br>\n📘 - <code>:blue_book:</code><br>\n📙 - <code>:orange_book:</code><br>\n📓 - <code>:notebook:</code><br>\n📔 - <code>:notebook_with_decorative_cover:</code><br>\n📒 - <code>:ledger:</code><br>\n📚 - <code>:books:</code><br>\n🔖 - <code>:bookmark:</code><br>\n📛 - <code>:name_badge:</code><br>\n🔬 - <code>:microscope:</code><br>\n🔭 - <code>:telescope:</code><br>\n📰 - <code>:newspaper:</code><br>\n🏈 - <code>:football:</code><br>\n🏀 - <code>:basketball:</code><br>\n⚽️ - <code>:soccer:</code><br>\n⚾️ - <code>:baseball:</code><br>\n🎾 - <code>:tennis:</code><br>\n🎱 - <code>:8ball:</code><br>\n🎱 - <code>:8ball:</code><br>\n🏉 - <code>:rugby_football:</code><br>\n🎳 - <code>:bowling:</code><br>\n⛳️ - <code>:golf:</code><br>\n🚵 - <code>:mountain_bicyclist:</code><br>\n🚴 - <code>:bicyclist:</code><br>\n🏇 - <code>:horse_racing:</code><br>\n🏂 - <code>:snowboarder:</code><br>\n🏊 - <code>:swimmer:</code><br>\n🏄 - <code>:surfer:</code><br>\n🎿 - <code>:ski:</code><br>\n♠️ - <code>:spades:</code><br>\n♥️ - <code>:hearts:</code><br>\n♣️ - <code>:clubs:</code><br>\n♦️ - <code>:diamonds:</code><br>\n💎 - <code>:gem:</code><br>\n💍 - <code>:ring:</code><br>\n🏆 - <code>:trophy:</code><br>\n🎼 - <code>:musical_score:</code><br>\n🎹 - <code>:musical_keyboard:</code><br>\n🎻 - <code>:violin:</code><br>\n👾 - <code>:space_invader:</code><br>\n🎮 - <code>:video_game:</code><br>\n🃏 - <code>:black_joker:</code><br>\n🎴 - <code>:flower_playing_cards:</code><br>\n🎲 - <code>:game_die:</code><br>\n🎯 - <code>:dart:</code><br>\n🀄️ - <code>:mahjong:</code><br>\n🎬 - <code>:clapper:</code><br>\n📝 - <code>:memo:</code><br>\n📝 - <code>:pencil:</code><br>\n📖 - <code>:book:</code><br>\n🎨 - <code>:art:</code><br>\n🎤 - <code>:microphone:</code><br>\n🎧 - <code>:headphones:</code><br>\n🎺 - <code>:trumpet:</code><br>\n🎷 - <code>:saxophone:</code><br>\n🎸 - <code>:guitar:</code><br>\n👞 - <code>:shoe:</code><br>\n👡 - <code>:sandal:</code><br>\n👠 - <code>:high_heel:</code><br>\n💄 - <code>:lipstick:</code><br>\n👢 - <code>:boot:</code><br>\n👕 - <code>:shirt:</code><br>\n👕 - <code>:tshirt:</code><br>\n👔 - <code>:necktie:</code><br>\n👚 - <code>:womans_clothes:</code><br>\n👗 - <code>:dress:</code><br>\n🎽 - <code>:running_shirt_with_sash:</code><br>\n👖 - <code>:jeans:</code><br>\n👘 - <code>:kimono:</code><br>\n👙 - <code>:bikini:</code><br>\n🎀 - <code>:ribbon:</code><br>\n🎩 - <code>:tophat:</code><br>\n👑 - <code>:crown:</code><br>\n👒 - <code>:womans_hat:</code><br>\n👞 - <code>:mans_shoe:</code><br>\n🌂 - <code>:closed_umbrella:</code><br>\n💼 - <code>:briefcase:</code><br>\n👜 - <code>:handbag:</code><br>\n👝 - <code>:pouch:</code><br>\n👛 - <code>:purse:</code><br>\n👓 - <code>:eyeglasses:</code><br>\n🎣 - <code>:fishing_pole_and_fish:</code><br>\n☕️ - <code>:coffee:</code><br>\n🍵 - <code>:tea:</code><br>\n🍶 - <code>:sake:</code><br>\n🍼 - <code>:baby_bottle:</code><br>\n🍺 - <code>:beer:</code><br>\n🍻 - <code>:beers:</code><br>\n🍸 - <code>:cocktail:</code><br>\n🍹 - <code>:tropical_drink:</code><br>\n🍷 - <code>:wine_glass:</code><br>\n🍴 - <code>:fork_and_knife:</code><br>\n🍕 - <code>:pizza:</code><br>\n🍔 - <code>:hamburger:</code><br>\n🍟 - <code>:fries:</code><br>\n🍗 - <code>:poultry_leg:</code><br>\n🍖 - <code>:meat_on_bone:</code><br>\n🍝 - <code>:spaghetti:</code><br>\n🍛 - <code>:curry:</code><br>\n🍤 - <code>:fried_shrimp:</code><br>\n🍱 - <code>:bento:</code><br>\n🍣 - <code>:sushi:</code><br>\n🍥 - <code>:fish_cake:</code><br>\n🍙 - <code>:rice_ball:</code><br>\n🍘 - <code>:rice_cracker:</code><br>\n🍚 - <code>:rice:</code><br>\n🍜 - <code>:ramen:</code><br>\n🍲 - <code>:stew:</code><br>\n🍢 - <code>:oden:</code><br>\n🍡 - <code>:dango:</code><br>\n🥚 - <code>:egg:</code><br>\n🍞 - <code>:bread:</code><br>\n🍩 - <code>:doughnut:</code><br>\n🍮 - <code>:custard:</code><br>\n🍦 - <code>:icecream:</code><br>\n🍨 - <code>:ice_cream:</code><br>\n🍧 - <code>:shaved_ice:</code><br>\n🎂 - <code>:birthday:</code><br>\n🍰 - <code>:cake:</code><br>\n🍪 - <code>:cookie:</code><br>\n🍫 - <code>:chocolate_bar:</code><br>\n🍬 - <code>:candy:</code><br>\n🍭 - <code>:lollipop:</code><br>\n🍯 - <code>:honey_pot:</code><br>\n🍎 - <code>:apple:</code><br>\n🍏 - <code>:green_apple:</code><br>\n🍊 - <code>:tangerine:</code><br>\n🍋 - <code>:lemon:</code><br>\n🍒 - <code>:cherries:</code><br>\n🍇 - <code>:grapes:</code><br>\n🍉 - <code>:watermelon:</code><br>\n🍓 - <code>:strawberry:</code><br>\n🍑 - <code>:peach:</code><br>\n🍈 - <code>:melon:</code><br>\n🍌 - <code>:banana:</code><br>\n🍐 - <code>:pear:</code><br>\n🍍 - <code>:pineapple:</code><br>\n🍠 - <code>:sweet_potato:</code><br>\n🍆 - <code>:eggplant:</code><br>\n🍅 - <code>:tomato:</code><br>\n🌽 - <code>:corn:</code></p>\n<h3 id=\"places\"><a class=\"header-anchor\" href=\"#places\">¶</a>Places</h3>\n<p>🏠 - <code>:house:</code><br>\n🏡 - <code>:house_with_garden:</code><br>\n🏫 - <code>:school:</code><br>\n🏢 - <code>:office:</code><br>\n🏣 - <code>:post_office:</code><br>\n🏥 - <code>:hospital:</code><br>\n🏦 - <code>:bank:</code><br>\n🏪 - <code>:convenience_store:</code><br>\n🏩 - <code>:love_hotel:</code><br>\n🏨 - <code>:hotel:</code><br>\n💒 - <code>:wedding:</code><br>\n⛪️ - <code>:church:</code><br>\n🏬 - <code>:department_store:</code><br>\n🏤 - <code>:european_post_office:</code><br>\n🌇 - <code>:city_sunrise:</code><br>\n🌆 - <code>:city_sunset:</code><br>\n🏯 - <code>:japanese_castle:</code><br>\n🏰 - <code>:european_castle:</code><br>\n⛺️ - <code>:tent:</code><br>\n🏭 - <code>:factory:</code><br>\n🗼 - <code>:tokyo_tower:</code><br>\n🗾 - <code>:japan:</code><br>\n🗻 - <code>:mount_fuji:</code><br>\n🌄 - <code>:sunrise_over_mountains:</code><br>\n🌅 - <code>:sunrise:</code><br>\n🌠 - <code>:stars:</code><br>\n🗽 - <code>:statue_of_liberty:</code><br>\n🌉 - <code>:bridge_at_night:</code><br>\n🎠 - <code>:carousel_horse:</code><br>\n🌈 - <code>:rainbow:</code><br>\n🎡 - <code>:ferris_wheel:</code><br>\n⛲️ - <code>:fountain:</code><br>\n🎢 - <code>:roller_coaster:</code><br>\n🚢 - <code>:ship:</code><br>\n🚤 - <code>:speedboat:</code><br>\n⛵️ - <code>:boat:</code><br>\n⛵️ - <code>:sailboat:</code><br>\n🚣 - <code>:rowboat:</code><br>\n⚓️ - <code>:anchor:</code><br>\n🚀 - <code>:rocket:</code><br>\n✈️ - <code>:airplane:</code><br>\n🚁 - <code>:helicopter:</code><br>\n🚂 - <code>:steam_locomotive:</code><br>\n🚊 - <code>:tram:</code><br>\n🚞 - <code>:mountain_railway:</code><br>\n🚲 - <code>:bike:</code><br>\n🚡 - <code>:aerial_tramway:</code><br>\n🚟 - <code>:suspension_railway:</code><br>\n🚠 - <code>:mountain_cableway:</code><br>\n🚜 - <code>:tractor:</code><br>\n🚙 - <code>:blue_car:</code><br>\n🚘 - <code>:oncoming_automobile:</code><br>\n🚗 - <code>:car:</code><br>\n🚗 - <code>:red_car:</code><br>\n🚕 - <code>:taxi:</code><br>\n🚖 - <code>:oncoming_taxi:</code><br>\n🚛 - <code>:articulated_lorry:</code><br>\n🚌 - <code>:bus:</code><br>\n🚍 - <code>:oncoming_bus:</code><br>\n🚨 - <code>:rotating_light:</code><br>\n🚓 - <code>:police_car:</code><br>\n🚔 - <code>:oncoming_police_car:</code><br>\n🚒 - <code>:fire_engine:</code><br>\n🚑 - <code>:ambulance:</code><br>\n🚐 - <code>:minibus:</code><br>\n🚚 - <code>:truck:</code><br>\n🚋 - <code>:train:</code><br>\n🚉 - <code>:station:</code><br>\n🚆 - <code>:train2:</code><br>\n🚅 - <code>:bullettrain_front:</code><br>\n🚄 - <code>:bullettrain_side:</code><br>\n🚈 - <code>:light_rail:</code><br>\n🚝 - <code>:monorail:</code><br>\n🚃 - <code>:railway_car:</code><br>\n🚎 - <code>:trolleybus:</code><br>\n🎫 - <code>:ticket:</code><br>\n⛽️ - <code>:fuelpump:</code><br>\n🚦 - <code>:vertical_traffic_light:</code><br>\n🚥 - <code>:traffic_light:</code><br>\n⚠️ - <code>:warning:</code><br>\n🚧 - <code>:construction:</code><br>\n🔰 - <code>:beginner:</code><br>\n🏧 - <code>:atm:</code><br>\n🎰 - <code>:slot_machine:</code><br>\n🚏 - <code>:busstop:</code><br>\n💈 - <code>:barber:</code><br>\n♨️ - <code>:hotsprings:</code><br>\n🏁 - <code>:checkered_flag:</code><br>\n🎌 - <code>:crossed_flags:</code><br>\n🏮 - <code>:izakaya_lantern:</code><br>\n🗿 - <code>:moyai:</code><br>\n🎪 - <code>:circus_tent:</code><br>\n🎭 - <code>:performing_arts:</code><br>\n📍 - <code>:round_pushpin:</code><br>\n🚩 - <code>:triangular_flag_on_post:</code><br>\n🇯🇵 - <code>:jp:</code><br>\n🇰🇷 - <code>:kr:</code><br>\n🇨🇳 - <code>:cn:</code><br>\n🇺🇸 - <code>:us:</code><br>\n🇫🇷 - <code>:fr:</code><br>\n🇪🇸 - <code>:es:</code><br>\n🇮🇹 - <code>:it:</code><br>\n🇷🇺 - <code>:ru:</code><br>\n🇬🇧 - <code>:gb:</code><br>\n🇬🇧 - <code>:uk:</code><br>\n🇩🇪 - <code>:de:</code></p>\n<h3 id=\"symbols\"><a class=\"header-anchor\" href=\"#symbols\">¶</a>Symbols</h3>\n<p>1️⃣ - <code>:one:</code><br>\n2️⃣ - <code>:two:</code><br>\n3️⃣ - <code>:three:</code><br>\n4️⃣ - <code>:four:</code><br>\n5️⃣ - <code>:five:</code><br>\n6️⃣ - <code>:six:</code><br>\n7️⃣ - <code>:seven:</code><br>\n8️⃣ - <code>:eight:</code><br>\n9️⃣ - <code>:nine:</code><br>\n🔟 - <code>:keycap_ten:</code><br>\n🔢 - <code>:1234:</code><br>\n0️⃣ - <code>:zero:</code><br>\n#️⃣ - <code>:hash:</code><br>\n🔣 - <code>:symbols:</code><br>\n◀️ - <code>:arrow_backward:</code><br>\n⬇️ - <code>:arrow_down:</code><br>\n▶️ - <code>:arrow_forward:</code><br>\n⬅️ - <code>:arrow_left:</code><br>\n🔠 - <code>:capital_abcd:</code><br>\n🔡 - <code>:abcd:</code><br>\n🔤 - <code>:abc:</code><br>\n↙️ - <code>:arrow_lower_left:</code><br>\n↘️ - <code>:arrow_lower_right:</code><br>\n➡️ - <code>:arrow_right:</code><br>\n⬆️ - <code>:arrow_up:</code><br>\n↖️ - <code>:arrow_upper_left:</code><br>\n↗️ - <code>:arrow_upper_right:</code><br>\n⏬ - <code>:arrow_double_down:</code><br>\n⏫ - <code>:arrow_double_up:</code><br>\n🔽 - <code>:arrow_down_small:</code><br>\n⤵️ - <code>:arrow_heading_down:</code><br>\n⤴️ - <code>:arrow_heading_up:</code><br>\n↩️ - <code>:leftwards_arrow_with_hook:</code><br>\n↪️ - <code>:arrow_right_hook:</code><br>\n↔️ - <code>:left_right_arrow:</code><br>\n↕️ - <code>:arrow_up_down:</code><br>\n🔼 - <code>:arrow_up_small:</code><br>\n🔃 - <code>:arrows_clockwise:</code><br>\n🔄 - <code>:arrows_counterclockwise:</code><br>\n⏪ - <code>:rewind:</code><br>\n⏩ - <code>:fast_forward:</code><br>\nℹ️ - <code>:information_source:</code><br>\n🆗 - <code>:ok:</code><br>\n🔀 - <code>:twisted_rightwards_arrows:</code><br>\n🔁 - <code>:repeat:</code><br>\n🔂 - <code>:repeat_one:</code><br>\n🆕 - <code>:new:</code><br>\n🔝 - <code>:top:</code><br>\n🆙 - <code>:up:</code><br>\n🆒 - <code>:cool:</code><br>\n🆓 - <code>:free:</code><br>\n🆖 - <code>:ng:</code><br>\n🎦 - <code>:cinema:</code><br>\n🈁 - <code>:koko:</code><br>\n📶 - <code>:signal_strength:</code><br>\n:u5272: - <code>:u5272:</code><br>\n:u5408: - <code>:u5408:</code><br>\n:u55b6: - <code>:u55b6:</code><br>\n:u6307: - <code>:u6307:</code><br>\n:u6708: - <code>:u6708:</code><br>\n:u6709: - <code>:u6709:</code><br>\n🈵 - <code>:u6e80:</code><br>\n:u7121: - <code>:u7121:</code><br>\n:u7533: - <code>:u7533:</code><br>\n:u7a7a: - <code>:u7a7a:</code><br>\n:u7981: - <code>:u7981:</code><br>\n🈂️ - <code>:sa:</code><br>\n🚻 - <code>:restroom:</code><br>\n🚹 - <code>:mens:</code><br>\n🚺 - <code>:womens:</code><br>\n🚼 - <code>:baby_symbol:</code><br>\n🚭 - <code>:no_smoking:</code><br>\n🅿️ - <code>:parking:</code><br>\n♿️ - <code>:wheelchair:</code><br>\n🚇 - <code>:metro:</code><br>\n🛄 - <code>:baggage_claim:</code><br>\n🉑 - <code>:accept:</code><br>\n🚾 - <code>:wc:</code><br>\n🚰 - <code>:potable_water:</code><br>\n🚮 - <code>:put_litter_in_its_place:</code><br>\n㊙️ - <code>:secret:</code><br>\n㊗️ - <code>:congratulations:</code><br>\nⓂ️ - <code>:m:</code><br>\n🛂 - <code>:passport_control:</code><br>\n🛅 - <code>:left_luggage:</code><br>\n🛃 - <code>:customs:</code><br>\n🉐 - <code>:ideograph_advantage:</code><br>\n🆑 - <code>:cl:</code><br>\n🆘 - <code>:sos:</code><br>\n🆔 - <code>:id:</code><br>\n🚫 - <code>:no_entry_sign:</code><br>\n🔞 - <code>:underage:</code><br>\n📵 - <code>:no_mobile_phones:</code><br>\n🚯 - <code>:do_not_litter:</code><br>\n🚱 - <code>:non-potable_water:</code><br>\n🚳 - <code>:no_bicycles:</code><br>\n🚷 - <code>:no_pedestrians:</code><br>\n🚸 - <code>:children_crossing:</code><br>\n⛔️ - <code>:no_entry:</code><br>\n✳️ - <code>:eight_spoked_asterisk:</code><br>\n❇️ - <code>:sparkle:</code><br>\n✴️ - <code>:eight_pointed_black_star:</code><br>\n💟 - <code>:heart_decoration:</code><br>\n🆚 - <code>:vs:</code><br>\n📳 - <code>:vibration_mode:</code><br>\n📴 - <code>:mobile_phone_off:</code><br>\n💹 - <code>:chart:</code><br>\n💱 - <code>:currency_exchange:</code><br>\n♈️ - <code>:aries:</code><br>\n♉️ - <code>:taurus:</code><br>\n♊️ - <code>:gemini:</code><br>\n♋️ - <code>:cancer:</code><br>\n♌️ - <code>:leo:</code><br>\n♍️ - <code>:virgo:</code><br>\n♎️ - <code>:libra:</code><br>\n♏️ - <code>:scorpius:</code><br>\n♐️ - <code>:sagittarius:</code><br>\n♑️ - <code>:capricorn:</code><br>\n♒️ - <code>:aquarius:</code><br>\n♓️ - <code>:pisces:</code><br>\n⛎ - <code>:ophiuchus:</code><br>\n🔯 - <code>:six_pointed_star:</code><br>\n❎ - <code>:negative_squared_cross_mark:</code><br>\n🅰️ - <code>:a:</code><br>\n🅱️ - <code>:b:</code><br>\n🆎 - <code>:ab:</code><br>\n🅾️ - <code>:o2:</code><br>\n💠 - <code>:diamond_shape_with_a_dot_inside:</code><br>\n♻️ - <code>:recycle:</code><br>\n🔚 - <code>:end:</code><br>\n🔙 - <code>:back:</code><br>\n🔛 - <code>:on:</code><br>\n🔜 - <code>:soon:</code><br>\n🕐 - <code>:clock1:</code><br>\n🕜 - <code>:clock130:</code><br>\n🕙 - <code>:clock10:</code><br>\n🕥 - <code>:clock1030:</code><br>\n🕚 - <code>:clock11:</code><br>\n🕦 - <code>:clock1130:</code><br>\n🕛 - <code>:clock12:</code><br>\n🕧 - <code>:clock1230:</code><br>\n🕑 - <code>:clock2:</code><br>\n🕝 - <code>:clock230:</code><br>\n🕒 - <code>:clock3:</code><br>\n🕞 - <code>:clock330:</code><br>\n🕓 - <code>:clock4:</code><br>\n🕟 - <code>:clock430:</code><br>\n🕔 - <code>:clock5:</code><br>\n🕠 - <code>:clock530:</code><br>\n🕕 - <code>:clock6:</code><br>\n🕡 - <code>:clock630:</code><br>\n🕖 - <code>:clock7:</code><br>\n🕢 - <code>:clock730:</code><br>\n🕗 - <code>:clock8:</code><br>\n🕣 - <code>:clock830:</code><br>\n🕘 - <code>:clock9:</code><br>\n🕤 - <code>:clock930:</code><br>\n💲 - <code>:heavy_dollar_sign:</code><br>\n©️ - <code>:copyright:</code><br>\n®️ - <code>:registered:</code><br>\n™️ - <code>:tm:</code><br>\n❌ - <code>:x:</code><br>\n❗️ - <code>:heavy_exclamation_mark:</code><br>\n‼️ - <code>:bangbang:</code><br>\n⁉️ - <code>:interrobang:</code><br>\n⭕️ - <code>:o:</code><br>\n✖️ - <code>:heavy_multiplication_x:</code><br>\n➕ - <code>:heavy_plus_sign:</code><br>\n➖ - <code>:heavy_minus_sign:</code><br>\n➗ - <code>:heavy_division_sign:</code><br>\n💮 - <code>:white_flower:</code><br>\n💯 - <code>:100:</code><br>\n✔️ - <code>:heavy_check_mark:</code><br>\n☑️ - <code>:ballot_box_with_check:</code><br>\n🔘 - <code>:radio_button:</code><br>\n🔗 - <code>:link:</code><br>\n➰ - <code>:curly_loop:</code><br>\n〰️ - <code>:wavy_dash:</code><br>\n〽️ - <code>:part_alternation_mark:</code><br>\n🔱 - <code>:trident:</code><br>\n▪️ - <code>:black_small_square:</code><br>\n▫️ - <code>:white_small_square:</code><br>\n◾️ - <code>:black_medium_small_square:</code><br>\n◽️ - <code>:white_medium_small_square:</code><br>\n◼️ - <code>:black_medium_square:</code><br>\n◻️ - <code>:white_medium_square:</code><br>\n⬛️ - <code>:black_large_square:</code><br>\n⬜️ - <code>:white_large_square:</code><br>\n✅ - <code>:white_check_mark:</code><br>\n🔲 - <code>:black_square_button:</code><br>\n🔳 - <code>:white_square_button:</code><br>\n⚫️ - <code>:black_circle:</code><br>\n⚪️ - <code>:white_circle:</code><br>\n🔴 - <code>:red_circle:</code><br>\n🔵 - <code>:large_blue_circle:</code><br>\n🔷 - <code>:large_blue_diamond:</code><br>\n🔶 - <code>:large_orange_diamond:</code><br>\n🔹 - <code>:small_blue_diamond:</code><br>\n🔸 - <code>:small_orange_diamond:</code><br>\n🔺 - <code>:small_red_triangle:</code><br>\n🔻 - <code>:small_red_triangle_down:</code><br>\n:shipit: - <code>:shipit:</code></p>"},{"title":"Hexo 的 markdown-it 渲染引擎和其相关插件","date":"2016-12-24T13:17:01.000Z","_content":"\n## 起因\n\n我想在上一篇文章末尾的 to do 事项前面添加复选框，即想在 hexo 下使用 markdown 语法写文章时，使用 `[ ]` 、 `[x]` 这样 Github 上特有的 markdown 方言（Github Flavored Markdown, GFM）来输出 checkbox 。\n\n在谷歌的过程中，当我看到 [github 上某位仁兄的抱怨](https://github.com/hexojs/hexo/issues/2161)说多种 hexo 的 markdown renderer 都对此问题无解的时候，一度陷入了绝望，甚至已经抱有了最终将使用非 markdown 语法（比如说，采用[使用 html 来实现 checkbox 的不太优雅的解决方案](http://zhoupq.com/%E7%94%A8-HTML-%E6%A0%87%E7%AD%BE%E5%AE%9E%E7%8E%B0-MarkDown-Task-List/)）的视死如归的觉悟。好在，暮然回首，[markdown-it](https://markdown-it.github.io/markdown-it/) 却在灯火阑珊处。\n\n<!-- more -->\n\n## 配置\n\n1. 修改 hexo 的 markdown 渲染引擎：\n    ```bash\n    $ cd hexo-blog.github.io/ # 首先进入你的 hexo 的根目录\n    $ npm un hexo-renderer-marked --save # 卸载 hexo 默认的 markdown 渲染引擎\n    $ npm i hexo-renderer-markdown-it --save # 安装 markdown-it\n    ```\n2. 下载 markdown-it 的 markdown-it-checkbox 插件：\n    ```bash\n    $ cd node_modules/hexo-renderer-markdown-it/\n    $ npm install markdown-it-checkbox --save\n    ```\n3. 在 hexo 的全局配置文件 `_config.yml` 添加以下：\n    ```yaml\n    # Markdown-it config\n    ## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\n    markdown:\n      render:\n        html: true # Doesn't escape HTML content so the tags will appear as html.\n        xhtmlOut: false # Parser will not produce XHTML compliant code.\n        breaks: true # Parser produces `<br>` tags every time there is a line break in the source document.\n        linkify: false # Returns text links as text.\n        typographer: true # Substitution of common typographical elements will take place.\n        quotes: '“”‘’' # \"double\" will be turned into “single”\n                       # 'single' will be turned into ‘single’\n      plugins:\n        + markdown-it-abbr\n        + markdown-it-checkbox # 本行启用了 checkbox 插件\n        + markdown-it-emoji # 如果你想在 md 中使用 emoji 表情的话，需要另外下载相关插件\n        + markdown-it-footnote\n        + markdown-it-ins\n        + markdown-it-sub\n        + markdown-it-sup\n      anchors:\n        level: 2 # Minimum level for ID creation. (Ex. h2 to h6)\n        collisionSuffix: 'v' # A suffix that is prepended to the number given if the ID is repeated.\n        permalink: true # If true, creates an anchor tag with a permalink besides the heading.\n        permalinkClass: header-anchor # Class used for the permalink anchor tag.\n        permalinkSymbol: ¶ # The symbol used to make the permalink.\n    ```\n4. 重启 hexo 服务器，刷新 localhost 页面：\n    ```bash\n    $ hexo s -g\n    ```\n\n## 效果\n\n最终，在文章中的显示效果：\n- [ ] 本行前面的复选框是使用 `[ ]` 语法实现的\n- [x] 本行前面的复选框是使用 `[x]` 语法实现的\n\n## To Do - 待改进的遗留问题\n\n### [x] 样式不太美观\n\n* 用的是浏览器默认样式（体验不好），且不符合本文目前使用 NexT 主题风格。\n* 书写时需要在 `[ ]` 后加两个空格，否则复选框和文字之间会没有空隙。\n\n1. 找到自定义样式的文件：`themes/next/source/css/_custom/` 路径下的 `custom.styl` 。\n2. 添加以下样式：\n    ```css\n    input[type=\"checkbox\"] {\n      display: none !important; // by imo: to overwrite styles in DuoShuo-Comments-Plugin\n    }\n    input[type=\"checkbox\"] + label::before {\n      content: '\\a0';\n      display: inline-block;\n      margin-right: .2em;\n      border: 1px solid;\n      border-radius: .2em;\n      width: .8em;\n      height: .8em;\n      vertical-align: .1em;\n      text-indent: .1em;\n      line-height: .7;\n    }\n    input[type=\"checkbox\"]:checked + label::before {\n      content: '\\2713';\n    }\n    ```\n\n### [ ] 非只读模式（可勾选和取消勾选）\n\n### [x] 其它：使用 markdown-it 的 anchors 功能带来的副作用\n\n- 使用 markdown-it 的 anchors 功能后，文章目录（Table of Content, TOC）中每个章节标题前均出现永久链接符号（默认为 `¶` ）。\n\n1. 找到 hexo 定义 toc 函数的文件：`/node_modules/hexo/lib/plugins/helper` 目录下的 `toc.js` 。\n2. 修改生成标题文本的代码行 `var text = $(this).text();` 为如下即可：\n    ```javascript\n    var text = $(this).text().slice(1);// by imo: remove markdown-it's anchor character in TOC\n    ```\n\n## 参考\n* [配置 hexo-renderer-markdown-it](http://yangfch3.com/2016/05/08/hexo-experiences/hexo-renderer-marked-it.txt)\n* ~~[Hexo 中添加 emoji 表情](http://www.cnblogs.com/fsong/p/5929773.html)~~[Hexo 中添加 emoji 表情](http://chaxiaoniu.oschina.io/2017/07/10/HexoAddEmoji/)\n* [为 Hexo 添加可折叠的文章目录](http://moxfive.xyz/2016/06/13/hexo-collapsible-toc/)\n* [hexo-renderer-markdown-it 在 github 上的文档](https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki/Advanced-Configuration)\n* [hexo-renderer-markdown-it 在 npm 上的文档](https://www.npmjs.com/package/hexo-renderer-markdown-it)\n\n\n","source":"_posts/hexo-render-markdown-it-and-its-plugins.md","raw":"---\ntitle: Hexo 的 markdown-it 渲染引擎和其相关插件\ndate: 2016-12-24 21:17:01\ntags: [hexo,markdown]\n---\n\n## 起因\n\n我想在上一篇文章末尾的 to do 事项前面添加复选框，即想在 hexo 下使用 markdown 语法写文章时，使用 `[ ]` 、 `[x]` 这样 Github 上特有的 markdown 方言（Github Flavored Markdown, GFM）来输出 checkbox 。\n\n在谷歌的过程中，当我看到 [github 上某位仁兄的抱怨](https://github.com/hexojs/hexo/issues/2161)说多种 hexo 的 markdown renderer 都对此问题无解的时候，一度陷入了绝望，甚至已经抱有了最终将使用非 markdown 语法（比如说，采用[使用 html 来实现 checkbox 的不太优雅的解决方案](http://zhoupq.com/%E7%94%A8-HTML-%E6%A0%87%E7%AD%BE%E5%AE%9E%E7%8E%B0-MarkDown-Task-List/)）的视死如归的觉悟。好在，暮然回首，[markdown-it](https://markdown-it.github.io/markdown-it/) 却在灯火阑珊处。\n\n<!-- more -->\n\n## 配置\n\n1. 修改 hexo 的 markdown 渲染引擎：\n    ```bash\n    $ cd hexo-blog.github.io/ # 首先进入你的 hexo 的根目录\n    $ npm un hexo-renderer-marked --save # 卸载 hexo 默认的 markdown 渲染引擎\n    $ npm i hexo-renderer-markdown-it --save # 安装 markdown-it\n    ```\n2. 下载 markdown-it 的 markdown-it-checkbox 插件：\n    ```bash\n    $ cd node_modules/hexo-renderer-markdown-it/\n    $ npm install markdown-it-checkbox --save\n    ```\n3. 在 hexo 的全局配置文件 `_config.yml` 添加以下：\n    ```yaml\n    # Markdown-it config\n    ## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\n    markdown:\n      render:\n        html: true # Doesn't escape HTML content so the tags will appear as html.\n        xhtmlOut: false # Parser will not produce XHTML compliant code.\n        breaks: true # Parser produces `<br>` tags every time there is a line break in the source document.\n        linkify: false # Returns text links as text.\n        typographer: true # Substitution of common typographical elements will take place.\n        quotes: '“”‘’' # \"double\" will be turned into “single”\n                       # 'single' will be turned into ‘single’\n      plugins:\n        + markdown-it-abbr\n        + markdown-it-checkbox # 本行启用了 checkbox 插件\n        + markdown-it-emoji # 如果你想在 md 中使用 emoji 表情的话，需要另外下载相关插件\n        + markdown-it-footnote\n        + markdown-it-ins\n        + markdown-it-sub\n        + markdown-it-sup\n      anchors:\n        level: 2 # Minimum level for ID creation. (Ex. h2 to h6)\n        collisionSuffix: 'v' # A suffix that is prepended to the number given if the ID is repeated.\n        permalink: true # If true, creates an anchor tag with a permalink besides the heading.\n        permalinkClass: header-anchor # Class used for the permalink anchor tag.\n        permalinkSymbol: ¶ # The symbol used to make the permalink.\n    ```\n4. 重启 hexo 服务器，刷新 localhost 页面：\n    ```bash\n    $ hexo s -g\n    ```\n\n## 效果\n\n最终，在文章中的显示效果：\n- [ ] 本行前面的复选框是使用 `[ ]` 语法实现的\n- [x] 本行前面的复选框是使用 `[x]` 语法实现的\n\n## To Do - 待改进的遗留问题\n\n### [x] 样式不太美观\n\n* 用的是浏览器默认样式（体验不好），且不符合本文目前使用 NexT 主题风格。\n* 书写时需要在 `[ ]` 后加两个空格，否则复选框和文字之间会没有空隙。\n\n1. 找到自定义样式的文件：`themes/next/source/css/_custom/` 路径下的 `custom.styl` 。\n2. 添加以下样式：\n    ```css\n    input[type=\"checkbox\"] {\n      display: none !important; // by imo: to overwrite styles in DuoShuo-Comments-Plugin\n    }\n    input[type=\"checkbox\"] + label::before {\n      content: '\\a0';\n      display: inline-block;\n      margin-right: .2em;\n      border: 1px solid;\n      border-radius: .2em;\n      width: .8em;\n      height: .8em;\n      vertical-align: .1em;\n      text-indent: .1em;\n      line-height: .7;\n    }\n    input[type=\"checkbox\"]:checked + label::before {\n      content: '\\2713';\n    }\n    ```\n\n### [ ] 非只读模式（可勾选和取消勾选）\n\n### [x] 其它：使用 markdown-it 的 anchors 功能带来的副作用\n\n- 使用 markdown-it 的 anchors 功能后，文章目录（Table of Content, TOC）中每个章节标题前均出现永久链接符号（默认为 `¶` ）。\n\n1. 找到 hexo 定义 toc 函数的文件：`/node_modules/hexo/lib/plugins/helper` 目录下的 `toc.js` 。\n2. 修改生成标题文本的代码行 `var text = $(this).text();` 为如下即可：\n    ```javascript\n    var text = $(this).text().slice(1);// by imo: remove markdown-it's anchor character in TOC\n    ```\n\n## 参考\n* [配置 hexo-renderer-markdown-it](http://yangfch3.com/2016/05/08/hexo-experiences/hexo-renderer-marked-it.txt)\n* ~~[Hexo 中添加 emoji 表情](http://www.cnblogs.com/fsong/p/5929773.html)~~[Hexo 中添加 emoji 表情](http://chaxiaoniu.oschina.io/2017/07/10/HexoAddEmoji/)\n* [为 Hexo 添加可折叠的文章目录](http://moxfive.xyz/2016/06/13/hexo-collapsible-toc/)\n* [hexo-renderer-markdown-it 在 github 上的文档](https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki/Advanced-Configuration)\n* [hexo-renderer-markdown-it 在 npm 上的文档](https://www.npmjs.com/package/hexo-renderer-markdown-it)\n\n\n","slug":"hexo-render-markdown-it-and-its-plugins","published":1,"updated":"2018-08-25T02:22:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbpu00195xzxfh6g00ha","content":"<h2 id=\"起因\"><a class=\"header-anchor\" href=\"#起因\">¶</a>起因</h2>\n<p>我想在上一篇文章末尾的 to do 事项前面添加复选框，即想在 hexo 下使用 markdown 语法写文章时，使用 <code>[ ]</code> 、 <code>[x]</code> 这样 Github 上特有的 markdown 方言（Github Flavored Markdown, GFM）来输出 checkbox 。</p>\n<p>在谷歌的过程中，当我看到 <a href=\"https://github.com/hexojs/hexo/issues/2161\" target=\"_blank\" rel=\"noopener\">github 上某位仁兄的抱怨</a>说多种 hexo 的 markdown renderer 都对此问题无解的时候，一度陷入了绝望，甚至已经抱有了最终将使用非 markdown 语法（比如说，采用<a href=\"http://zhoupq.com/%E7%94%A8-HTML-%E6%A0%87%E7%AD%BE%E5%AE%9E%E7%8E%B0-MarkDown-Task-List/\" target=\"_blank\" rel=\"noopener\">使用 html 来实现 checkbox 的不太优雅的解决方案</a>）的视死如归的觉悟。好在，暮然回首，<a href=\"https://markdown-it.github.io/markdown-it/\" target=\"_blank\" rel=\"noopener\">markdown-it</a> 却在灯火阑珊处。</p>\n<a id=\"more\"></a>\n<h2 id=\"配置\"><a class=\"header-anchor\" href=\"#配置\">¶</a>配置</h2>\n<ol>\n<li>\n<p>修改 hexo 的 markdown 渲染引擎：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-blog.github.io/ <span class=\"comment\"># 首先进入你的 hexo 的根目录</span></span><br><span class=\"line\">$ npm un hexo-renderer-marked --save <span class=\"comment\"># 卸载 hexo 默认的 markdown 渲染引擎</span></span><br><span class=\"line\">$ npm i hexo-renderer-markdown-it --save <span class=\"comment\"># 安装 markdown-it</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>下载 markdown-it 的 markdown-it-checkbox 插件：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> node_modules/hexo-renderer-markdown-it/</span><br><span class=\"line\">$ npm install markdown-it-checkbox --save</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在 hexo 的全局配置文件 <code>_config.yml</code> 添加以下：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Doesn't escape HTML content so the tags will appear as html.</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Parser will not produce XHTML compliant code.</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Parser produces `&lt;br&gt;` tags every time there is a line break in the source document.</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Returns text links as text.</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Substitution of common typographical elements will take place.</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span> <span class=\"comment\"># \"double\" will be turned into “single”</span></span><br><span class=\"line\">                   <span class=\"comment\"># 'single' will be turned into ‘single’</span></span><br><span class=\"line\"><span class=\"attr\">  plugins:</span></span><br><span class=\"line\">    <span class=\"string\">+</span> <span class=\"string\">markdown-it-abbr</span></span><br><span class=\"line\">    <span class=\"string\">+</span> <span class=\"string\">markdown-it-checkbox</span> <span class=\"comment\"># 本行启用了 checkbox 插件</span></span><br><span class=\"line\">    <span class=\"string\">+</span> <span class=\"string\">markdown-it-emoji</span> <span class=\"comment\"># 如果你想在 md 中使用 emoji 表情的话，需要另外下载相关插件</span></span><br><span class=\"line\">    <span class=\"string\">+</span> <span class=\"string\">markdown-it-footnote</span></span><br><span class=\"line\">    <span class=\"string\">+</span> <span class=\"string\">markdown-it-ins</span></span><br><span class=\"line\">    <span class=\"string\">+</span> <span class=\"string\">markdown-it-sub</span></span><br><span class=\"line\">    <span class=\"string\">+</span> <span class=\"string\">markdown-it-sup</span></span><br><span class=\"line\"><span class=\"attr\">  anchors:</span></span><br><span class=\"line\"><span class=\"attr\">    level:</span> <span class=\"number\">2</span> <span class=\"comment\"># Minimum level for ID creation. (Ex. h2 to h6)</span></span><br><span class=\"line\"><span class=\"attr\">    collisionSuffix:</span> <span class=\"string\">'v'</span> <span class=\"comment\"># A suffix that is prepended to the number given if the ID is repeated.</span></span><br><span class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">true</span> <span class=\"comment\"># If true, creates an anchor tag with a permalink besides the heading.</span></span><br><span class=\"line\"><span class=\"attr\">    permalinkClass:</span> <span class=\"string\">header-anchor</span> <span class=\"comment\"># Class used for the permalink anchor tag.</span></span><br><span class=\"line\"><span class=\"attr\">    permalinkSymbol:</span> <span class=\"string\">¶</span> <span class=\"comment\"># The symbol used to make the permalink.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>重启 hexo 服务器，刷新 localhost 页面：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s -g</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"效果\"><a class=\"header-anchor\" href=\"#效果\">¶</a>效果</h2>\n<p>最终，在文章中的显示效果：</p>\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox0\"><label for=\"checkbox0\">本行前面的复选框是使用 </label><code>[ ]</code> 语法实现的</li>\n<li><input type=\"checkbox\" id=\"checkbox1\" checked=\"true\"><label for=\"checkbox1\">本行前面的复选框是使用 </label><code>[x]</code> 语法实现的</li>\n</ul>\n<h2 id=\"to-do-待改进的遗留问题\"><a class=\"header-anchor\" href=\"#to-do-待改进的遗留问题\">¶</a>To Do - 待改进的遗留问题</h2>\n<h3 id=\"样式不太美观\"><a class=\"header-anchor\" href=\"#样式不太美观\">¶</a><input type=\"checkbox\" id=\"checkbox2\" checked=\"true\"><label for=\"checkbox2\">样式不太美观</label></h3>\n<ul>\n<li>用的是浏览器默认样式（体验不好），且不符合本文目前使用 NexT 主题风格。</li>\n<li>书写时需要在 <code>[ ]</code> 后加两个空格，否则复选框和文字之间会没有空隙。</li>\n</ul>\n<ol>\n<li>找到自定义样式的文件：<code>themes/next/source/css/_custom/</code> 路径下的 <code>custom.styl</code> 。</li>\n<li>添加以下样式： <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"checkbox\"]</span> &#123;</span><br><span class=\"line\">  display: none !important; // by imo: to overwrite styles in DuoShuo-Comments-Plugin</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"checkbox\"]</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">'\\a0'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: .<span class=\"number\">2em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: .<span class=\"number\">2em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: .<span class=\"number\">8em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: .<span class=\"number\">8em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: .<span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-indent</span>: .<span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: .<span class=\"number\">7</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"checkbox\"]</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">'\\2713'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"非只读模式-可勾选和取消勾选\"><a class=\"header-anchor\" href=\"#非只读模式-可勾选和取消勾选\">¶</a><input type=\"checkbox\" id=\"checkbox3\"><label for=\"checkbox3\">非只读模式（可勾选和取消勾选）</label></h3>\n<h3 id=\"其它：使用-markdown-it-的-anchors-功能带来的副作用\"><a class=\"header-anchor\" href=\"#其它：使用-markdown-it-的-anchors-功能带来的副作用\">¶</a><input type=\"checkbox\" id=\"checkbox4\" checked=\"true\"><label for=\"checkbox4\">其它：使用 markdown-it 的 anchors 功能带来的副作用</label></h3>\n<ul>\n<li>使用 markdown-it 的 anchors 功能后，文章目录（Table of Content, TOC）中每个章节标题前均出现永久链接符号（默认为 <code>¶</code> ）。</li>\n</ul>\n<ol>\n<li>找到 hexo 定义 toc 函数的文件：<code>/node_modules/hexo/lib/plugins/helper</code> 目录下的 <code>toc.js</code> 。</li>\n<li>修改生成标题文本的代码行 <code>var text = $(this).text();</code> 为如下即可： <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = $(<span class=\"keyword\">this</span>).text().slice(<span class=\"number\">1</span>);<span class=\"comment\">// by imo: remove markdown-it's anchor character in TOC</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h2>\n<ul>\n<li><a href=\"http://yangfch3.com/2016/05/08/hexo-experiences/hexo-renderer-marked-it.txt\" target=\"_blank\" rel=\"noopener\">配置 hexo-renderer-markdown-it</a></li>\n<li><s><a href=\"http://www.cnblogs.com/fsong/p/5929773.html\" target=\"_blank\" rel=\"noopener\">Hexo 中添加 emoji 表情</a></s><a href=\"http://chaxiaoniu.oschina.io/2017/07/10/HexoAddEmoji/\" target=\"_blank\" rel=\"noopener\">Hexo 中添加 emoji 表情</a></li>\n<li><a href=\"http://moxfive.xyz/2016/06/13/hexo-collapsible-toc/\" target=\"_blank\" rel=\"noopener\">为 Hexo 添加可折叠的文章目录</a></li>\n<li><a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki/Advanced-Configuration\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it 在 github 上的文档</a></li>\n<li><a href=\"https://www.npmjs.com/package/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it 在 npm 上的文档</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"起因\"><a class=\"header-anchor\" href=\"#起因\">¶</a>起因</h2>\n<p>我想在上一篇文章末尾的 to do 事项前面添加复选框，即想在 hexo 下使用 markdown 语法写文章时，使用 <code>[ ]</code> 、 <code>[x]</code> 这样 Github 上特有的 markdown 方言（Github Flavored Markdown, GFM）来输出 checkbox 。</p>\n<p>在谷歌的过程中，当我看到 <a href=\"https://github.com/hexojs/hexo/issues/2161\" target=\"_blank\" rel=\"noopener\">github 上某位仁兄的抱怨</a>说多种 hexo 的 markdown renderer 都对此问题无解的时候，一度陷入了绝望，甚至已经抱有了最终将使用非 markdown 语法（比如说，采用<a href=\"http://zhoupq.com/%E7%94%A8-HTML-%E6%A0%87%E7%AD%BE%E5%AE%9E%E7%8E%B0-MarkDown-Task-List/\" target=\"_blank\" rel=\"noopener\">使用 html 来实现 checkbox 的不太优雅的解决方案</a>）的视死如归的觉悟。好在，暮然回首，<a href=\"https://markdown-it.github.io/markdown-it/\" target=\"_blank\" rel=\"noopener\">markdown-it</a> 却在灯火阑珊处。</p>","more":"<h2 id=\"配置\"><a class=\"header-anchor\" href=\"#配置\">¶</a>配置</h2>\n<ol>\n<li>\n<p>修改 hexo 的 markdown 渲染引擎：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-blog.github.io/ <span class=\"comment\"># 首先进入你的 hexo 的根目录</span></span><br><span class=\"line\">$ npm un hexo-renderer-marked --save <span class=\"comment\"># 卸载 hexo 默认的 markdown 渲染引擎</span></span><br><span class=\"line\">$ npm i hexo-renderer-markdown-it --save <span class=\"comment\"># 安装 markdown-it</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>下载 markdown-it 的 markdown-it-checkbox 插件：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> node_modules/hexo-renderer-markdown-it/</span><br><span class=\"line\">$ npm install markdown-it-checkbox --save</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在 hexo 的全局配置文件 <code>_config.yml</code> 添加以下：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Doesn't escape HTML content so the tags will appear as html.</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Parser will not produce XHTML compliant code.</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Parser produces `&lt;br&gt;` tags every time there is a line break in the source document.</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Returns text links as text.</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Substitution of common typographical elements will take place.</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span> <span class=\"comment\"># \"double\" will be turned into “single”</span></span><br><span class=\"line\">                   <span class=\"comment\"># 'single' will be turned into ‘single’</span></span><br><span class=\"line\"><span class=\"attr\">  plugins:</span></span><br><span class=\"line\">    <span class=\"string\">+</span> <span class=\"string\">markdown-it-abbr</span></span><br><span class=\"line\">    <span class=\"string\">+</span> <span class=\"string\">markdown-it-checkbox</span> <span class=\"comment\"># 本行启用了 checkbox 插件</span></span><br><span class=\"line\">    <span class=\"string\">+</span> <span class=\"string\">markdown-it-emoji</span> <span class=\"comment\"># 如果你想在 md 中使用 emoji 表情的话，需要另外下载相关插件</span></span><br><span class=\"line\">    <span class=\"string\">+</span> <span class=\"string\">markdown-it-footnote</span></span><br><span class=\"line\">    <span class=\"string\">+</span> <span class=\"string\">markdown-it-ins</span></span><br><span class=\"line\">    <span class=\"string\">+</span> <span class=\"string\">markdown-it-sub</span></span><br><span class=\"line\">    <span class=\"string\">+</span> <span class=\"string\">markdown-it-sup</span></span><br><span class=\"line\"><span class=\"attr\">  anchors:</span></span><br><span class=\"line\"><span class=\"attr\">    level:</span> <span class=\"number\">2</span> <span class=\"comment\"># Minimum level for ID creation. (Ex. h2 to h6)</span></span><br><span class=\"line\"><span class=\"attr\">    collisionSuffix:</span> <span class=\"string\">'v'</span> <span class=\"comment\"># A suffix that is prepended to the number given if the ID is repeated.</span></span><br><span class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">true</span> <span class=\"comment\"># If true, creates an anchor tag with a permalink besides the heading.</span></span><br><span class=\"line\"><span class=\"attr\">    permalinkClass:</span> <span class=\"string\">header-anchor</span> <span class=\"comment\"># Class used for the permalink anchor tag.</span></span><br><span class=\"line\"><span class=\"attr\">    permalinkSymbol:</span> <span class=\"string\">¶</span> <span class=\"comment\"># The symbol used to make the permalink.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>重启 hexo 服务器，刷新 localhost 页面：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s -g</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"效果\"><a class=\"header-anchor\" href=\"#效果\">¶</a>效果</h2>\n<p>最终，在文章中的显示效果：</p>\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox0\"><label for=\"checkbox0\">本行前面的复选框是使用 </label><code>[ ]</code> 语法实现的</li>\n<li><input type=\"checkbox\" id=\"checkbox1\" checked=\"true\"><label for=\"checkbox1\">本行前面的复选框是使用 </label><code>[x]</code> 语法实现的</li>\n</ul>\n<h2 id=\"to-do-待改进的遗留问题\"><a class=\"header-anchor\" href=\"#to-do-待改进的遗留问题\">¶</a>To Do - 待改进的遗留问题</h2>\n<h3 id=\"样式不太美观\"><a class=\"header-anchor\" href=\"#样式不太美观\">¶</a><input type=\"checkbox\" id=\"checkbox2\" checked=\"true\"><label for=\"checkbox2\">样式不太美观</label></h3>\n<ul>\n<li>用的是浏览器默认样式（体验不好），且不符合本文目前使用 NexT 主题风格。</li>\n<li>书写时需要在 <code>[ ]</code> 后加两个空格，否则复选框和文字之间会没有空隙。</li>\n</ul>\n<ol>\n<li>找到自定义样式的文件：<code>themes/next/source/css/_custom/</code> 路径下的 <code>custom.styl</code> 。</li>\n<li>添加以下样式： <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"checkbox\"]</span> &#123;</span><br><span class=\"line\">  display: none !important; // by imo: to overwrite styles in DuoShuo-Comments-Plugin</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"checkbox\"]</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">'\\a0'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: .<span class=\"number\">2em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: .<span class=\"number\">2em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: .<span class=\"number\">8em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: .<span class=\"number\">8em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: .<span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-indent</span>: .<span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: .<span class=\"number\">7</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"checkbox\"]</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">'\\2713'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"非只读模式-可勾选和取消勾选\"><a class=\"header-anchor\" href=\"#非只读模式-可勾选和取消勾选\">¶</a><input type=\"checkbox\" id=\"checkbox3\"><label for=\"checkbox3\">非只读模式（可勾选和取消勾选）</label></h3>\n<h3 id=\"其它：使用-markdown-it-的-anchors-功能带来的副作用\"><a class=\"header-anchor\" href=\"#其它：使用-markdown-it-的-anchors-功能带来的副作用\">¶</a><input type=\"checkbox\" id=\"checkbox4\" checked=\"true\"><label for=\"checkbox4\">其它：使用 markdown-it 的 anchors 功能带来的副作用</label></h3>\n<ul>\n<li>使用 markdown-it 的 anchors 功能后，文章目录（Table of Content, TOC）中每个章节标题前均出现永久链接符号（默认为 <code>¶</code> ）。</li>\n</ul>\n<ol>\n<li>找到 hexo 定义 toc 函数的文件：<code>/node_modules/hexo/lib/plugins/helper</code> 目录下的 <code>toc.js</code> 。</li>\n<li>修改生成标题文本的代码行 <code>var text = $(this).text();</code> 为如下即可： <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = $(<span class=\"keyword\">this</span>).text().slice(<span class=\"number\">1</span>);<span class=\"comment\">// by imo: remove markdown-it's anchor character in TOC</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h2>\n<ul>\n<li><a href=\"http://yangfch3.com/2016/05/08/hexo-experiences/hexo-renderer-marked-it.txt\" target=\"_blank\" rel=\"noopener\">配置 hexo-renderer-markdown-it</a></li>\n<li><s><a href=\"http://www.cnblogs.com/fsong/p/5929773.html\" target=\"_blank\" rel=\"noopener\">Hexo 中添加 emoji 表情</a></s><a href=\"http://chaxiaoniu.oschina.io/2017/07/10/HexoAddEmoji/\" target=\"_blank\" rel=\"noopener\">Hexo 中添加 emoji 表情</a></li>\n<li><a href=\"http://moxfive.xyz/2016/06/13/hexo-collapsible-toc/\" target=\"_blank\" rel=\"noopener\">为 Hexo 添加可折叠的文章目录</a></li>\n<li><a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki/Advanced-Configuration\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it 在 github 上的文档</a></li>\n<li><a href=\"https://www.npmjs.com/package/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it 在 npm 上的文档</a></li>\n</ul>"},{"title":"setTimeout 中的 this 关键字","date":"2017-04-25T14:26:22.000Z","_content":"\n## 概述\n\n本文主要讲述了几种场景下 `setTimeout` 的回调函数的 `this` 绑定出错的几种解决方法。\n\n<!-- more -->\n\n## 举个栗子\n\n```javascript\nclass Person {\n  sayName() {\n    console.log(\"Hello, I'm \" + this.name + \".\")\n  }\n  \n  constructor(name = \"No One\") {\n    this.name = name\n    setTimeout(this.sayName, 1000)\n  }\n}\n\nvar imo = new Person(\"Imo\")\n\nsetTimeout(imo.sayName, 2000)\n```\n\n> P.S. 上述代码使用了 ES6 语法，这里不做语法上的过多解释。不知所谓的童鞋可以看一下[《30 分钟掌握 ES6 核心内容（上）》](https://segmentfault.com/a/1190000004365693)、[《30 分钟掌握 ES6 核心内容（下）》](https://segmentfault.com/a/1190000004368132)这两篇。 \n\n上述代码定义了一个 `Person` 类，这个类有一个构造函数和一个 `sayName` 方法。其中，`sayName` 方法内部使用了 `this` 关键字，用于引用当前实例的（公有成员）变量 `name`。\n\n上述代码中，有两个 `setTimeout` 函数。第一个 `setTimeout` 存在于 `Person` 类的构造函数当中，其第一个参数是 `this.sayName`；第二个存在于全局作用域中，其第一个参数是 `imo.sayName`。两者都期望在控制台打印 `Hello, I'm Imo.`，但是目前两者都没有达到期望——目前打印的均是 `Hello, I'm .`。出现这种现象的原因是 `sayName` 方法内部的 `this` 没有如期地指向 `imo` 对象，而是错误地指向了全局对象，因而 `this.name` 的值为 `undefined`，对应到字符串是 `''` （空字符串）。\n\n那么，我们如何修改代码使得 `this` 关键字如期地指向 `imo` 对象呢？\n\n## 第二个 `setTimeout`\n\n先解决比较简单的第二个 `setTimeout` 。\n\n有两种方法：\n\n1. `.bind()`\n2. 匿名函数包裹\n\n代码如下：\n\n```javascript\n// 第二个 setTimeout 用“.bind()”方法修改如下：\nsetTimeout(imo.sayName.bind(imo), 2000)\n\n// 第二个 setTimeout 用“匿名函数包裹”方法修改如下：\nsetTimeout(function(){\n    imo.sayName()\n}, 2000)\n```\n\n### “`.bind()`”方法\n\n> Apply 调用模式 - The Apply Invocation Pattern\n\n[Function.prototype.bind() @MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)：“`bind()` 方法会创建一个新函数。当这个新函数被调用时，`bind()` 的第一个参数将作为它运行时的 `this` ...”\n\n### “匿名函数包裹”方法\n\n> 方法调用模式 - The Method Invocation Pattern\n\n在外层匿名函数的内部，`sayName` 作为 `imo` 对象的方法被调用，方法内部的 `this` 也就被绑定到 `imo` 对象了。\n\n## 第一个 `setTimeout`\n\n我们尝试上面提到的两种解决方法。\n\n### “`.bind()`”方法\n\n`.bind()` 方法依旧可行，代码：\n\n```javascript\n// 第一个 setTimeout 用“.bind()”方法修改如下：\nsetTimeout(this.sayName.bind(this), 1000)\n```\n\n### “匿名函数包裹”方法\n\n“匿名函数包裹”方法好像让事情更复杂了——修改后但**没能解决问题**的代码如下：\n\n```javascript\n// 第二个 setTimeout 用“匿名函数包裹”方法修改如下：\nsetTimeout(function(){\n    this.sayName()\n}, 1000)\n```\n\n此时，`this.sayName` 的值为 `undefined`，`sayName` 方法甚至都没有机会得到调用。\n\n#### “匿名函数包裹+`.bind`”\n\n在包裹匿名函数后的代码的基础上，仍可以使用 `.bind` 方法。\n\n```javascript\n// 第二个 setTimeout 用“匿名函数包裹+.bind”方法修改如下：\nsetTimeout(function(){\n    this.sayName()\n}.bind(this), 1000)\n```\n\n#### “匿名函数包裹+`that`”\n\n可以利用匿名函数形成闭包，引用正确的 `this`：\n\n```javascript\n// 第二个 setTimeout 用“匿名函数包裹+that”方法修改如下：\nvar that = this\nsetTimeout(function(){\n    that.sayName()\n}, 1000)\n```\n\n### “箭头函数”方法\n\nES6 的箭头函数没有自己的 `this` 、直接继承外部作用域的 `this` ，所以还可以这么改：\n\n```javascript\n// 第二个 setTimeout 用“箭头函数”方法修改如下：\nsetTimeout(()=>{this.sayName()}, 1000)\n```\n\n## 小结\n\n当 `setTimeout` 的回调函数中出现 `this` 的时候，要特别注意其绑定的对象是否和预想的一致。当绑定有误时可以通过下述方法解决。\n\n当 `setTimeout` 的回调函数是一个能够通过变量引用的对象的方法（类似于例子中的 `imo.sayName`）时，有两种解决方法：\n\n1. “`.bind()`”方法\n2. “匿名函数包裹”方法\n\n当 `setTimeout` 的回调函数是一个通过 `this` 访问的方法（类似于例子中的 `this.sayName`）时，有两种解决方法：\n\n1. “`.bind()`”方法\n2. “ES6箭头函数”方法\n\n当 `setTimeout` 的回调函数是一个含有 `this` 的匿名函数（类似于例子中的 `this.sayName` 被匿名函数包裹后）时，有两种解决方法：\n\n1. “`.bind()`”方法\n2. “闭包that”方法\n\n> 可以看出，解决方法中的“`.bind()`”方法是万金油。所以，如果你记不住这么多方法，至少也要记住“`.bind()`”方法。\n","source":"_posts/this-keyword-in-setTimeout.md","raw":"---\ntitle: setTimeout 中的 this 关键字\ndate: 2017-04-25 22:26:22\ntags: [JavaScript]\n---\n\n## 概述\n\n本文主要讲述了几种场景下 `setTimeout` 的回调函数的 `this` 绑定出错的几种解决方法。\n\n<!-- more -->\n\n## 举个栗子\n\n```javascript\nclass Person {\n  sayName() {\n    console.log(\"Hello, I'm \" + this.name + \".\")\n  }\n  \n  constructor(name = \"No One\") {\n    this.name = name\n    setTimeout(this.sayName, 1000)\n  }\n}\n\nvar imo = new Person(\"Imo\")\n\nsetTimeout(imo.sayName, 2000)\n```\n\n> P.S. 上述代码使用了 ES6 语法，这里不做语法上的过多解释。不知所谓的童鞋可以看一下[《30 分钟掌握 ES6 核心内容（上）》](https://segmentfault.com/a/1190000004365693)、[《30 分钟掌握 ES6 核心内容（下）》](https://segmentfault.com/a/1190000004368132)这两篇。 \n\n上述代码定义了一个 `Person` 类，这个类有一个构造函数和一个 `sayName` 方法。其中，`sayName` 方法内部使用了 `this` 关键字，用于引用当前实例的（公有成员）变量 `name`。\n\n上述代码中，有两个 `setTimeout` 函数。第一个 `setTimeout` 存在于 `Person` 类的构造函数当中，其第一个参数是 `this.sayName`；第二个存在于全局作用域中，其第一个参数是 `imo.sayName`。两者都期望在控制台打印 `Hello, I'm Imo.`，但是目前两者都没有达到期望——目前打印的均是 `Hello, I'm .`。出现这种现象的原因是 `sayName` 方法内部的 `this` 没有如期地指向 `imo` 对象，而是错误地指向了全局对象，因而 `this.name` 的值为 `undefined`，对应到字符串是 `''` （空字符串）。\n\n那么，我们如何修改代码使得 `this` 关键字如期地指向 `imo` 对象呢？\n\n## 第二个 `setTimeout`\n\n先解决比较简单的第二个 `setTimeout` 。\n\n有两种方法：\n\n1. `.bind()`\n2. 匿名函数包裹\n\n代码如下：\n\n```javascript\n// 第二个 setTimeout 用“.bind()”方法修改如下：\nsetTimeout(imo.sayName.bind(imo), 2000)\n\n// 第二个 setTimeout 用“匿名函数包裹”方法修改如下：\nsetTimeout(function(){\n    imo.sayName()\n}, 2000)\n```\n\n### “`.bind()`”方法\n\n> Apply 调用模式 - The Apply Invocation Pattern\n\n[Function.prototype.bind() @MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)：“`bind()` 方法会创建一个新函数。当这个新函数被调用时，`bind()` 的第一个参数将作为它运行时的 `this` ...”\n\n### “匿名函数包裹”方法\n\n> 方法调用模式 - The Method Invocation Pattern\n\n在外层匿名函数的内部，`sayName` 作为 `imo` 对象的方法被调用，方法内部的 `this` 也就被绑定到 `imo` 对象了。\n\n## 第一个 `setTimeout`\n\n我们尝试上面提到的两种解决方法。\n\n### “`.bind()`”方法\n\n`.bind()` 方法依旧可行，代码：\n\n```javascript\n// 第一个 setTimeout 用“.bind()”方法修改如下：\nsetTimeout(this.sayName.bind(this), 1000)\n```\n\n### “匿名函数包裹”方法\n\n“匿名函数包裹”方法好像让事情更复杂了——修改后但**没能解决问题**的代码如下：\n\n```javascript\n// 第二个 setTimeout 用“匿名函数包裹”方法修改如下：\nsetTimeout(function(){\n    this.sayName()\n}, 1000)\n```\n\n此时，`this.sayName` 的值为 `undefined`，`sayName` 方法甚至都没有机会得到调用。\n\n#### “匿名函数包裹+`.bind`”\n\n在包裹匿名函数后的代码的基础上，仍可以使用 `.bind` 方法。\n\n```javascript\n// 第二个 setTimeout 用“匿名函数包裹+.bind”方法修改如下：\nsetTimeout(function(){\n    this.sayName()\n}.bind(this), 1000)\n```\n\n#### “匿名函数包裹+`that`”\n\n可以利用匿名函数形成闭包，引用正确的 `this`：\n\n```javascript\n// 第二个 setTimeout 用“匿名函数包裹+that”方法修改如下：\nvar that = this\nsetTimeout(function(){\n    that.sayName()\n}, 1000)\n```\n\n### “箭头函数”方法\n\nES6 的箭头函数没有自己的 `this` 、直接继承外部作用域的 `this` ，所以还可以这么改：\n\n```javascript\n// 第二个 setTimeout 用“箭头函数”方法修改如下：\nsetTimeout(()=>{this.sayName()}, 1000)\n```\n\n## 小结\n\n当 `setTimeout` 的回调函数中出现 `this` 的时候，要特别注意其绑定的对象是否和预想的一致。当绑定有误时可以通过下述方法解决。\n\n当 `setTimeout` 的回调函数是一个能够通过变量引用的对象的方法（类似于例子中的 `imo.sayName`）时，有两种解决方法：\n\n1. “`.bind()`”方法\n2. “匿名函数包裹”方法\n\n当 `setTimeout` 的回调函数是一个通过 `this` 访问的方法（类似于例子中的 `this.sayName`）时，有两种解决方法：\n\n1. “`.bind()`”方法\n2. “ES6箭头函数”方法\n\n当 `setTimeout` 的回调函数是一个含有 `this` 的匿名函数（类似于例子中的 `this.sayName` 被匿名函数包裹后）时，有两种解决方法：\n\n1. “`.bind()`”方法\n2. “闭包that”方法\n\n> 可以看出，解决方法中的“`.bind()`”方法是万金油。所以，如果你记不住这么多方法，至少也要记住“`.bind()`”方法。\n","slug":"this-keyword-in-setTimeout","published":1,"updated":"2018-08-25T02:55:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkbxz001k5xzxoxveu1d5","content":"<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\">¶</a>概述</h2>\n<p>本文主要讲述了几种场景下 <code>setTimeout</code> 的回调函数的 <code>this</code> 绑定出错的几种解决方法。</p>\n<a id=\"more\"></a>\n<h2 id=\"举个栗子\"><a class=\"header-anchor\" href=\"#举个栗子\">¶</a>举个栗子</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  sayName() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\".\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name = \"No One\") &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    setTimeout(<span class=\"keyword\">this</span>.sayName, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> imo = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Imo\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(imo.sayName, <span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>P.S. 上述代码使用了 ES6 语法，这里不做语法上的过多解释。不知所谓的童鞋可以看一下<a href=\"https://segmentfault.com/a/1190000004365693\" target=\"_blank\" rel=\"noopener\">《30 分钟掌握 ES6 核心内容（上）》</a>、<a href=\"https://segmentfault.com/a/1190000004368132\" target=\"_blank\" rel=\"noopener\">《30 分钟掌握 ES6 核心内容（下）》</a>这两篇。</p>\n</blockquote>\n<p>上述代码定义了一个 <code>Person</code> 类，这个类有一个构造函数和一个 <code>sayName</code> 方法。其中，<code>sayName</code> 方法内部使用了 <code>this</code> 关键字，用于引用当前实例的（公有成员）变量 <code>name</code>。</p>\n<p>上述代码中，有两个 <code>setTimeout</code> 函数。第一个 <code>setTimeout</code> 存在于 <code>Person</code> 类的构造函数当中，其第一个参数是 <code>this.sayName</code>；第二个存在于全局作用域中，其第一个参数是 <code>imo.sayName</code>。两者都期望在控制台打印 <code>Hello, I'm Imo.</code>，但是目前两者都没有达到期望——目前打印的均是 <code>Hello, I'm .</code>。出现这种现象的原因是 <code>sayName</code> 方法内部的 <code>this</code> 没有如期地指向 <code>imo</code> 对象，而是错误地指向了全局对象，因而 <code>this.name</code> 的值为 <code>undefined</code>，对应到字符串是 <code>''</code> （空字符串）。</p>\n<p>那么，我们如何修改代码使得 <code>this</code> 关键字如期地指向 <code>imo</code> 对象呢？</p>\n<h2 id=\"第二个-settimeout\"><a class=\"header-anchor\" href=\"#第二个-settimeout\">¶</a>第二个 <code>setTimeout</code></h2>\n<p>先解决比较简单的第二个 <code>setTimeout</code> 。</p>\n<p>有两种方法：</p>\n<ol>\n<li><code>.bind()</code></li>\n<li>匿名函数包裹</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第二个 setTimeout 用“.bind()”方法修改如下：</span></span><br><span class=\"line\">setTimeout(imo.sayName.bind(imo), <span class=\"number\">2000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二个 setTimeout 用“匿名函数包裹”方法修改如下：</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    imo.sayName()</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"bind-方法\"><a class=\"header-anchor\" href=\"#bind-方法\">¶</a>“<code>.bind()</code>”方法</h3>\n<blockquote>\n<p>Apply 调用模式 - The Apply Invocation Pattern</p>\n</blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\">Function.prototype.bind() @MDN</a>：“<code>bind()</code> 方法会创建一个新函数。当这个新函数被调用时，<code>bind()</code> 的第一个参数将作为它运行时的 <code>this</code> …”</p>\n<h3 id=\"匿名函数包裹-方法\"><a class=\"header-anchor\" href=\"#匿名函数包裹-方法\">¶</a>“匿名函数包裹”方法</h3>\n<blockquote>\n<p>方法调用模式 - The Method Invocation Pattern</p>\n</blockquote>\n<p>在外层匿名函数的内部，<code>sayName</code> 作为 <code>imo</code> 对象的方法被调用，方法内部的 <code>this</code> 也就被绑定到 <code>imo</code> 对象了。</p>\n<h2 id=\"第一个-settimeout\"><a class=\"header-anchor\" href=\"#第一个-settimeout\">¶</a>第一个 <code>setTimeout</code></h2>\n<p>我们尝试上面提到的两种解决方法。</p>\n<h3 id=\"bind-方法-v2\"><a class=\"header-anchor\" href=\"#bind-方法-v2\">¶</a>“<code>.bind()</code>”方法</h3>\n<p><code>.bind()</code> 方法依旧可行，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个 setTimeout 用“.bind()”方法修改如下：</span></span><br><span class=\"line\">setTimeout(<span class=\"keyword\">this</span>.sayName.bind(<span class=\"keyword\">this</span>), <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"匿名函数包裹-方法-v2\"><a class=\"header-anchor\" href=\"#匿名函数包裹-方法-v2\">¶</a>“匿名函数包裹”方法</h3>\n<p>“匿名函数包裹”方法好像让事情更复杂了——修改后但<strong>没能解决问题</strong>的代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第二个 setTimeout 用“匿名函数包裹”方法修改如下：</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayName()</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<p>此时，<code>this.sayName</code> 的值为 <code>undefined</code>，<code>sayName</code> 方法甚至都没有机会得到调用。</p>\n<h4 id=\"匿名函数包裹-bind\"><a class=\"header-anchor\" href=\"#匿名函数包裹-bind\">¶</a>“匿名函数包裹+<code>.bind</code>”</h4>\n<p>在包裹匿名函数后的代码的基础上，仍可以使用 <code>.bind</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第二个 setTimeout 用“匿名函数包裹+.bind”方法修改如下：</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayName()</span><br><span class=\"line\">&#125;.bind(<span class=\"keyword\">this</span>), <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"匿名函数包裹-that\"><a class=\"header-anchor\" href=\"#匿名函数包裹-that\">¶</a>“匿名函数包裹+<code>that</code>”</h4>\n<p>可以利用匿名函数形成闭包，引用正确的 <code>this</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第二个 setTimeout 用“匿名函数包裹+that”方法修改如下：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    that.sayName()</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"箭头函数-方法\"><a class=\"header-anchor\" href=\"#箭头函数-方法\">¶</a>“箭头函数”方法</h3>\n<p>ES6 的箭头函数没有自己的 <code>this</code> 、直接继承外部作用域的 <code>this</code> ，所以还可以这么改：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第二个 setTimeout 用“箭头函数”方法修改如下：</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"keyword\">this</span>.sayName()&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\">¶</a>小结</h2>\n<p>当 <code>setTimeout</code> 的回调函数中出现 <code>this</code> 的时候，要特别注意其绑定的对象是否和预想的一致。当绑定有误时可以通过下述方法解决。</p>\n<p>当 <code>setTimeout</code> 的回调函数是一个能够通过变量引用的对象的方法（类似于例子中的 <code>imo.sayName</code>）时，有两种解决方法：</p>\n<ol>\n<li>“<code>.bind()</code>”方法</li>\n<li>“匿名函数包裹”方法</li>\n</ol>\n<p>当 <code>setTimeout</code> 的回调函数是一个通过 <code>this</code> 访问的方法（类似于例子中的 <code>this.sayName</code>）时，有两种解决方法：</p>\n<ol>\n<li>“<code>.bind()</code>”方法</li>\n<li>“ES6箭头函数”方法</li>\n</ol>\n<p>当 <code>setTimeout</code> 的回调函数是一个含有 <code>this</code> 的匿名函数（类似于例子中的 <code>this.sayName</code> 被匿名函数包裹后）时，有两种解决方法：</p>\n<ol>\n<li>“<code>.bind()</code>”方法</li>\n<li>“闭包that”方法</li>\n</ol>\n<blockquote>\n<p>可以看出，解决方法中的“<code>.bind()</code>”方法是万金油。所以，如果你记不住这么多方法，至少也要记住“<code>.bind()</code>”方法。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\">¶</a>概述</h2>\n<p>本文主要讲述了几种场景下 <code>setTimeout</code> 的回调函数的 <code>this</code> 绑定出错的几种解决方法。</p>","more":"<h2 id=\"举个栗子\"><a class=\"header-anchor\" href=\"#举个栗子\">¶</a>举个栗子</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  sayName() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\".\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name = \"No One\") &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    setTimeout(<span class=\"keyword\">this</span>.sayName, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> imo = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Imo\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(imo.sayName, <span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>P.S. 上述代码使用了 ES6 语法，这里不做语法上的过多解释。不知所谓的童鞋可以看一下<a href=\"https://segmentfault.com/a/1190000004365693\" target=\"_blank\" rel=\"noopener\">《30 分钟掌握 ES6 核心内容（上）》</a>、<a href=\"https://segmentfault.com/a/1190000004368132\" target=\"_blank\" rel=\"noopener\">《30 分钟掌握 ES6 核心内容（下）》</a>这两篇。</p>\n</blockquote>\n<p>上述代码定义了一个 <code>Person</code> 类，这个类有一个构造函数和一个 <code>sayName</code> 方法。其中，<code>sayName</code> 方法内部使用了 <code>this</code> 关键字，用于引用当前实例的（公有成员）变量 <code>name</code>。</p>\n<p>上述代码中，有两个 <code>setTimeout</code> 函数。第一个 <code>setTimeout</code> 存在于 <code>Person</code> 类的构造函数当中，其第一个参数是 <code>this.sayName</code>；第二个存在于全局作用域中，其第一个参数是 <code>imo.sayName</code>。两者都期望在控制台打印 <code>Hello, I'm Imo.</code>，但是目前两者都没有达到期望——目前打印的均是 <code>Hello, I'm .</code>。出现这种现象的原因是 <code>sayName</code> 方法内部的 <code>this</code> 没有如期地指向 <code>imo</code> 对象，而是错误地指向了全局对象，因而 <code>this.name</code> 的值为 <code>undefined</code>，对应到字符串是 <code>''</code> （空字符串）。</p>\n<p>那么，我们如何修改代码使得 <code>this</code> 关键字如期地指向 <code>imo</code> 对象呢？</p>\n<h2 id=\"第二个-settimeout\"><a class=\"header-anchor\" href=\"#第二个-settimeout\">¶</a>第二个 <code>setTimeout</code></h2>\n<p>先解决比较简单的第二个 <code>setTimeout</code> 。</p>\n<p>有两种方法：</p>\n<ol>\n<li><code>.bind()</code></li>\n<li>匿名函数包裹</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第二个 setTimeout 用“.bind()”方法修改如下：</span></span><br><span class=\"line\">setTimeout(imo.sayName.bind(imo), <span class=\"number\">2000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二个 setTimeout 用“匿名函数包裹”方法修改如下：</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    imo.sayName()</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"bind-方法\"><a class=\"header-anchor\" href=\"#bind-方法\">¶</a>“<code>.bind()</code>”方法</h3>\n<blockquote>\n<p>Apply 调用模式 - The Apply Invocation Pattern</p>\n</blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\">Function.prototype.bind() @MDN</a>：“<code>bind()</code> 方法会创建一个新函数。当这个新函数被调用时，<code>bind()</code> 的第一个参数将作为它运行时的 <code>this</code> …”</p>\n<h3 id=\"匿名函数包裹-方法\"><a class=\"header-anchor\" href=\"#匿名函数包裹-方法\">¶</a>“匿名函数包裹”方法</h3>\n<blockquote>\n<p>方法调用模式 - The Method Invocation Pattern</p>\n</blockquote>\n<p>在外层匿名函数的内部，<code>sayName</code> 作为 <code>imo</code> 对象的方法被调用，方法内部的 <code>this</code> 也就被绑定到 <code>imo</code> 对象了。</p>\n<h2 id=\"第一个-settimeout\"><a class=\"header-anchor\" href=\"#第一个-settimeout\">¶</a>第一个 <code>setTimeout</code></h2>\n<p>我们尝试上面提到的两种解决方法。</p>\n<h3 id=\"bind-方法-v2\"><a class=\"header-anchor\" href=\"#bind-方法-v2\">¶</a>“<code>.bind()</code>”方法</h3>\n<p><code>.bind()</code> 方法依旧可行，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个 setTimeout 用“.bind()”方法修改如下：</span></span><br><span class=\"line\">setTimeout(<span class=\"keyword\">this</span>.sayName.bind(<span class=\"keyword\">this</span>), <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"匿名函数包裹-方法-v2\"><a class=\"header-anchor\" href=\"#匿名函数包裹-方法-v2\">¶</a>“匿名函数包裹”方法</h3>\n<p>“匿名函数包裹”方法好像让事情更复杂了——修改后但<strong>没能解决问题</strong>的代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第二个 setTimeout 用“匿名函数包裹”方法修改如下：</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayName()</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<p>此时，<code>this.sayName</code> 的值为 <code>undefined</code>，<code>sayName</code> 方法甚至都没有机会得到调用。</p>\n<h4 id=\"匿名函数包裹-bind\"><a class=\"header-anchor\" href=\"#匿名函数包裹-bind\">¶</a>“匿名函数包裹+<code>.bind</code>”</h4>\n<p>在包裹匿名函数后的代码的基础上，仍可以使用 <code>.bind</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第二个 setTimeout 用“匿名函数包裹+.bind”方法修改如下：</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayName()</span><br><span class=\"line\">&#125;.bind(<span class=\"keyword\">this</span>), <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"匿名函数包裹-that\"><a class=\"header-anchor\" href=\"#匿名函数包裹-that\">¶</a>“匿名函数包裹+<code>that</code>”</h4>\n<p>可以利用匿名函数形成闭包，引用正确的 <code>this</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第二个 setTimeout 用“匿名函数包裹+that”方法修改如下：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    that.sayName()</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"箭头函数-方法\"><a class=\"header-anchor\" href=\"#箭头函数-方法\">¶</a>“箭头函数”方法</h3>\n<p>ES6 的箭头函数没有自己的 <code>this</code> 、直接继承外部作用域的 <code>this</code> ，所以还可以这么改：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第二个 setTimeout 用“箭头函数”方法修改如下：</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"keyword\">this</span>.sayName()&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a class=\"header-anchor\" href=\"#小结\">¶</a>小结</h2>\n<p>当 <code>setTimeout</code> 的回调函数中出现 <code>this</code> 的时候，要特别注意其绑定的对象是否和预想的一致。当绑定有误时可以通过下述方法解决。</p>\n<p>当 <code>setTimeout</code> 的回调函数是一个能够通过变量引用的对象的方法（类似于例子中的 <code>imo.sayName</code>）时，有两种解决方法：</p>\n<ol>\n<li>“<code>.bind()</code>”方法</li>\n<li>“匿名函数包裹”方法</li>\n</ol>\n<p>当 <code>setTimeout</code> 的回调函数是一个通过 <code>this</code> 访问的方法（类似于例子中的 <code>this.sayName</code>）时，有两种解决方法：</p>\n<ol>\n<li>“<code>.bind()</code>”方法</li>\n<li>“ES6箭头函数”方法</li>\n</ol>\n<p>当 <code>setTimeout</code> 的回调函数是一个含有 <code>this</code> 的匿名函数（类似于例子中的 <code>this.sayName</code> 被匿名函数包裹后）时，有两种解决方法：</p>\n<ol>\n<li>“<code>.bind()</code>”方法</li>\n<li>“闭包that”方法</li>\n</ol>\n<blockquote>\n<p>可以看出，解决方法中的“<code>.bind()</code>”方法是万金油。所以，如果你记不住这么多方法，至少也要记住“<code>.bind()</code>”方法。</p>\n</blockquote>"},{"title":"使用 JavaScript 操作 HTML 批量制作 Anki 卡片","date":"2017-02-27T03:44:54.000Z","_content":"\n## 想要达到的效果\n\n1. 使用 markdown 总结笔记\n2. 利用笔记批量生成 anki 卡片\n\n## 前期准备\n\n### 批量制作 anki 卡片的两个思路\n\n1. [利用 TinyTask 之类的自动化操作软件进行重复性操作](http://v.ku6.com/show/l1A1FiYXohYYsz-OM6RdyQ...html)；\n2. 利用脚本对遵循某种规则的笔记内容进行切分和生成卡片。\n\n就这两个思路来说，第二个思路一劳永逸。而且作为一个程序猿，闭着眼睛也会选第二个的嘛 /w\\。\n\n<!-- more -->\n\n### 我的工作流和“原料”\n\n我一般是在 Sublime Text 上用 `markdown` 记各种笔记，然后通过 Sublime 的 OmniMarkupPreviewer 插件（在编辑页面 -> 右键 -> Preview Markup in Browser）在浏览器中实时预览 markdown 得到的 `html` 的。\n\n简而言之， **`MD + ST(OmniMarkupPreviewer) => HTML`** 。\n\n于是现在，我的手头有两种“原料”：\n\n* 最开始的 **MD 文件**\n* 实时的 **HTML 文件**\n\n### 脚本语言的选择\n\n看到 .html 文件，就想到了 `JavaScript`。所以，我选择使用 .html 文件作为“原材料”，用 js 对其进行加工，得到制作 anki 卡片所需要的 .csv 文件。\n\n### 约定\n\n> P.S. 这里简单起见，只制作具有正反面的、静态的（没有完形填空等的） ~~、纯文字内容的（没有图片、音频的）~~ 卡片。不过，卡片可以包含图片和表格。\n\n思路中提到的 **“遵循某种规则”** 是指书写 .md 文件的时候，你需要想好用什么特殊的符号区分开卡片的正面和背面。\n\n这里，我在 markdown 中**使用第二级标题 `##`** 来表示卡片的正面，在 HTML 对应为 `h2` 标签；而在两个第二级标题之间的所有内容表示卡片的反面。\n\n## 代码\n\n### [generateAnkiCards.js](https://github.com/baishusama/stockyard/blob/master/anki/generateAnkiCards.js)\n\n调用 generateAnkiCards.js 的代码：\n\n`(function() { var source = \"https://baishusama.github.io/stockyard/anki/generateAnkiCards.js\"; var s = document.createElement(\"script\"); s.src = source; document.body.appendChild(s); })()`\n\n* 使用方法一：在实时预览 MD 文件的浏览器标签页的地址栏中键入 `javascript:` ，再在后面添加上述代码，并回车。\n* 使用方法二：打开控制台（OSX 下 `Cmd+Alt+I` ，Windows 下 `F12`），在控制台输入上述代码并回车。\n\n注意：（推测 Chrome 可能出于安全考虑？），直接在 Chrome 地址栏中复制带有 `javascript:` 前导的代码，`javascript:` 会消失。\n\n我这里，为了进一步偷懒，利用了 Mac 下的 aText 软件，为（包含 `javascript:` 前缀的）一行代码定义了 `js:anki` 缩写。以后每次使用的时候，只要在地址栏敲入 `js:anki` 并回车就可以了。\n\n![使用 aText 定义缩写](http://ohz4k75du.bkt.clouddn.com/anki/aText-anki.jpg)\n\n> P.S. \n> 如果你没有 aText 软件，但是你也想偷懒，那么你可以另一种更为通用的办法：把上述一行代码保存为浏览器的书签。然后需要的时候，鼠标轻轻一点就好～\n> 进一步偷懒，可以使用 Chrome 上的 Vimium 插件。在预览标签页直接键入 `b` ，然后找到之前保存的书签，回车。\n\n### [css](https://baishusama.github.io/stockyard/anki/anki-card.css) （可选）\n\n使用方法：anki 主面板 -> 浏览 -> 需要应用样式的记忆库 -> 卡片 -> “格式刷”下方输入框内粘贴 css 样式。\n\n## 使用流程\n\n1. 在 Sublime Text 中使**用 markdown 记笔记**。使用 `##` 表示问题（卡片正面），后面紧接着写回答（卡片反面）。并利用 OmniMarkupPreviewer 插件在浏览器中实时预览。\n2. 记完笔记之后，在浏览器相应标签页的地址栏中，**键入 `js:anki` 并回车保存** .csv 文件。\n3. 将保存的 **.csv 文件导入 anki 记忆库**。\n    1. 主界面，在某记忆库下，单击“导入文件”。![主界面，在某记忆库下，单击“导入文件”。](http://ohz4k75du.bkt.clouddn.com/anki/anki-import-step1.jpg)\n    2. 选中上一步生成的 .csv 文件，单击“打开”。![选中上一步生成的 .csv 文件，单击“打开”。](http://ohz4k75du.bkt.clouddn.com/anki/anki-import-step2.jpg)\n    3. 下拉框选择“相同时更新已有”，单选框选中“允许在字段中使用HTML”，单击“导入”。![下拉框选择“相同时更新已有”，单选框选中“允许在字段中使用HTML”，单击“导入”。](http://ohz4k75du.bkt.clouddn.com/anki/anki-import-step3.jpg)\n\n\n## 副作用和不足\n\n### 副作用\n\n笔记里所有的半角双引号 `\"` 都会被 generateAnkiCards.js 文件强制转换为半角单引号 `'` 。因为生成 .csv 文件时，`\"` 被用于区分 excel 的列。\n\n### 不足\n\n1. 现在的 js 代码仅仅是“能用”。各方面来看都不是好的代码。\n2. 目前，js 代码是用原生 js 实现的。后来才发现，用 OmniMarkupPreviewer 生成 html 的时候，页面中已经自动引入了 jQuery ——可以使用 jq 进一步简化代码。\n3. css 代码为了图快，是复制粘贴加微调，所以目测有很多无用的代码、重复的代码。\n\n## 参考\n\n> [How to generate Flashcards for Ankidroid out of Markdown in Jekyll using Javascript](http://pascalwhoop.github.io/technology/2016/01/27/How-to-generate-Flashcards-for-Ankidroid-out-of-Markdown-in-Jekyll.html)\n> [Hotlink resources like JavaScript files directly from GitHub @StackOverFlow](http://stackoverflow.com/questions/20311271/hotlink-resources-like-javascript-files-directly-from-github/20311329#24720957)","source":"_posts/使用-JavaScript-操作-HTML-批量制作-Anki-卡片.md","raw":"---\ntitle: 使用 JavaScript 操作 HTML 批量制作 Anki 卡片\ndate: 2017-02-27 11:44:54\ntags: [anki,markdown,sublime,HTML,JavaScript]\n---\n\n## 想要达到的效果\n\n1. 使用 markdown 总结笔记\n2. 利用笔记批量生成 anki 卡片\n\n## 前期准备\n\n### 批量制作 anki 卡片的两个思路\n\n1. [利用 TinyTask 之类的自动化操作软件进行重复性操作](http://v.ku6.com/show/l1A1FiYXohYYsz-OM6RdyQ...html)；\n2. 利用脚本对遵循某种规则的笔记内容进行切分和生成卡片。\n\n就这两个思路来说，第二个思路一劳永逸。而且作为一个程序猿，闭着眼睛也会选第二个的嘛 /w\\。\n\n<!-- more -->\n\n### 我的工作流和“原料”\n\n我一般是在 Sublime Text 上用 `markdown` 记各种笔记，然后通过 Sublime 的 OmniMarkupPreviewer 插件（在编辑页面 -> 右键 -> Preview Markup in Browser）在浏览器中实时预览 markdown 得到的 `html` 的。\n\n简而言之， **`MD + ST(OmniMarkupPreviewer) => HTML`** 。\n\n于是现在，我的手头有两种“原料”：\n\n* 最开始的 **MD 文件**\n* 实时的 **HTML 文件**\n\n### 脚本语言的选择\n\n看到 .html 文件，就想到了 `JavaScript`。所以，我选择使用 .html 文件作为“原材料”，用 js 对其进行加工，得到制作 anki 卡片所需要的 .csv 文件。\n\n### 约定\n\n> P.S. 这里简单起见，只制作具有正反面的、静态的（没有完形填空等的） ~~、纯文字内容的（没有图片、音频的）~~ 卡片。不过，卡片可以包含图片和表格。\n\n思路中提到的 **“遵循某种规则”** 是指书写 .md 文件的时候，你需要想好用什么特殊的符号区分开卡片的正面和背面。\n\n这里，我在 markdown 中**使用第二级标题 `##`** 来表示卡片的正面，在 HTML 对应为 `h2` 标签；而在两个第二级标题之间的所有内容表示卡片的反面。\n\n## 代码\n\n### [generateAnkiCards.js](https://github.com/baishusama/stockyard/blob/master/anki/generateAnkiCards.js)\n\n调用 generateAnkiCards.js 的代码：\n\n`(function() { var source = \"https://baishusama.github.io/stockyard/anki/generateAnkiCards.js\"; var s = document.createElement(\"script\"); s.src = source; document.body.appendChild(s); })()`\n\n* 使用方法一：在实时预览 MD 文件的浏览器标签页的地址栏中键入 `javascript:` ，再在后面添加上述代码，并回车。\n* 使用方法二：打开控制台（OSX 下 `Cmd+Alt+I` ，Windows 下 `F12`），在控制台输入上述代码并回车。\n\n注意：（推测 Chrome 可能出于安全考虑？），直接在 Chrome 地址栏中复制带有 `javascript:` 前导的代码，`javascript:` 会消失。\n\n我这里，为了进一步偷懒，利用了 Mac 下的 aText 软件，为（包含 `javascript:` 前缀的）一行代码定义了 `js:anki` 缩写。以后每次使用的时候，只要在地址栏敲入 `js:anki` 并回车就可以了。\n\n![使用 aText 定义缩写](http://ohz4k75du.bkt.clouddn.com/anki/aText-anki.jpg)\n\n> P.S. \n> 如果你没有 aText 软件，但是你也想偷懒，那么你可以另一种更为通用的办法：把上述一行代码保存为浏览器的书签。然后需要的时候，鼠标轻轻一点就好～\n> 进一步偷懒，可以使用 Chrome 上的 Vimium 插件。在预览标签页直接键入 `b` ，然后找到之前保存的书签，回车。\n\n### [css](https://baishusama.github.io/stockyard/anki/anki-card.css) （可选）\n\n使用方法：anki 主面板 -> 浏览 -> 需要应用样式的记忆库 -> 卡片 -> “格式刷”下方输入框内粘贴 css 样式。\n\n## 使用流程\n\n1. 在 Sublime Text 中使**用 markdown 记笔记**。使用 `##` 表示问题（卡片正面），后面紧接着写回答（卡片反面）。并利用 OmniMarkupPreviewer 插件在浏览器中实时预览。\n2. 记完笔记之后，在浏览器相应标签页的地址栏中，**键入 `js:anki` 并回车保存** .csv 文件。\n3. 将保存的 **.csv 文件导入 anki 记忆库**。\n    1. 主界面，在某记忆库下，单击“导入文件”。![主界面，在某记忆库下，单击“导入文件”。](http://ohz4k75du.bkt.clouddn.com/anki/anki-import-step1.jpg)\n    2. 选中上一步生成的 .csv 文件，单击“打开”。![选中上一步生成的 .csv 文件，单击“打开”。](http://ohz4k75du.bkt.clouddn.com/anki/anki-import-step2.jpg)\n    3. 下拉框选择“相同时更新已有”，单选框选中“允许在字段中使用HTML”，单击“导入”。![下拉框选择“相同时更新已有”，单选框选中“允许在字段中使用HTML”，单击“导入”。](http://ohz4k75du.bkt.clouddn.com/anki/anki-import-step3.jpg)\n\n\n## 副作用和不足\n\n### 副作用\n\n笔记里所有的半角双引号 `\"` 都会被 generateAnkiCards.js 文件强制转换为半角单引号 `'` 。因为生成 .csv 文件时，`\"` 被用于区分 excel 的列。\n\n### 不足\n\n1. 现在的 js 代码仅仅是“能用”。各方面来看都不是好的代码。\n2. 目前，js 代码是用原生 js 实现的。后来才发现，用 OmniMarkupPreviewer 生成 html 的时候，页面中已经自动引入了 jQuery ——可以使用 jq 进一步简化代码。\n3. css 代码为了图快，是复制粘贴加微调，所以目测有很多无用的代码、重复的代码。\n\n## 参考\n\n> [How to generate Flashcards for Ankidroid out of Markdown in Jekyll using Javascript](http://pascalwhoop.github.io/technology/2016/01/27/How-to-generate-Flashcards-for-Ankidroid-out-of-Markdown-in-Jekyll.html)\n> [Hotlink resources like JavaScript files directly from GitHub @StackOverFlow](http://stackoverflow.com/questions/20311271/hotlink-resources-like-javascript-files-directly-from-github/20311329#24720957)","slug":"使用-JavaScript-操作-HTML-批量制作-Anki-卡片","published":1,"updated":"2018-08-25T02:55:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkby2001m5xzxvd76qm3x","content":"<h2 id=\"想要达到的效果\"><a class=\"header-anchor\" href=\"#想要达到的效果\">¶</a>想要达到的效果</h2>\n<ol>\n<li>使用 markdown 总结笔记</li>\n<li>利用笔记批量生成 anki 卡片</li>\n</ol>\n<h2 id=\"前期准备\"><a class=\"header-anchor\" href=\"#前期准备\">¶</a>前期准备</h2>\n<h3 id=\"批量制作-anki-卡片的两个思路\"><a class=\"header-anchor\" href=\"#批量制作-anki-卡片的两个思路\">¶</a>批量制作 anki 卡片的两个思路</h3>\n<ol>\n<li><a href=\"http://v.ku6.com/show/l1A1FiYXohYYsz-OM6RdyQ...html\" target=\"_blank\" rel=\"noopener\">利用 TinyTask 之类的自动化操作软件进行重复性操作</a>；</li>\n<li>利用脚本对遵循某种规则的笔记内容进行切分和生成卡片。</li>\n</ol>\n<p>就这两个思路来说，第二个思路一劳永逸。而且作为一个程序猿，闭着眼睛也会选第二个的嘛 /w\\。</p>\n<a id=\"more\"></a>\n<h3 id=\"我的工作流和-原料\"><a class=\"header-anchor\" href=\"#我的工作流和-原料\">¶</a>我的工作流和“原料”</h3>\n<p>我一般是在 Sublime Text 上用 <code>markdown</code> 记各种笔记，然后通过 Sublime 的 OmniMarkupPreviewer 插件（在编辑页面 -&gt; 右键 -&gt; Preview Markup in Browser）在浏览器中实时预览 markdown 得到的 <code>html</code> 的。</p>\n<p>简而言之， <strong><code>MD + ST(OmniMarkupPreviewer) =&gt; HTML</code></strong> 。</p>\n<p>于是现在，我的手头有两种“原料”：</p>\n<ul>\n<li>最开始的 <strong>MD 文件</strong></li>\n<li>实时的 <strong>HTML 文件</strong></li>\n</ul>\n<h3 id=\"脚本语言的选择\"><a class=\"header-anchor\" href=\"#脚本语言的选择\">¶</a>脚本语言的选择</h3>\n<p>看到 .html 文件，就想到了 <code>JavaScript</code>。所以，我选择使用 .html 文件作为“原材料”，用 js 对其进行加工，得到制作 anki 卡片所需要的 .csv 文件。</p>\n<h3 id=\"约定\"><a class=\"header-anchor\" href=\"#约定\">¶</a>约定</h3>\n<blockquote>\n<p>P.S. 这里简单起见，只制作具有正反面的、静态的（没有完形填空等的） <s>、纯文字内容的（没有图片、音频的）</s> 卡片。不过，卡片可以包含图片和表格。</p>\n</blockquote>\n<p>思路中提到的 <strong>“遵循某种规则”</strong> 是指书写 .md 文件的时候，你需要想好用什么特殊的符号区分开卡片的正面和背面。</p>\n<p>这里，我在 markdown 中<strong>使用第二级标题 <code>##</code></strong> 来表示卡片的正面，在 HTML 对应为 <code>h2</code> 标签；而在两个第二级标题之间的所有内容表示卡片的反面。</p>\n<h2 id=\"代码\"><a class=\"header-anchor\" href=\"#代码\">¶</a>代码</h2>\n<h3 id=\"generateankicards-js\"><a class=\"header-anchor\" href=\"#generateankicards-js\">¶</a><a href=\"https://github.com/baishusama/stockyard/blob/master/anki/generateAnkiCards.js\" target=\"_blank\" rel=\"noopener\">generateAnkiCards.js</a></h3>\n<p>调用 generateAnkiCards.js 的代码：</p>\n<p><code>(function() { var source = &quot;https://baishusama.github.io/stockyard/anki/generateAnkiCards.js&quot;; var s = document.createElement(&quot;script&quot;); s.src = source; document.body.appendChild(s); })()</code></p>\n<ul>\n<li>使用方法一：在实时预览 MD 文件的浏览器标签页的地址栏中键入 <code>javascript:</code> ，再在后面添加上述代码，并回车。</li>\n<li>使用方法二：打开控制台（OSX 下 <code>Cmd+Alt+I</code> ，Windows 下 <code>F12</code>），在控制台输入上述代码并回车。</li>\n</ul>\n<p>注意：（推测 Chrome 可能出于安全考虑？），直接在 Chrome 地址栏中复制带有 <code>javascript:</code> 前导的代码，<code>javascript:</code> 会消失。</p>\n<p>我这里，为了进一步偷懒，利用了 Mac 下的 aText 软件，为（包含 <code>javascript:</code> 前缀的）一行代码定义了 <code>js:anki</code> 缩写。以后每次使用的时候，只要在地址栏敲入 <code>js:anki</code> 并回车就可以了。</p>\n<p><img src=\"http://ohz4k75du.bkt.clouddn.com/anki/aText-anki.jpg\" alt=\"使用 aText 定义缩写\"></p>\n<blockquote>\n<p>P.S.<br>\n如果你没有 aText 软件，但是你也想偷懒，那么你可以另一种更为通用的办法：把上述一行代码保存为浏览器的书签。然后需要的时候，鼠标轻轻一点就好～<br>\n进一步偷懒，可以使用 Chrome 上的 Vimium 插件。在预览标签页直接键入 <code>b</code> ，然后找到之前保存的书签，回车。</p>\n</blockquote>\n<h3 id=\"css-可选\"><a class=\"header-anchor\" href=\"#css-可选\">¶</a><a href=\"https://baishusama.github.io/stockyard/anki/anki-card.css\">css</a> （可选）</h3>\n<p>使用方法：anki 主面板 -&gt; 浏览 -&gt; 需要应用样式的记忆库 -&gt; 卡片 -&gt; “格式刷”下方输入框内粘贴 css 样式。</p>\n<h2 id=\"使用流程\"><a class=\"header-anchor\" href=\"#使用流程\">¶</a>使用流程</h2>\n<ol>\n<li>在 Sublime Text 中使<strong>用 markdown 记笔记</strong>。使用 <code>##</code> 表示问题（卡片正面），后面紧接着写回答（卡片反面）。并利用 OmniMarkupPreviewer 插件在浏览器中实时预览。</li>\n<li>记完笔记之后，在浏览器相应标签页的地址栏中，<strong>键入 <code>js:anki</code> 并回车保存</strong> .csv 文件。</li>\n<li>将保存的 <strong>.csv 文件导入 anki 记忆库</strong>。\n<ol>\n<li>主界面，在某记忆库下，单击“导入文件”。<img src=\"http://ohz4k75du.bkt.clouddn.com/anki/anki-import-step1.jpg\" alt=\"主界面，在某记忆库下，单击“导入文件”。\"></li>\n<li>选中上一步生成的 .csv 文件，单击“打开”。<img src=\"http://ohz4k75du.bkt.clouddn.com/anki/anki-import-step2.jpg\" alt=\"选中上一步生成的 .csv 文件，单击“打开”。\"></li>\n<li>下拉框选择“相同时更新已有”，单选框选中“允许在字段中使用HTML”，单击“导入”。<img src=\"http://ohz4k75du.bkt.clouddn.com/anki/anki-import-step3.jpg\" alt=\"下拉框选择“相同时更新已有”，单选框选中“允许在字段中使用HTML”，单击“导入”。\"></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"副作用和不足\"><a class=\"header-anchor\" href=\"#副作用和不足\">¶</a>副作用和不足</h2>\n<h3 id=\"副作用\"><a class=\"header-anchor\" href=\"#副作用\">¶</a>副作用</h3>\n<p>笔记里所有的半角双引号 <code>&quot;</code> 都会被 generateAnkiCards.js 文件强制转换为半角单引号 <code>'</code> 。因为生成 .csv 文件时，<code>&quot;</code> 被用于区分 excel 的列。</p>\n<h3 id=\"不足\"><a class=\"header-anchor\" href=\"#不足\">¶</a>不足</h3>\n<ol>\n<li>现在的 js 代码仅仅是“能用”。各方面来看都不是好的代码。</li>\n<li>目前，js 代码是用原生 js 实现的。后来才发现，用 OmniMarkupPreviewer 生成 html 的时候，页面中已经自动引入了 jQuery ——可以使用 jq 进一步简化代码。</li>\n<li>css 代码为了图快，是复制粘贴加微调，所以目测有很多无用的代码、重复的代码。</li>\n</ol>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h2>\n<blockquote>\n<p><a href=\"http://pascalwhoop.github.io/technology/2016/01/27/How-to-generate-Flashcards-for-Ankidroid-out-of-Markdown-in-Jekyll.html\" target=\"_blank\" rel=\"noopener\">How to generate Flashcards for Ankidroid out of Markdown in Jekyll using Javascript</a><br>\n<a href=\"http://stackoverflow.com/questions/20311271/hotlink-resources-like-javascript-files-directly-from-github/20311329#24720957\" target=\"_blank\" rel=\"noopener\">Hotlink resources like JavaScript files directly from GitHub @StackOverFlow</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"想要达到的效果\"><a class=\"header-anchor\" href=\"#想要达到的效果\">¶</a>想要达到的效果</h2>\n<ol>\n<li>使用 markdown 总结笔记</li>\n<li>利用笔记批量生成 anki 卡片</li>\n</ol>\n<h2 id=\"前期准备\"><a class=\"header-anchor\" href=\"#前期准备\">¶</a>前期准备</h2>\n<h3 id=\"批量制作-anki-卡片的两个思路\"><a class=\"header-anchor\" href=\"#批量制作-anki-卡片的两个思路\">¶</a>批量制作 anki 卡片的两个思路</h3>\n<ol>\n<li><a href=\"http://v.ku6.com/show/l1A1FiYXohYYsz-OM6RdyQ...html\" target=\"_blank\" rel=\"noopener\">利用 TinyTask 之类的自动化操作软件进行重复性操作</a>；</li>\n<li>利用脚本对遵循某种规则的笔记内容进行切分和生成卡片。</li>\n</ol>\n<p>就这两个思路来说，第二个思路一劳永逸。而且作为一个程序猿，闭着眼睛也会选第二个的嘛 /w\\。</p>","more":"<h3 id=\"我的工作流和-原料\"><a class=\"header-anchor\" href=\"#我的工作流和-原料\">¶</a>我的工作流和“原料”</h3>\n<p>我一般是在 Sublime Text 上用 <code>markdown</code> 记各种笔记，然后通过 Sublime 的 OmniMarkupPreviewer 插件（在编辑页面 -&gt; 右键 -&gt; Preview Markup in Browser）在浏览器中实时预览 markdown 得到的 <code>html</code> 的。</p>\n<p>简而言之， <strong><code>MD + ST(OmniMarkupPreviewer) =&gt; HTML</code></strong> 。</p>\n<p>于是现在，我的手头有两种“原料”：</p>\n<ul>\n<li>最开始的 <strong>MD 文件</strong></li>\n<li>实时的 <strong>HTML 文件</strong></li>\n</ul>\n<h3 id=\"脚本语言的选择\"><a class=\"header-anchor\" href=\"#脚本语言的选择\">¶</a>脚本语言的选择</h3>\n<p>看到 .html 文件，就想到了 <code>JavaScript</code>。所以，我选择使用 .html 文件作为“原材料”，用 js 对其进行加工，得到制作 anki 卡片所需要的 .csv 文件。</p>\n<h3 id=\"约定\"><a class=\"header-anchor\" href=\"#约定\">¶</a>约定</h3>\n<blockquote>\n<p>P.S. 这里简单起见，只制作具有正反面的、静态的（没有完形填空等的） <s>、纯文字内容的（没有图片、音频的）</s> 卡片。不过，卡片可以包含图片和表格。</p>\n</blockquote>\n<p>思路中提到的 <strong>“遵循某种规则”</strong> 是指书写 .md 文件的时候，你需要想好用什么特殊的符号区分开卡片的正面和背面。</p>\n<p>这里，我在 markdown 中<strong>使用第二级标题 <code>##</code></strong> 来表示卡片的正面，在 HTML 对应为 <code>h2</code> 标签；而在两个第二级标题之间的所有内容表示卡片的反面。</p>\n<h2 id=\"代码\"><a class=\"header-anchor\" href=\"#代码\">¶</a>代码</h2>\n<h3 id=\"generateankicards-js\"><a class=\"header-anchor\" href=\"#generateankicards-js\">¶</a><a href=\"https://github.com/baishusama/stockyard/blob/master/anki/generateAnkiCards.js\" target=\"_blank\" rel=\"noopener\">generateAnkiCards.js</a></h3>\n<p>调用 generateAnkiCards.js 的代码：</p>\n<p><code>(function() { var source = &quot;https://baishusama.github.io/stockyard/anki/generateAnkiCards.js&quot;; var s = document.createElement(&quot;script&quot;); s.src = source; document.body.appendChild(s); })()</code></p>\n<ul>\n<li>使用方法一：在实时预览 MD 文件的浏览器标签页的地址栏中键入 <code>javascript:</code> ，再在后面添加上述代码，并回车。</li>\n<li>使用方法二：打开控制台（OSX 下 <code>Cmd+Alt+I</code> ，Windows 下 <code>F12</code>），在控制台输入上述代码并回车。</li>\n</ul>\n<p>注意：（推测 Chrome 可能出于安全考虑？），直接在 Chrome 地址栏中复制带有 <code>javascript:</code> 前导的代码，<code>javascript:</code> 会消失。</p>\n<p>我这里，为了进一步偷懒，利用了 Mac 下的 aText 软件，为（包含 <code>javascript:</code> 前缀的）一行代码定义了 <code>js:anki</code> 缩写。以后每次使用的时候，只要在地址栏敲入 <code>js:anki</code> 并回车就可以了。</p>\n<p><img src=\"http://ohz4k75du.bkt.clouddn.com/anki/aText-anki.jpg\" alt=\"使用 aText 定义缩写\"></p>\n<blockquote>\n<p>P.S.<br>\n如果你没有 aText 软件，但是你也想偷懒，那么你可以另一种更为通用的办法：把上述一行代码保存为浏览器的书签。然后需要的时候，鼠标轻轻一点就好～<br>\n进一步偷懒，可以使用 Chrome 上的 Vimium 插件。在预览标签页直接键入 <code>b</code> ，然后找到之前保存的书签，回车。</p>\n</blockquote>\n<h3 id=\"css-可选\"><a class=\"header-anchor\" href=\"#css-可选\">¶</a><a href=\"https://baishusama.github.io/stockyard/anki/anki-card.css\">css</a> （可选）</h3>\n<p>使用方法：anki 主面板 -&gt; 浏览 -&gt; 需要应用样式的记忆库 -&gt; 卡片 -&gt; “格式刷”下方输入框内粘贴 css 样式。</p>\n<h2 id=\"使用流程\"><a class=\"header-anchor\" href=\"#使用流程\">¶</a>使用流程</h2>\n<ol>\n<li>在 Sublime Text 中使<strong>用 markdown 记笔记</strong>。使用 <code>##</code> 表示问题（卡片正面），后面紧接着写回答（卡片反面）。并利用 OmniMarkupPreviewer 插件在浏览器中实时预览。</li>\n<li>记完笔记之后，在浏览器相应标签页的地址栏中，<strong>键入 <code>js:anki</code> 并回车保存</strong> .csv 文件。</li>\n<li>将保存的 <strong>.csv 文件导入 anki 记忆库</strong>。\n<ol>\n<li>主界面，在某记忆库下，单击“导入文件”。<img src=\"http://ohz4k75du.bkt.clouddn.com/anki/anki-import-step1.jpg\" alt=\"主界面，在某记忆库下，单击“导入文件”。\"></li>\n<li>选中上一步生成的 .csv 文件，单击“打开”。<img src=\"http://ohz4k75du.bkt.clouddn.com/anki/anki-import-step2.jpg\" alt=\"选中上一步生成的 .csv 文件，单击“打开”。\"></li>\n<li>下拉框选择“相同时更新已有”，单选框选中“允许在字段中使用HTML”，单击“导入”。<img src=\"http://ohz4k75du.bkt.clouddn.com/anki/anki-import-step3.jpg\" alt=\"下拉框选择“相同时更新已有”，单选框选中“允许在字段中使用HTML”，单击“导入”。\"></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"副作用和不足\"><a class=\"header-anchor\" href=\"#副作用和不足\">¶</a>副作用和不足</h2>\n<h3 id=\"副作用\"><a class=\"header-anchor\" href=\"#副作用\">¶</a>副作用</h3>\n<p>笔记里所有的半角双引号 <code>&quot;</code> 都会被 generateAnkiCards.js 文件强制转换为半角单引号 <code>'</code> 。因为生成 .csv 文件时，<code>&quot;</code> 被用于区分 excel 的列。</p>\n<h3 id=\"不足\"><a class=\"header-anchor\" href=\"#不足\">¶</a>不足</h3>\n<ol>\n<li>现在的 js 代码仅仅是“能用”。各方面来看都不是好的代码。</li>\n<li>目前，js 代码是用原生 js 实现的。后来才发现，用 OmniMarkupPreviewer 生成 html 的时候，页面中已经自动引入了 jQuery ——可以使用 jq 进一步简化代码。</li>\n<li>css 代码为了图快，是复制粘贴加微调，所以目测有很多无用的代码、重复的代码。</li>\n</ol>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h2>\n<blockquote>\n<p><a href=\"http://pascalwhoop.github.io/technology/2016/01/27/How-to-generate-Flashcards-for-Ankidroid-out-of-Markdown-in-Jekyll.html\" target=\"_blank\" rel=\"noopener\">How to generate Flashcards for Ankidroid out of Markdown in Jekyll using Javascript</a><br>\n<a href=\"http://stackoverflow.com/questions/20311271/hotlink-resources-like-javascript-files-directly-from-github/20311329#24720957\" target=\"_blank\" rel=\"noopener\">Hotlink resources like JavaScript files directly from GitHub @StackOverFlow</a></p>\n</blockquote>"},{"title":"移动端 click 事件 300ms 延迟的前世今生","date":"2017-03-27T09:21:17.000Z","_content":"\n## 存疑\n\n最开始，我遇到的其实是“移动端遮罩层滑动穿透”的问题。\n\n在查找“滑动穿透”问题相关资料的时候，我搜到了很多 click 300ms 延迟的问题。我那个时候有些不知所云，因为我自己并没有真实遇到过 300ms 延迟现象，也就没怎么在意。\n\n时至今日想动笔总结遇到了若干次的“滑动穿透”问题的时候，搜集资料的偶然间得以解惑 300ms 的前世今生。\n\n<!-- more -->\n\n## 移动端 `click` 的 300ms 延迟\n\n那么，[这 300ms 延迟到底是从哪里来的呢？](http://www.telerik.com/blogs/what-exactly-is.....-the-300ms-click-delay)\n\n时间要追溯到 2007 年初代 iPhone 发布前夕，苹果为了解决“如何用手机这种小尺寸屏幕来显示 PC 端网页”这个问题，提出了很多聪明的约定（convention）。而后因为 iPhone 的大获成功，这些约定被各大手机浏览器争相效仿。\n\n这些约定之中，**双击缩放（Double Tap to Zoom）** 就是 300ms 的“元凶”——当用户在页面上 click 的时候，浏览器为了判断这个用户操作是单击还是双击，会等待 300-350ms 。如果 300ms 内，发生了第二次 click 事件，那么视为双击；否则为单击，等 300ms 时间过去之后，才触发 click 事件。\n\n在那个还不存在响应式设计和双指缩放（Pinch to Zoom）的时代，这个延迟是一个合理的预防措施。但不幸的是，**这 300ms 的延迟已经成为用户觉得 web 应用比 native 应用更慢、性能不及后者的主要原因之一**。诸如，链接、按钮、多选框等基于 click 交互的元素，以及 JS 对 click 事件的监听，都因此受到影响。\n\n幸运的是，浏览器开发商（vendor）和开发者都注意到了这个问题，提出了一些解决方案。\n\n## 解决方案\n\n### 方案一、:-1: 禁用缩放\n\n* 代码：\n    ```html\n    <meta name=\"viewport\" content=\"user-scalable=no\">\n    <!-- 或者 -->\n    <meta name=\"viewport\" content=\"initial-scale=1, minimum-scale=1, maximum-scale=1\">\n    ```\n* 原理：双击是为了缩放，如果禁用缩放，那么就没双击什么事儿了，也不需要额外等待 300ms 了。\n* 支持情况：在 Android 平台上，由 Chrome 最先提出，FireFox、Opera 等浏览器也相继支持；IOS 9.3 开始一度支持，IOS10 开始不再支持。\n* 缺点：Safari 不支持。而且，禁用缩放会**损害移动端网页的可用性和可访问性**。例如，可能无法放大网页中的一张图片或一段字体较小的文字。\n\n> 这里要注意区分：“双击缩放”（Double Tap to Zoom）和“双指缩放”（Pinch to Zoom）。为了兼顾消除 300ms 延迟和不损害可用性和可访问性，**我们应该抛弃双击缩放、拥抱双指缩放。**\n\n### 方案二、:+1: 视窗宽度设置为设备宽度\n\n* 代码：\n    ```html\n    <meta name=\"viewport\" content=\"width=device-width\">\n    ```\n* 原由：正如 [Chromium Code Reviews](https://codereview.chromium.org/18850005/) 上说的，`viewport` 的 `width` 设置得小于等于 `device-width` 的页面，是针对移动端优化过的或者是响应式的站点，其内容足够清晰，双击缩放失去了意义。因此，为包含上面这行代码的页面**禁用双击缩放**。同时，双指缩放得以保留，从而也就**没有可用性和可访问性问题**了。\n* 支持情况：自 Chrome 32 开始，FF、IE/Edge 也随后支持了；2016 年 3 月，IOS 9.3 开始支持。\n* 推荐使用！\n\n> 该解决方案的“禁止双击缩放”是遵守如下[规则](https://trac.webkit.org/changeset/191644/webkit)的：\n> * 当页面设置了视窗宽度为设备宽度且是初始尺寸（页面尚未缩放），此时，双击缩放才是被禁止的。\n> * 如果视窗尺寸不是初始尺寸（页面已经缩放），双击缩放是被允许的。\n> * 为了在用户结束缩放后仍能 fast-click ，缩小时，只能缩小到初始尺寸，而不是最小尺寸。\n\n### 方案三、:+1: 指针事件（Pointer Events）\n\n* 代码：\n    ```css\n    a, button, .myelements {\n        -ms-touch-action: manipulation; /* IE10  */\n        touch-action: manipulation;     /* IE11+ */\n    }\n    ```\n* 根据[规范](https://w3c.github.io/pointerevents/#the-touch-action-css-property)：CSS 属性 `touch-action` 决定了触摸输入（touch input）能否触发 UA （User Agent）支持的默认行为。这包括但不限于诸如平移或缩放等行为。\n* 根据 [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action)：`touch-action` 的 `manipulation` 值激活了平移和双指缩放手势，而禁用了双击缩放等非标准的手势。\n* 支持情况：在 [Can I Use](http://caniuse.com/#search=touch-action) 上可以看出，除了 Opera Mini 不支持、FF 需要手动启用和 Android 4.x 的自带浏览器有些迷之外，其他浏览器支持良好。\n* 推荐使用！\n\n> 在只有 IE 支持指针事件的初期，诞生了不少[指针事件的 polyfill 解决方案](https://thx.github.io/mobile/300ms-click-delay#指针事件的-polyfill)。在仍不支持指针事件的浏览器上，这是一种变通的方式。\n> \n> `shim` VS `polyfill`\n> \n> 1. 一个 shim 是一个库，它将一个新的 API 引入到一个旧的环境中，而且仅靠旧环境中已有的手段实现。\n> 2. [**polyfill 就是浏览器 API 的 shim 。**](https://www.wikiwand.com/en/Polyfill) 它用于实现浏览器并不支持的原生 API 的代码，是**抹平**新旧浏览器对原生 API 支持**差异**的封装。通常，polyfill 会先检查当前浏览器是否支持某个 API，如果不支持的话就加载它自己的实现，然后新旧浏览器就都可以使用这个 API 了。相当于“打补丁”，“刮腻子”。\n\n### 方案四、:+1: [轻量级库 FastClick](https://github.com/ftlabs/fastclick)\n\n* 代码：\n    ```javascript\n    window.addEventListener( \"load\", function() {\n        FastClick.attach( document.body ); // 直接绑定到 <body> 上可以确保整个应用都能受益\n    }, false );\n    ```\n* 原理：FastClick 在检测到 `touchend` 事件的时候，会通过 [DOM 自定义事件](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)立即触发一个模拟的 `click` 事件，并把浏览器 300ms 之后真正触发的 click 事件阻止掉。\n* 无冲突：当 FastClick 检测到当前页面使用了基于 `<meta>` 标签或者 `touch-action` 属性的解决方案时，[会静静地看别的解决方案装逼](https://github.com/ftlabs/fastclick#when-it-isnt-needed)。\n* 唯一的缺点：文件大小占 10 KB……\n* 推荐使用！\n\n## 关于“始作俑者” Safari\n\n### 起承转折\n\n[(2013) 300 毫秒点击延迟的来龙去脉](https://thx.github.io/mobile/300ms-click-delay)一文中提到的 IOS 特有的**双击滚动（Double Tap to Scroll）：仍存在**、并没有像原文猜测的那样消失。（亲测 IOS 10.2.1 Safari 已设置 `<meta name=\"viewport\" content=\"width=device-width\">` 的页面在屏幕上或下 1/4 处双击仍能滚动。）\n\n起初看到「[2016 年 3 月发布的 IOS 9.3 移除了 300ms 延迟、从而实现了“fast-tap” ](https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_9_1.html#//apple_ref/doc/uid/TP40014305-CH10-SW8)」时，我还欣慰地想道：最先提出“双击缩放”约定的苹果，在最后也顺应了历史潮流嘛。但是接着看到「[IOS10 无视了禁用缩放（user-scalable）](https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-SW1)」我的内心瞬间黑人问号：“？？？”。\n\n后来，静静地看了两篇文章（[Safari zoom gesture's comeback in iOS 10](http://cloudless.studio/articles/39-safari-zoom-gesture-s-comeback-in-ios-10) 和 [How to disable viewport scaling in iOS 10? You don't.](https://wouterdeschuyter.be/blog/how-to-disable-viewport-scaling-in-ios-10-you-dont-941140811)），做了点 `<meta>` 标签的测试。\n\n### 测试结果\n\n测试环境：IOS 10.2.1\n\n1. 只设置 `<meta name=\"viewport\" content=\"user-scalable=no\">` 和不设置没有任何区别——`user-scalable=no` 被完全无视。\n2. 只设置 `<meta name=\"viewport\" content=\"width=device-width\">` ，和方案二里的描述一致，仍可以在初始尺寸下禁用双击缩放。\n3. 只设置 `<meta name=\"viewport\" content=\"initial-scale=1.0\">` ，初始状态和“测试2”很像，但是仍存在双击缩放，即仍有 300ms 延迟。\n4. 设置 `<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">` 或者 `<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">` ，和只设置 `width=device-width` 并无显著差异。\n5. 为某个 `<a>` 链接设置 `touch-action: manipulation;` ，可以禁用该元素上的双击缩放。\n\n要点如下：\n\n1. `user-scalable=no` 完全起不到禁止缩放的作用，`width=device-width` 仍能且仅能禁止双击缩放。\n2. 只设置 `meta` 无法完全禁用缩放，双指缩放总是可行的。\n\n### 暮然回首\n\n冷静下来后，重新审视上述变故，发现其实是两回事。前面提到过“我们应该抛弃双击缩放、拥抱双指缩放”，苹果没有打破这个原则。只是，**苹果出于可访问性考虑，直接任性地完全无视了 `user-scalable=no`**。\n\n> [**Accessibility**\n> Pinch-to-zoom is always enabled for all users. The viewport setting for user-scalable is ignored.](https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-SW1)\n\n当然，这导致了觉得应该一切尽在掌控、想要完全禁用缩放以避免破坏布局的开发者的怨言。如果，你**还是想完全禁用缩放，可以参考** [SO 上的这个回答](http://stackoverflow.com/questions/37808180/disable-viewport-zooming-ios-10-safari/38573198#38573198)。\n\n## 解惑\n\n最开始提到过，我至今没有遇到过这个问题。对这个现象我推理如下：\n\n我的肾机在开发移动端的半年间只在近期做过一次系统升级（目前已升到 10.2.1）。之前使用的具体的版本号已经无从得知了（P.S. 如果有谁知道怎么查看肾机本机上的版本更新历史，请务必告诉我233），但是更新到 IOS10 之前，我一直有使用 9.3+ 才支持的 Night Shift 功能，也就是说升级之前的系统版本号肯定在 9.3 或者以上。\n\n而我写移动端页面的时候，惯例会 `meta:vp` 然后 `Tab` 生成 `<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">`。在 IOS10 之前，这行代码还是能够禁用页面的缩放的，也就不存在 300ms 的延迟问题了。\n\n这就是为什么之前我本机测试的时候一直没有遇到传说中的 300ms 延迟现象的原因了。\n\n## 参考\n\n1. [(2013) 300 毫秒点击延迟的来龙去脉](https://thx.github.io/mobile/300ms-click-delay)\n2. [(2014) 5-ways-prevent-300ms-click-delay-mobile-devices](https://www.sitepoint.com/5-ways-prevent-300ms-click-delay-mobile-devices/)\n3. [(2015) Implement viewport-width-based fast-click heuristic](https://trac.webkit.org/changeset/191644/webkit)\n4. [(2016) 无线端浏览器 click 事件 300ms 延迟](http://qiudeqing.com/mobile_web/2016/05/21/mobile-browser-click-300ms-delay.html)\n5. [(2016) 300ms-tap-delay-gone-away](https://developers.google.com/web/updates/2013/12/300ms-tap-delay-gone-away)\n","source":"_posts/移动端-click-事件的-300ms-延迟.md","raw":"---\ntitle: 移动端 click 事件 300ms 延迟的前世今生\ndate: 2017-03-27 17:21:17\ntags: [HTML,JavaScript,mobile]\n---\n\n## 存疑\n\n最开始，我遇到的其实是“移动端遮罩层滑动穿透”的问题。\n\n在查找“滑动穿透”问题相关资料的时候，我搜到了很多 click 300ms 延迟的问题。我那个时候有些不知所云，因为我自己并没有真实遇到过 300ms 延迟现象，也就没怎么在意。\n\n时至今日想动笔总结遇到了若干次的“滑动穿透”问题的时候，搜集资料的偶然间得以解惑 300ms 的前世今生。\n\n<!-- more -->\n\n## 移动端 `click` 的 300ms 延迟\n\n那么，[这 300ms 延迟到底是从哪里来的呢？](http://www.telerik.com/blogs/what-exactly-is.....-the-300ms-click-delay)\n\n时间要追溯到 2007 年初代 iPhone 发布前夕，苹果为了解决“如何用手机这种小尺寸屏幕来显示 PC 端网页”这个问题，提出了很多聪明的约定（convention）。而后因为 iPhone 的大获成功，这些约定被各大手机浏览器争相效仿。\n\n这些约定之中，**双击缩放（Double Tap to Zoom）** 就是 300ms 的“元凶”——当用户在页面上 click 的时候，浏览器为了判断这个用户操作是单击还是双击，会等待 300-350ms 。如果 300ms 内，发生了第二次 click 事件，那么视为双击；否则为单击，等 300ms 时间过去之后，才触发 click 事件。\n\n在那个还不存在响应式设计和双指缩放（Pinch to Zoom）的时代，这个延迟是一个合理的预防措施。但不幸的是，**这 300ms 的延迟已经成为用户觉得 web 应用比 native 应用更慢、性能不及后者的主要原因之一**。诸如，链接、按钮、多选框等基于 click 交互的元素，以及 JS 对 click 事件的监听，都因此受到影响。\n\n幸运的是，浏览器开发商（vendor）和开发者都注意到了这个问题，提出了一些解决方案。\n\n## 解决方案\n\n### 方案一、:-1: 禁用缩放\n\n* 代码：\n    ```html\n    <meta name=\"viewport\" content=\"user-scalable=no\">\n    <!-- 或者 -->\n    <meta name=\"viewport\" content=\"initial-scale=1, minimum-scale=1, maximum-scale=1\">\n    ```\n* 原理：双击是为了缩放，如果禁用缩放，那么就没双击什么事儿了，也不需要额外等待 300ms 了。\n* 支持情况：在 Android 平台上，由 Chrome 最先提出，FireFox、Opera 等浏览器也相继支持；IOS 9.3 开始一度支持，IOS10 开始不再支持。\n* 缺点：Safari 不支持。而且，禁用缩放会**损害移动端网页的可用性和可访问性**。例如，可能无法放大网页中的一张图片或一段字体较小的文字。\n\n> 这里要注意区分：“双击缩放”（Double Tap to Zoom）和“双指缩放”（Pinch to Zoom）。为了兼顾消除 300ms 延迟和不损害可用性和可访问性，**我们应该抛弃双击缩放、拥抱双指缩放。**\n\n### 方案二、:+1: 视窗宽度设置为设备宽度\n\n* 代码：\n    ```html\n    <meta name=\"viewport\" content=\"width=device-width\">\n    ```\n* 原由：正如 [Chromium Code Reviews](https://codereview.chromium.org/18850005/) 上说的，`viewport` 的 `width` 设置得小于等于 `device-width` 的页面，是针对移动端优化过的或者是响应式的站点，其内容足够清晰，双击缩放失去了意义。因此，为包含上面这行代码的页面**禁用双击缩放**。同时，双指缩放得以保留，从而也就**没有可用性和可访问性问题**了。\n* 支持情况：自 Chrome 32 开始，FF、IE/Edge 也随后支持了；2016 年 3 月，IOS 9.3 开始支持。\n* 推荐使用！\n\n> 该解决方案的“禁止双击缩放”是遵守如下[规则](https://trac.webkit.org/changeset/191644/webkit)的：\n> * 当页面设置了视窗宽度为设备宽度且是初始尺寸（页面尚未缩放），此时，双击缩放才是被禁止的。\n> * 如果视窗尺寸不是初始尺寸（页面已经缩放），双击缩放是被允许的。\n> * 为了在用户结束缩放后仍能 fast-click ，缩小时，只能缩小到初始尺寸，而不是最小尺寸。\n\n### 方案三、:+1: 指针事件（Pointer Events）\n\n* 代码：\n    ```css\n    a, button, .myelements {\n        -ms-touch-action: manipulation; /* IE10  */\n        touch-action: manipulation;     /* IE11+ */\n    }\n    ```\n* 根据[规范](https://w3c.github.io/pointerevents/#the-touch-action-css-property)：CSS 属性 `touch-action` 决定了触摸输入（touch input）能否触发 UA （User Agent）支持的默认行为。这包括但不限于诸如平移或缩放等行为。\n* 根据 [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action)：`touch-action` 的 `manipulation` 值激活了平移和双指缩放手势，而禁用了双击缩放等非标准的手势。\n* 支持情况：在 [Can I Use](http://caniuse.com/#search=touch-action) 上可以看出，除了 Opera Mini 不支持、FF 需要手动启用和 Android 4.x 的自带浏览器有些迷之外，其他浏览器支持良好。\n* 推荐使用！\n\n> 在只有 IE 支持指针事件的初期，诞生了不少[指针事件的 polyfill 解决方案](https://thx.github.io/mobile/300ms-click-delay#指针事件的-polyfill)。在仍不支持指针事件的浏览器上，这是一种变通的方式。\n> \n> `shim` VS `polyfill`\n> \n> 1. 一个 shim 是一个库，它将一个新的 API 引入到一个旧的环境中，而且仅靠旧环境中已有的手段实现。\n> 2. [**polyfill 就是浏览器 API 的 shim 。**](https://www.wikiwand.com/en/Polyfill) 它用于实现浏览器并不支持的原生 API 的代码，是**抹平**新旧浏览器对原生 API 支持**差异**的封装。通常，polyfill 会先检查当前浏览器是否支持某个 API，如果不支持的话就加载它自己的实现，然后新旧浏览器就都可以使用这个 API 了。相当于“打补丁”，“刮腻子”。\n\n### 方案四、:+1: [轻量级库 FastClick](https://github.com/ftlabs/fastclick)\n\n* 代码：\n    ```javascript\n    window.addEventListener( \"load\", function() {\n        FastClick.attach( document.body ); // 直接绑定到 <body> 上可以确保整个应用都能受益\n    }, false );\n    ```\n* 原理：FastClick 在检测到 `touchend` 事件的时候，会通过 [DOM 自定义事件](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)立即触发一个模拟的 `click` 事件，并把浏览器 300ms 之后真正触发的 click 事件阻止掉。\n* 无冲突：当 FastClick 检测到当前页面使用了基于 `<meta>` 标签或者 `touch-action` 属性的解决方案时，[会静静地看别的解决方案装逼](https://github.com/ftlabs/fastclick#when-it-isnt-needed)。\n* 唯一的缺点：文件大小占 10 KB……\n* 推荐使用！\n\n## 关于“始作俑者” Safari\n\n### 起承转折\n\n[(2013) 300 毫秒点击延迟的来龙去脉](https://thx.github.io/mobile/300ms-click-delay)一文中提到的 IOS 特有的**双击滚动（Double Tap to Scroll）：仍存在**、并没有像原文猜测的那样消失。（亲测 IOS 10.2.1 Safari 已设置 `<meta name=\"viewport\" content=\"width=device-width\">` 的页面在屏幕上或下 1/4 处双击仍能滚动。）\n\n起初看到「[2016 年 3 月发布的 IOS 9.3 移除了 300ms 延迟、从而实现了“fast-tap” ](https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_9_1.html#//apple_ref/doc/uid/TP40014305-CH10-SW8)」时，我还欣慰地想道：最先提出“双击缩放”约定的苹果，在最后也顺应了历史潮流嘛。但是接着看到「[IOS10 无视了禁用缩放（user-scalable）](https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-SW1)」我的内心瞬间黑人问号：“？？？”。\n\n后来，静静地看了两篇文章（[Safari zoom gesture's comeback in iOS 10](http://cloudless.studio/articles/39-safari-zoom-gesture-s-comeback-in-ios-10) 和 [How to disable viewport scaling in iOS 10? You don't.](https://wouterdeschuyter.be/blog/how-to-disable-viewport-scaling-in-ios-10-you-dont-941140811)），做了点 `<meta>` 标签的测试。\n\n### 测试结果\n\n测试环境：IOS 10.2.1\n\n1. 只设置 `<meta name=\"viewport\" content=\"user-scalable=no\">` 和不设置没有任何区别——`user-scalable=no` 被完全无视。\n2. 只设置 `<meta name=\"viewport\" content=\"width=device-width\">` ，和方案二里的描述一致，仍可以在初始尺寸下禁用双击缩放。\n3. 只设置 `<meta name=\"viewport\" content=\"initial-scale=1.0\">` ，初始状态和“测试2”很像，但是仍存在双击缩放，即仍有 300ms 延迟。\n4. 设置 `<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">` 或者 `<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">` ，和只设置 `width=device-width` 并无显著差异。\n5. 为某个 `<a>` 链接设置 `touch-action: manipulation;` ，可以禁用该元素上的双击缩放。\n\n要点如下：\n\n1. `user-scalable=no` 完全起不到禁止缩放的作用，`width=device-width` 仍能且仅能禁止双击缩放。\n2. 只设置 `meta` 无法完全禁用缩放，双指缩放总是可行的。\n\n### 暮然回首\n\n冷静下来后，重新审视上述变故，发现其实是两回事。前面提到过“我们应该抛弃双击缩放、拥抱双指缩放”，苹果没有打破这个原则。只是，**苹果出于可访问性考虑，直接任性地完全无视了 `user-scalable=no`**。\n\n> [**Accessibility**\n> Pinch-to-zoom is always enabled for all users. The viewport setting for user-scalable is ignored.](https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-SW1)\n\n当然，这导致了觉得应该一切尽在掌控、想要完全禁用缩放以避免破坏布局的开发者的怨言。如果，你**还是想完全禁用缩放，可以参考** [SO 上的这个回答](http://stackoverflow.com/questions/37808180/disable-viewport-zooming-ios-10-safari/38573198#38573198)。\n\n## 解惑\n\n最开始提到过，我至今没有遇到过这个问题。对这个现象我推理如下：\n\n我的肾机在开发移动端的半年间只在近期做过一次系统升级（目前已升到 10.2.1）。之前使用的具体的版本号已经无从得知了（P.S. 如果有谁知道怎么查看肾机本机上的版本更新历史，请务必告诉我233），但是更新到 IOS10 之前，我一直有使用 9.3+ 才支持的 Night Shift 功能，也就是说升级之前的系统版本号肯定在 9.3 或者以上。\n\n而我写移动端页面的时候，惯例会 `meta:vp` 然后 `Tab` 生成 `<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">`。在 IOS10 之前，这行代码还是能够禁用页面的缩放的，也就不存在 300ms 的延迟问题了。\n\n这就是为什么之前我本机测试的时候一直没有遇到传说中的 300ms 延迟现象的原因了。\n\n## 参考\n\n1. [(2013) 300 毫秒点击延迟的来龙去脉](https://thx.github.io/mobile/300ms-click-delay)\n2. [(2014) 5-ways-prevent-300ms-click-delay-mobile-devices](https://www.sitepoint.com/5-ways-prevent-300ms-click-delay-mobile-devices/)\n3. [(2015) Implement viewport-width-based fast-click heuristic](https://trac.webkit.org/changeset/191644/webkit)\n4. [(2016) 无线端浏览器 click 事件 300ms 延迟](http://qiudeqing.com/mobile_web/2016/05/21/mobile-browser-click-300ms-delay.html)\n5. [(2016) 300ms-tap-delay-gone-away](https://developers.google.com/web/updates/2013/12/300ms-tap-delay-gone-away)\n","slug":"移动端-click-事件的-300ms-延迟","published":1,"updated":"2018-08-25T02:55:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkby5001o5xzxa88fv926","content":"<h2 id=\"存疑\"><a class=\"header-anchor\" href=\"#存疑\">¶</a>存疑</h2>\n<p>最开始，我遇到的其实是“移动端遮罩层滑动穿透”的问题。</p>\n<p>在查找“滑动穿透”问题相关资料的时候，我搜到了很多 click 300ms 延迟的问题。我那个时候有些不知所云，因为我自己并没有真实遇到过 300ms 延迟现象，也就没怎么在意。</p>\n<p>时至今日想动笔总结遇到了若干次的“滑动穿透”问题的时候，搜集资料的偶然间得以解惑 300ms 的前世今生。</p>\n<a id=\"more\"></a>\n<h2 id=\"移动端-click-的-300ms-延迟\"><a class=\"header-anchor\" href=\"#移动端-click-的-300ms-延迟\">¶</a>移动端 <code>click</code> 的 300ms 延迟</h2>\n<p>那么，<a href=\"http://www.telerik.com/blogs/what-exactly-is.....-the-300ms-click-delay\" target=\"_blank\" rel=\"noopener\">这 300ms 延迟到底是从哪里来的呢？</a></p>\n<p>时间要追溯到 2007 年初代 iPhone 发布前夕，苹果为了解决“如何用手机这种小尺寸屏幕来显示 PC 端网页”这个问题，提出了很多聪明的约定（convention）。而后因为 iPhone 的大获成功，这些约定被各大手机浏览器争相效仿。</p>\n<p>这些约定之中，<strong>双击缩放（Double Tap to Zoom）</strong> 就是 300ms 的“元凶”——当用户在页面上 click 的时候，浏览器为了判断这个用户操作是单击还是双击，会等待 300-350ms 。如果 300ms 内，发生了第二次 click 事件，那么视为双击；否则为单击，等 300ms 时间过去之后，才触发 click 事件。</p>\n<p>在那个还不存在响应式设计和双指缩放（Pinch to Zoom）的时代，这个延迟是一个合理的预防措施。但不幸的是，<strong>这 300ms 的延迟已经成为用户觉得 web 应用比 native 应用更慢、性能不及后者的主要原因之一</strong>。诸如，链接、按钮、多选框等基于 click 交互的元素，以及 JS 对 click 事件的监听，都因此受到影响。</p>\n<p>幸运的是，浏览器开发商（vendor）和开发者都注意到了这个问题，提出了一些解决方案。</p>\n<h2 id=\"解决方案\"><a class=\"header-anchor\" href=\"#解决方案\">¶</a>解决方案</h2>\n<h3 id=\"方案一-👎-禁用缩放\"><a class=\"header-anchor\" href=\"#方案一-👎-禁用缩放\">¶</a>方案一、👎 禁用缩放</h3>\n<ul>\n<li>\n<p>代码：</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 或者 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=1, minimum-scale=1, maximum-scale=1\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>原理：双击是为了缩放，如果禁用缩放，那么就没双击什么事儿了，也不需要额外等待 300ms 了。</p>\n</li>\n<li>\n<p>支持情况：在 Android 平台上，由 Chrome 最先提出，FireFox、Opera 等浏览器也相继支持；IOS 9.3 开始一度支持，IOS10 开始不再支持。</p>\n</li>\n<li>\n<p>缺点：Safari 不支持。而且，禁用缩放会<strong>损害移动端网页的可用性和可访问性</strong>。例如，可能无法放大网页中的一张图片或一段字体较小的文字。</p>\n</li>\n</ul>\n<blockquote>\n<p>这里要注意区分：“双击缩放”（Double Tap to Zoom）和“双指缩放”（Pinch to Zoom）。为了兼顾消除 300ms 延迟和不损害可用性和可访问性，<strong>我们应该抛弃双击缩放、拥抱双指缩放。</strong></p>\n</blockquote>\n<h3 id=\"方案二-👍-视窗宽度设置为设备宽度\"><a class=\"header-anchor\" href=\"#方案二-👍-视窗宽度设置为设备宽度\">¶</a>方案二、👍 视窗宽度设置为设备宽度</h3>\n<ul>\n<li>\n<p>代码：</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>原由：正如 <a href=\"https://codereview.chromium.org/18850005/\" target=\"_blank\" rel=\"noopener\">Chromium Code Reviews</a> 上说的，<code>viewport</code> 的 <code>width</code> 设置得小于等于 <code>device-width</code> 的页面，是针对移动端优化过的或者是响应式的站点，其内容足够清晰，双击缩放失去了意义。因此，为包含上面这行代码的页面<strong>禁用双击缩放</strong>。同时，双指缩放得以保留，从而也就<strong>没有可用性和可访问性问题</strong>了。</p>\n</li>\n<li>\n<p>支持情况：自 Chrome 32 开始，FF、IE/Edge 也随后支持了；2016 年 3 月，IOS 9.3 开始支持。</p>\n</li>\n<li>\n<p>推荐使用！</p>\n</li>\n</ul>\n<blockquote>\n<p>该解决方案的“禁止双击缩放”是遵守如下<a href=\"https://trac.webkit.org/changeset/191644/webkit\" target=\"_blank\" rel=\"noopener\">规则</a>的：</p>\n<ul>\n<li>当页面设置了视窗宽度为设备宽度且是初始尺寸（页面尚未缩放），此时，双击缩放才是被禁止的。</li>\n<li>如果视窗尺寸不是初始尺寸（页面已经缩放），双击缩放是被允许的。</li>\n<li>为了在用户结束缩放后仍能 fast-click ，缩小时，只能缩小到初始尺寸，而不是最小尺寸。</li>\n</ul>\n</blockquote>\n<h3 id=\"方案三-👍-指针事件-pointer-events\"><a class=\"header-anchor\" href=\"#方案三-👍-指针事件-pointer-events\">¶</a>方案三、👍 指针事件（Pointer Events）</h3>\n<ul>\n<li>\n<p>代码：</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">button</span>, <span class=\"selector-class\">.myelements</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-ms-touch-action</span>: manipulation; <span class=\"comment\">/* IE10  */</span></span><br><span class=\"line\">    <span class=\"attribute\">touch-action</span>: manipulation;     <span class=\"comment\">/* IE11+ */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>根据<a href=\"https://w3c.github.io/pointerevents/#the-touch-action-css-property\" target=\"_blank\" rel=\"noopener\">规范</a>：CSS 属性 <code>touch-action</code> 决定了触摸输入（touch input）能否触发 UA （User Agent）支持的默认行为。这包括但不限于诸如平移或缩放等行为。</p>\n</li>\n<li>\n<p>根据 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action\" target=\"_blank\" rel=\"noopener\">MDN</a>：<code>touch-action</code> 的 <code>manipulation</code> 值激活了平移和双指缩放手势，而禁用了双击缩放等非标准的手势。</p>\n</li>\n<li>\n<p>支持情况：在 <a href=\"http://caniuse.com/#search=touch-action\" target=\"_blank\" rel=\"noopener\">Can I Use</a> 上可以看出，除了 Opera Mini 不支持、FF 需要手动启用和 Android 4.x 的自带浏览器有些迷之外，其他浏览器支持良好。</p>\n</li>\n<li>\n<p>推荐使用！</p>\n</li>\n</ul>\n<blockquote>\n<p>在只有 IE 支持指针事件的初期，诞生了不少<a href=\"https://thx.github.io/mobile/300ms-click-delay#%E6%8C%87%E9%92%88%E4%BA%8B%E4%BB%B6%E7%9A%84-polyfill\" target=\"_blank\" rel=\"noopener\">指针事件的 polyfill 解决方案</a>。在仍不支持指针事件的浏览器上，这是一种变通的方式。</p>\n<p><code>shim</code> VS <code>polyfill</code></p>\n<ol>\n<li>一个 shim 是一个库，它将一个新的 API 引入到一个旧的环境中，而且仅靠旧环境中已有的手段实现。</li>\n<li><a href=\"https://www.wikiwand.com/en/Polyfill\" target=\"_blank\" rel=\"noopener\"><strong>polyfill 就是浏览器 API 的 shim 。</strong></a> 它用于实现浏览器并不支持的原生 API 的代码，是<strong>抹平</strong>新旧浏览器对原生 API 支持<strong>差异</strong>的封装。通常，polyfill 会先检查当前浏览器是否支持某个 API，如果不支持的话就加载它自己的实现，然后新旧浏览器就都可以使用这个 API 了。相当于“打补丁”，“刮腻子”。</li>\n</ol>\n</blockquote>\n<h3 id=\"方案四-👍-轻量级库-fastclick\"><a class=\"header-anchor\" href=\"#方案四-👍-轻量级库-fastclick\">¶</a>方案四、👍 <a href=\"https://github.com/ftlabs/fastclick\" target=\"_blank\" rel=\"noopener\">轻量级库 FastClick</a></h3>\n<ul>\n<li>\n<p>代码：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener( <span class=\"string\">\"load\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    FastClick.attach( <span class=\"built_in\">document</span>.body ); <span class=\"comment\">// 直接绑定到 &lt;body&gt; 上可以确保整个应用都能受益</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span> );</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>原理：FastClick 在检测到 <code>touchend</code> 事件的时候，会通过 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\" target=\"_blank\" rel=\"noopener\">DOM 自定义事件</a>立即触发一个模拟的 <code>click</code> 事件，并把浏览器 300ms 之后真正触发的 click 事件阻止掉。</p>\n</li>\n<li>\n<p>无冲突：当 FastClick 检测到当前页面使用了基于 <code>&lt;meta&gt;</code> 标签或者 <code>touch-action</code> 属性的解决方案时，<a href=\"https://github.com/ftlabs/fastclick#when-it-isnt-needed\" target=\"_blank\" rel=\"noopener\">会静静地看别的解决方案装逼</a>。</p>\n</li>\n<li>\n<p>唯一的缺点：文件大小占 10 KB……</p>\n</li>\n<li>\n<p>推荐使用！</p>\n</li>\n</ul>\n<h2 id=\"关于-始作俑者-safari\"><a class=\"header-anchor\" href=\"#关于-始作俑者-safari\">¶</a>关于“始作俑者” Safari</h2>\n<h3 id=\"起承转折\"><a class=\"header-anchor\" href=\"#起承转折\">¶</a>起承转折</h3>\n<p><a href=\"https://thx.github.io/mobile/300ms-click-delay\" target=\"_blank\" rel=\"noopener\">(2013) 300 毫秒点击延迟的来龙去脉</a>一文中提到的 IOS 特有的<strong>双击滚动（Double Tap to Scroll）：仍存在</strong>、并没有像原文猜测的那样消失。（亲测 IOS 10.2.1 Safari 已设置 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code> 的页面在屏幕上或下 1/4 处双击仍能滚动。）</p>\n<p>起初看到「<a href=\"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_9_1.html#//apple_ref/doc/uid/TP40014305-CH10-SW8\" target=\"_blank\" rel=\"noopener\">2016 年 3 月发布的 IOS 9.3 移除了 300ms 延迟、从而实现了“fast-tap” </a>」时，我还欣慰地想道：最先提出“双击缩放”约定的苹果，在最后也顺应了历史潮流嘛。但是接着看到「<a href=\"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-SW1\" target=\"_blank\" rel=\"noopener\">IOS10 无视了禁用缩放（user-scalable）</a>」我的内心瞬间黑人问号：“？？？”。</p>\n<p>后来，静静地看了两篇文章（<a href=\"http://cloudless.studio/articles/39-safari-zoom-gesture-s-comeback-in-ios-10\" target=\"_blank\" rel=\"noopener\">Safari zoom gesture’s comeback in iOS 10</a> 和 <a href=\"https://wouterdeschuyter.be/blog/how-to-disable-viewport-scaling-in-ios-10-you-dont-941140811\" target=\"_blank\" rel=\"noopener\">How to disable viewport scaling in iOS 10? You don’t.</a>），做了点 <code>&lt;meta&gt;</code> 标签的测试。</p>\n<h3 id=\"测试结果\"><a class=\"header-anchor\" href=\"#测试结果\">¶</a>测试结果</h3>\n<p>测试环境：IOS 10.2.1</p>\n<ol>\n<li>只设置 <code>&lt;meta name=&quot;viewport&quot; content=&quot;user-scalable=no&quot;&gt;</code> 和不设置没有任何区别——<code>user-scalable=no</code> 被完全无视。</li>\n<li>只设置 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code> ，和方案二里的描述一致，仍可以在初始尺寸下禁用双击缩放。</li>\n<li>只设置 <code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0&quot;&gt;</code> ，初始状态和“测试2”很像，但是仍存在双击缩放，即仍有 300ms 延迟。</li>\n<li>设置 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code> 或者 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</code> ，和只设置 <code>width=device-width</code> 并无显著差异。</li>\n<li>为某个 <code>&lt;a&gt;</code> 链接设置 <code>touch-action: manipulation;</code> ，可以禁用该元素上的双击缩放。</li>\n</ol>\n<p>要点如下：</p>\n<ol>\n<li><code>user-scalable=no</code> 完全起不到禁止缩放的作用，<code>width=device-width</code> 仍能且仅能禁止双击缩放。</li>\n<li>只设置 <code>meta</code> 无法完全禁用缩放，双指缩放总是可行的。</li>\n</ol>\n<h3 id=\"暮然回首\"><a class=\"header-anchor\" href=\"#暮然回首\">¶</a>暮然回首</h3>\n<p>冷静下来后，重新审视上述变故，发现其实是两回事。前面提到过“我们应该抛弃双击缩放、拥抱双指缩放”，苹果没有打破这个原则。只是，<strong>苹果出于可访问性考虑，直接任性地完全无视了 <code>user-scalable=no</code></strong>。</p>\n<blockquote>\n<p><a href=\"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-SW1\" target=\"_blank\" rel=\"noopener\"><strong>Accessibility</strong><br>\nPinch-to-zoom is always enabled for all users. The viewport setting for user-scalable is ignored.</a></p>\n</blockquote>\n<p>当然，这导致了觉得应该一切尽在掌控、想要完全禁用缩放以避免破坏布局的开发者的怨言。如果，你<strong>还是想完全禁用缩放，可以参考</strong> <a href=\"http://stackoverflow.com/questions/37808180/disable-viewport-zooming-ios-10-safari/38573198#38573198\" target=\"_blank\" rel=\"noopener\">SO 上的这个回答</a>。</p>\n<h2 id=\"解惑\"><a class=\"header-anchor\" href=\"#解惑\">¶</a>解惑</h2>\n<p>最开始提到过，我至今没有遇到过这个问题。对这个现象我推理如下：</p>\n<p>我的肾机在开发移动端的半年间只在近期做过一次系统升级（目前已升到 10.2.1）。之前使用的具体的版本号已经无从得知了（P.S. 如果有谁知道怎么查看肾机本机上的版本更新历史，请务必告诉我233），但是更新到 IOS10 之前，我一直有使用 9.3+ 才支持的 Night Shift 功能，也就是说升级之前的系统版本号肯定在 9.3 或者以上。</p>\n<p>而我写移动端页面的时候，惯例会 <code>meta:vp</code> 然后 <code>Tab</code> 生成 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</code>。在 IOS10 之前，这行代码还是能够禁用页面的缩放的，也就不存在 300ms 的延迟问题了。</p>\n<p>这就是为什么之前我本机测试的时候一直没有遇到传说中的 300ms 延迟现象的原因了。</p>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h2>\n<ol>\n<li><a href=\"https://thx.github.io/mobile/300ms-click-delay\" target=\"_blank\" rel=\"noopener\">(2013) 300 毫秒点击延迟的来龙去脉</a></li>\n<li><a href=\"https://www.sitepoint.com/5-ways-prevent-300ms-click-delay-mobile-devices/\" target=\"_blank\" rel=\"noopener\">(2014) 5-ways-prevent-300ms-click-delay-mobile-devices</a></li>\n<li><a href=\"https://trac.webkit.org/changeset/191644/webkit\" target=\"_blank\" rel=\"noopener\">(2015) Implement viewport-width-based fast-click heuristic</a></li>\n<li><a href=\"http://qiudeqing.com/mobile_web/2016/05/21/mobile-browser-click-300ms-delay.html\" target=\"_blank\" rel=\"noopener\">(2016) 无线端浏览器 click 事件 300ms 延迟</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2013/12/300ms-tap-delay-gone-away\" target=\"_blank\" rel=\"noopener\">(2016) 300ms-tap-delay-gone-away</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"存疑\"><a class=\"header-anchor\" href=\"#存疑\">¶</a>存疑</h2>\n<p>最开始，我遇到的其实是“移动端遮罩层滑动穿透”的问题。</p>\n<p>在查找“滑动穿透”问题相关资料的时候，我搜到了很多 click 300ms 延迟的问题。我那个时候有些不知所云，因为我自己并没有真实遇到过 300ms 延迟现象，也就没怎么在意。</p>\n<p>时至今日想动笔总结遇到了若干次的“滑动穿透”问题的时候，搜集资料的偶然间得以解惑 300ms 的前世今生。</p>","more":"<h2 id=\"移动端-click-的-300ms-延迟\"><a class=\"header-anchor\" href=\"#移动端-click-的-300ms-延迟\">¶</a>移动端 <code>click</code> 的 300ms 延迟</h2>\n<p>那么，<a href=\"http://www.telerik.com/blogs/what-exactly-is.....-the-300ms-click-delay\" target=\"_blank\" rel=\"noopener\">这 300ms 延迟到底是从哪里来的呢？</a></p>\n<p>时间要追溯到 2007 年初代 iPhone 发布前夕，苹果为了解决“如何用手机这种小尺寸屏幕来显示 PC 端网页”这个问题，提出了很多聪明的约定（convention）。而后因为 iPhone 的大获成功，这些约定被各大手机浏览器争相效仿。</p>\n<p>这些约定之中，<strong>双击缩放（Double Tap to Zoom）</strong> 就是 300ms 的“元凶”——当用户在页面上 click 的时候，浏览器为了判断这个用户操作是单击还是双击，会等待 300-350ms 。如果 300ms 内，发生了第二次 click 事件，那么视为双击；否则为单击，等 300ms 时间过去之后，才触发 click 事件。</p>\n<p>在那个还不存在响应式设计和双指缩放（Pinch to Zoom）的时代，这个延迟是一个合理的预防措施。但不幸的是，<strong>这 300ms 的延迟已经成为用户觉得 web 应用比 native 应用更慢、性能不及后者的主要原因之一</strong>。诸如，链接、按钮、多选框等基于 click 交互的元素，以及 JS 对 click 事件的监听，都因此受到影响。</p>\n<p>幸运的是，浏览器开发商（vendor）和开发者都注意到了这个问题，提出了一些解决方案。</p>\n<h2 id=\"解决方案\"><a class=\"header-anchor\" href=\"#解决方案\">¶</a>解决方案</h2>\n<h3 id=\"方案一-👎-禁用缩放\"><a class=\"header-anchor\" href=\"#方案一-👎-禁用缩放\">¶</a>方案一、👎 禁用缩放</h3>\n<ul>\n<li>\n<p>代码：</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 或者 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=1, minimum-scale=1, maximum-scale=1\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>原理：双击是为了缩放，如果禁用缩放，那么就没双击什么事儿了，也不需要额外等待 300ms 了。</p>\n</li>\n<li>\n<p>支持情况：在 Android 平台上，由 Chrome 最先提出，FireFox、Opera 等浏览器也相继支持；IOS 9.3 开始一度支持，IOS10 开始不再支持。</p>\n</li>\n<li>\n<p>缺点：Safari 不支持。而且，禁用缩放会<strong>损害移动端网页的可用性和可访问性</strong>。例如，可能无法放大网页中的一张图片或一段字体较小的文字。</p>\n</li>\n</ul>\n<blockquote>\n<p>这里要注意区分：“双击缩放”（Double Tap to Zoom）和“双指缩放”（Pinch to Zoom）。为了兼顾消除 300ms 延迟和不损害可用性和可访问性，<strong>我们应该抛弃双击缩放、拥抱双指缩放。</strong></p>\n</blockquote>\n<h3 id=\"方案二-👍-视窗宽度设置为设备宽度\"><a class=\"header-anchor\" href=\"#方案二-👍-视窗宽度设置为设备宽度\">¶</a>方案二、👍 视窗宽度设置为设备宽度</h3>\n<ul>\n<li>\n<p>代码：</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>原由：正如 <a href=\"https://codereview.chromium.org/18850005/\" target=\"_blank\" rel=\"noopener\">Chromium Code Reviews</a> 上说的，<code>viewport</code> 的 <code>width</code> 设置得小于等于 <code>device-width</code> 的页面，是针对移动端优化过的或者是响应式的站点，其内容足够清晰，双击缩放失去了意义。因此，为包含上面这行代码的页面<strong>禁用双击缩放</strong>。同时，双指缩放得以保留，从而也就<strong>没有可用性和可访问性问题</strong>了。</p>\n</li>\n<li>\n<p>支持情况：自 Chrome 32 开始，FF、IE/Edge 也随后支持了；2016 年 3 月，IOS 9.3 开始支持。</p>\n</li>\n<li>\n<p>推荐使用！</p>\n</li>\n</ul>\n<blockquote>\n<p>该解决方案的“禁止双击缩放”是遵守如下<a href=\"https://trac.webkit.org/changeset/191644/webkit\" target=\"_blank\" rel=\"noopener\">规则</a>的：</p>\n<ul>\n<li>当页面设置了视窗宽度为设备宽度且是初始尺寸（页面尚未缩放），此时，双击缩放才是被禁止的。</li>\n<li>如果视窗尺寸不是初始尺寸（页面已经缩放），双击缩放是被允许的。</li>\n<li>为了在用户结束缩放后仍能 fast-click ，缩小时，只能缩小到初始尺寸，而不是最小尺寸。</li>\n</ul>\n</blockquote>\n<h3 id=\"方案三-👍-指针事件-pointer-events\"><a class=\"header-anchor\" href=\"#方案三-👍-指针事件-pointer-events\">¶</a>方案三、👍 指针事件（Pointer Events）</h3>\n<ul>\n<li>\n<p>代码：</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">button</span>, <span class=\"selector-class\">.myelements</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-ms-touch-action</span>: manipulation; <span class=\"comment\">/* IE10  */</span></span><br><span class=\"line\">    <span class=\"attribute\">touch-action</span>: manipulation;     <span class=\"comment\">/* IE11+ */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>根据<a href=\"https://w3c.github.io/pointerevents/#the-touch-action-css-property\" target=\"_blank\" rel=\"noopener\">规范</a>：CSS 属性 <code>touch-action</code> 决定了触摸输入（touch input）能否触发 UA （User Agent）支持的默认行为。这包括但不限于诸如平移或缩放等行为。</p>\n</li>\n<li>\n<p>根据 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action\" target=\"_blank\" rel=\"noopener\">MDN</a>：<code>touch-action</code> 的 <code>manipulation</code> 值激活了平移和双指缩放手势，而禁用了双击缩放等非标准的手势。</p>\n</li>\n<li>\n<p>支持情况：在 <a href=\"http://caniuse.com/#search=touch-action\" target=\"_blank\" rel=\"noopener\">Can I Use</a> 上可以看出，除了 Opera Mini 不支持、FF 需要手动启用和 Android 4.x 的自带浏览器有些迷之外，其他浏览器支持良好。</p>\n</li>\n<li>\n<p>推荐使用！</p>\n</li>\n</ul>\n<blockquote>\n<p>在只有 IE 支持指针事件的初期，诞生了不少<a href=\"https://thx.github.io/mobile/300ms-click-delay#%E6%8C%87%E9%92%88%E4%BA%8B%E4%BB%B6%E7%9A%84-polyfill\" target=\"_blank\" rel=\"noopener\">指针事件的 polyfill 解决方案</a>。在仍不支持指针事件的浏览器上，这是一种变通的方式。</p>\n<p><code>shim</code> VS <code>polyfill</code></p>\n<ol>\n<li>一个 shim 是一个库，它将一个新的 API 引入到一个旧的环境中，而且仅靠旧环境中已有的手段实现。</li>\n<li><a href=\"https://www.wikiwand.com/en/Polyfill\" target=\"_blank\" rel=\"noopener\"><strong>polyfill 就是浏览器 API 的 shim 。</strong></a> 它用于实现浏览器并不支持的原生 API 的代码，是<strong>抹平</strong>新旧浏览器对原生 API 支持<strong>差异</strong>的封装。通常，polyfill 会先检查当前浏览器是否支持某个 API，如果不支持的话就加载它自己的实现，然后新旧浏览器就都可以使用这个 API 了。相当于“打补丁”，“刮腻子”。</li>\n</ol>\n</blockquote>\n<h3 id=\"方案四-👍-轻量级库-fastclick\"><a class=\"header-anchor\" href=\"#方案四-👍-轻量级库-fastclick\">¶</a>方案四、👍 <a href=\"https://github.com/ftlabs/fastclick\" target=\"_blank\" rel=\"noopener\">轻量级库 FastClick</a></h3>\n<ul>\n<li>\n<p>代码：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener( <span class=\"string\">\"load\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    FastClick.attach( <span class=\"built_in\">document</span>.body ); <span class=\"comment\">// 直接绑定到 &lt;body&gt; 上可以确保整个应用都能受益</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span> );</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>原理：FastClick 在检测到 <code>touchend</code> 事件的时候，会通过 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\" target=\"_blank\" rel=\"noopener\">DOM 自定义事件</a>立即触发一个模拟的 <code>click</code> 事件，并把浏览器 300ms 之后真正触发的 click 事件阻止掉。</p>\n</li>\n<li>\n<p>无冲突：当 FastClick 检测到当前页面使用了基于 <code>&lt;meta&gt;</code> 标签或者 <code>touch-action</code> 属性的解决方案时，<a href=\"https://github.com/ftlabs/fastclick#when-it-isnt-needed\" target=\"_blank\" rel=\"noopener\">会静静地看别的解决方案装逼</a>。</p>\n</li>\n<li>\n<p>唯一的缺点：文件大小占 10 KB……</p>\n</li>\n<li>\n<p>推荐使用！</p>\n</li>\n</ul>\n<h2 id=\"关于-始作俑者-safari\"><a class=\"header-anchor\" href=\"#关于-始作俑者-safari\">¶</a>关于“始作俑者” Safari</h2>\n<h3 id=\"起承转折\"><a class=\"header-anchor\" href=\"#起承转折\">¶</a>起承转折</h3>\n<p><a href=\"https://thx.github.io/mobile/300ms-click-delay\" target=\"_blank\" rel=\"noopener\">(2013) 300 毫秒点击延迟的来龙去脉</a>一文中提到的 IOS 特有的<strong>双击滚动（Double Tap to Scroll）：仍存在</strong>、并没有像原文猜测的那样消失。（亲测 IOS 10.2.1 Safari 已设置 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code> 的页面在屏幕上或下 1/4 处双击仍能滚动。）</p>\n<p>起初看到「<a href=\"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_9_1.html#//apple_ref/doc/uid/TP40014305-CH10-SW8\" target=\"_blank\" rel=\"noopener\">2016 年 3 月发布的 IOS 9.3 移除了 300ms 延迟、从而实现了“fast-tap” </a>」时，我还欣慰地想道：最先提出“双击缩放”约定的苹果，在最后也顺应了历史潮流嘛。但是接着看到「<a href=\"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-SW1\" target=\"_blank\" rel=\"noopener\">IOS10 无视了禁用缩放（user-scalable）</a>」我的内心瞬间黑人问号：“？？？”。</p>\n<p>后来，静静地看了两篇文章（<a href=\"http://cloudless.studio/articles/39-safari-zoom-gesture-s-comeback-in-ios-10\" target=\"_blank\" rel=\"noopener\">Safari zoom gesture’s comeback in iOS 10</a> 和 <a href=\"https://wouterdeschuyter.be/blog/how-to-disable-viewport-scaling-in-ios-10-you-dont-941140811\" target=\"_blank\" rel=\"noopener\">How to disable viewport scaling in iOS 10? You don’t.</a>），做了点 <code>&lt;meta&gt;</code> 标签的测试。</p>\n<h3 id=\"测试结果\"><a class=\"header-anchor\" href=\"#测试结果\">¶</a>测试结果</h3>\n<p>测试环境：IOS 10.2.1</p>\n<ol>\n<li>只设置 <code>&lt;meta name=&quot;viewport&quot; content=&quot;user-scalable=no&quot;&gt;</code> 和不设置没有任何区别——<code>user-scalable=no</code> 被完全无视。</li>\n<li>只设置 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code> ，和方案二里的描述一致，仍可以在初始尺寸下禁用双击缩放。</li>\n<li>只设置 <code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0&quot;&gt;</code> ，初始状态和“测试2”很像，但是仍存在双击缩放，即仍有 300ms 延迟。</li>\n<li>设置 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code> 或者 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</code> ，和只设置 <code>width=device-width</code> 并无显著差异。</li>\n<li>为某个 <code>&lt;a&gt;</code> 链接设置 <code>touch-action: manipulation;</code> ，可以禁用该元素上的双击缩放。</li>\n</ol>\n<p>要点如下：</p>\n<ol>\n<li><code>user-scalable=no</code> 完全起不到禁止缩放的作用，<code>width=device-width</code> 仍能且仅能禁止双击缩放。</li>\n<li>只设置 <code>meta</code> 无法完全禁用缩放，双指缩放总是可行的。</li>\n</ol>\n<h3 id=\"暮然回首\"><a class=\"header-anchor\" href=\"#暮然回首\">¶</a>暮然回首</h3>\n<p>冷静下来后，重新审视上述变故，发现其实是两回事。前面提到过“我们应该抛弃双击缩放、拥抱双指缩放”，苹果没有打破这个原则。只是，<strong>苹果出于可访问性考虑，直接任性地完全无视了 <code>user-scalable=no</code></strong>。</p>\n<blockquote>\n<p><a href=\"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-SW1\" target=\"_blank\" rel=\"noopener\"><strong>Accessibility</strong><br>\nPinch-to-zoom is always enabled for all users. The viewport setting for user-scalable is ignored.</a></p>\n</blockquote>\n<p>当然，这导致了觉得应该一切尽在掌控、想要完全禁用缩放以避免破坏布局的开发者的怨言。如果，你<strong>还是想完全禁用缩放，可以参考</strong> <a href=\"http://stackoverflow.com/questions/37808180/disable-viewport-zooming-ios-10-safari/38573198#38573198\" target=\"_blank\" rel=\"noopener\">SO 上的这个回答</a>。</p>\n<h2 id=\"解惑\"><a class=\"header-anchor\" href=\"#解惑\">¶</a>解惑</h2>\n<p>最开始提到过，我至今没有遇到过这个问题。对这个现象我推理如下：</p>\n<p>我的肾机在开发移动端的半年间只在近期做过一次系统升级（目前已升到 10.2.1）。之前使用的具体的版本号已经无从得知了（P.S. 如果有谁知道怎么查看肾机本机上的版本更新历史，请务必告诉我233），但是更新到 IOS10 之前，我一直有使用 9.3+ 才支持的 Night Shift 功能，也就是说升级之前的系统版本号肯定在 9.3 或者以上。</p>\n<p>而我写移动端页面的时候，惯例会 <code>meta:vp</code> 然后 <code>Tab</code> 生成 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</code>。在 IOS10 之前，这行代码还是能够禁用页面的缩放的，也就不存在 300ms 的延迟问题了。</p>\n<p>这就是为什么之前我本机测试的时候一直没有遇到传说中的 300ms 延迟现象的原因了。</p>\n<h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h2>\n<ol>\n<li><a href=\"https://thx.github.io/mobile/300ms-click-delay\" target=\"_blank\" rel=\"noopener\">(2013) 300 毫秒点击延迟的来龙去脉</a></li>\n<li><a href=\"https://www.sitepoint.com/5-ways-prevent-300ms-click-delay-mobile-devices/\" target=\"_blank\" rel=\"noopener\">(2014) 5-ways-prevent-300ms-click-delay-mobile-devices</a></li>\n<li><a href=\"https://trac.webkit.org/changeset/191644/webkit\" target=\"_blank\" rel=\"noopener\">(2015) Implement viewport-width-based fast-click heuristic</a></li>\n<li><a href=\"http://qiudeqing.com/mobile_web/2016/05/21/mobile-browser-click-300ms-delay.html\" target=\"_blank\" rel=\"noopener\">(2016) 无线端浏览器 click 事件 300ms 延迟</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2013/12/300ms-tap-delay-gone-away\" target=\"_blank\" rel=\"noopener\">(2016) 300ms-tap-delay-gone-away</a></li>\n</ol>"},{"title":"[翻译] JavaScript 事件循环：说明","date":"2017-04-12T16:17:13.000Z","_content":"\n\n> 本文译自 Erin Swenson-Healey 的[The JavaScript Event Loop: Explained](http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/)一文。\n\n> 关键词：\n> \n> * 事件循环 - The Event Loop\n> * 运行环境 - runtime\n> * 调用栈 - call stack\n> \n> （译者注：“下面正文开始～”）\n\n<!-- more -->\n\n## 这篇文章是关于什么的？\n\n## 这篇文章是写给谁的？\n\n## 无阻塞的 I/O\n\n（前三小节译者战略性省略）\n\n## 事件循环（The Event Loop）\n\n调用者（caller）从响应中的解耦是 JavaScript 运行环境能够在等待异步操作完成然后它们的回调执行的同时做一些别的事情的基础。但是，这些回调是保存在内存的哪里呢？它们是以怎样的顺序执行的呢？是什么导致它们被调用的呢？\n\nJavaScript 运行环境包含一个消息队列（message queue），它存储了一长串待处理的消息以及这些消息相关的回调函数。当一个提供了回调函数的外部事件（例如，发生一个 click 事件或者接收到一个 HTTP 请求的响应）发生时，这些消息就会进入队列。假设一个用户点击了一个按钮，但这个按钮没有绑定任何的回调函数，那么将不会有消息进入队列。\n\n在一次循环中，队列被轮询下一个消息（每一个轮询（poll）称为一个“列出（tick）”），若此时存在一个消息，那个消息对应的回调就会被执行。\n\n![](http://blog.carbonfive.com/wp-content/uploads/2013/10/event-loop.png)\n\n这个回调函数（译者注：指 init 函数）的调用在调用栈中是初始帧，并且由于 JavaScript 是单线程的，因此在堆栈上返回所有调用之前暂停进一步的消息的轮询和处理。后续（同步的）函数调用（译者注：指 link.addEventListener 函数）将新的调用帧添加到堆栈（~~例如，函数 init 调用了函数 changeColor~~（译者注：括号内的话感觉有误，故删去））。\n\n```javascript\nfunction init() {\n  var link = document.getElementById(\"foo\");\n\n  link.addEventListener(\"click\", function changeColor() {\n    this.style.color = \"burlywood\";\n  });\n}\n\ninit();\n```\n\n在这个例子中，一个消息（和一个回调，即 changeColor）将在用户点击 foo 元素、触发一个 `onclick` 事件的时候进入队列。当这个消息出队列的时候，它的回调函数 changeColor 将被调用。当 changeColor 返回（或者抛出一个错误）的时候，事件循环继续。只要函数 changeColor 还存在，仍是 foo 元素的 onclick 的回调，后续在该元素上的点击会产生更多的消息（并和回调 changeColor 一起）进入队列。\n\n## 队列中的附加消息\n\n如果你的代码中的一个函数调用是异步的（像是 setTimeout），被提供的回调会在不久的将来的事件循环的某次列出（tick）时，作为一个不同的队列中的消息的一部分最终被执行。例如：\n\n```javascript\nfunction f() {\n  console.log(\"foo\");\n  setTimeout(g, 0);\n  console.log(\"baz\");\n  h();\n}\n\nfunction g() {\n  console.log(\"bar\");\n}\n\nfunction h() {\n  console.log(\"blix\");\n}\n\nf();\n```\n\n由于 setTimeout 的非阻塞特性，它的回调将在至少 0 毫秒的未来执行，而且不会作为本次消息的一部分被处理。在这个例子中，setTimeout 被调用了，传入了一个回调函数 g 和一个 0 毫秒的延迟。当这个指定的时间流逝后（在这个例子中，几乎是立即的），一个单独的消息包含 g 作为回调函数将会进入队列。控制台的结果将会是：“foo”，“baz”，“blix”，然后在事件循环的下一个列出（tick）会是：“bar”。如果在同一个调用帧，setTimeout 被调用了两次——且两次传递相同的参数值——它们的回调将在队列中保持调用时的顺序。\n\n## Web Workers\n\n使用 Web Workers 使你能够分流一个消耗高昂的操作到一个单独的线程去执行，从而解放主线程去做其他事情。workers 区别于初始化它的最初的线程，拥有它自己单独的消息队列、事件循环和独立的内存空间。worker 和主线程之间的沟通是通过消息传递实现的，这看起来很像传统的、事件的（evented）代码——我们已经见过示例。\n\n![](http://blog.carbonfive.com/wp-content/uploads/2013/10/web-workers.png)\n\n首先，我们的 worker：\n\n```javascript\n// 我们的 worker 做了一些 CPU 密集型操作\nvar reportResult = function(e) {\n  pi = SomeLib.computePiToSpecifiedDecimals(e.data);\n  postMessage(pi);\n};\n\nonmessage = reportResult;\n```\n\n然后，在我们的 HTML 中的 script 标签中存在的主代码块：\n\n```javascript\n// 我们的核心代码\nvar piWorker = new Worker(\"pi_calculator.js\");\nvar logResult = function(e) {\n  console.log(\"PI: \" + e.data);\n};\n\npiWorker.addEventListener(\"message\", logResult, false);\npiWorker.postMessage(100000);\n```\n\n在这个例子中，主线程产生了一个 worker 并且为它的 message 事件注册了一个 logResult 回调函数。在这个 worker 中，它自己的 message 事件注册的事 reportResult 函数。当 worker 线程接收到一个来自主线程的 message 的时候，worker 将一个消息和对应的 reportResult 回调一起放入队列。当出列的时候，一个消息被回传给主线程，在主线程一个新消息连同 logResult 回调一起进入队列。在这种方式下，开发者能将 CPU 密集型操作委托给一个单独的线程，解放主线程去继续处理消息和事件。\n\n## 关于闭包的一个提醒\n\nJavaScript 对闭包的支持允许你注册这样的回调：当回调执行时，仍可以访问它们被创建时的环境，即使回调的执行创建了一个全新的调用栈。这很有趣：我们的回调是作为一个不同的消息（而不是它们被创建时的那个消息）的一部分被调用的。考虑如下例子：\n\n```javascript\nfunction changeHeaderDeferred() {\n  var header = document.getElementById(\"header\");\n  \n  setTimeout(function changeHeader() {\n    header.style.color = \"red\";\n\n    return false;\n  }, 100);\n\n  return false;\n}\n\nchangeHeaderDeferred();\n```\n\n在这个例子中，changeHeaderDeferred 函数的执行中包含 header 变量。setTimeout 函数被调用，这导致了一个消息（附加 changeHeader 回调）在大约 100 毫秒的未来被添加到消息队列。changeHeaderDeferred 接着返回了 false ，结束了第一个消息的处理——但是 header 变量仍被一个闭包引用，因而没有被垃圾回收机制回收。当第二个消息被处理的时候，changeHeader 函数它仍能访问在该函数作用域外部被声明的 header 变量。一旦第二个消息（changeHeader 函数）处理完了，header 变量就能被垃圾回收机制回收了。\n\n## 小贴士（Takeaways）\n\nJavaScript 的 事件驱动的交互模型 和许多程序员习惯了的 请求-响应模型 不同——但就像你看到的，这并不是在造火箭。使用简单的消息队列和事件循环，JavaScript 使开发者可以围绕许多异步唤醒回调来构建系统，释放运行环境以处理并发操作，同时等待外部事件发生。但是，这只是并发的一种方式。在这篇文章的第二部分，我将比较 JavaScript 的并发模型和那些在 MRI Ruby（with threads and the GIL）、EventMachine（Ruby）、Java（threads）中的不同点。\n\n## 拓展阅读\n\n（略）\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/翻译-The-JavaScript-Event-Loop-Explained.md","raw":"---\ntitle: '[翻译] JavaScript 事件循环：说明'\ntags: [JavaScript]\ndate: 2017-04-13 00:17:13\n---\n\n\n> 本文译自 Erin Swenson-Healey 的[The JavaScript Event Loop: Explained](http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/)一文。\n\n> 关键词：\n> \n> * 事件循环 - The Event Loop\n> * 运行环境 - runtime\n> * 调用栈 - call stack\n> \n> （译者注：“下面正文开始～”）\n\n<!-- more -->\n\n## 这篇文章是关于什么的？\n\n## 这篇文章是写给谁的？\n\n## 无阻塞的 I/O\n\n（前三小节译者战略性省略）\n\n## 事件循环（The Event Loop）\n\n调用者（caller）从响应中的解耦是 JavaScript 运行环境能够在等待异步操作完成然后它们的回调执行的同时做一些别的事情的基础。但是，这些回调是保存在内存的哪里呢？它们是以怎样的顺序执行的呢？是什么导致它们被调用的呢？\n\nJavaScript 运行环境包含一个消息队列（message queue），它存储了一长串待处理的消息以及这些消息相关的回调函数。当一个提供了回调函数的外部事件（例如，发生一个 click 事件或者接收到一个 HTTP 请求的响应）发生时，这些消息就会进入队列。假设一个用户点击了一个按钮，但这个按钮没有绑定任何的回调函数，那么将不会有消息进入队列。\n\n在一次循环中，队列被轮询下一个消息（每一个轮询（poll）称为一个“列出（tick）”），若此时存在一个消息，那个消息对应的回调就会被执行。\n\n![](http://blog.carbonfive.com/wp-content/uploads/2013/10/event-loop.png)\n\n这个回调函数（译者注：指 init 函数）的调用在调用栈中是初始帧，并且由于 JavaScript 是单线程的，因此在堆栈上返回所有调用之前暂停进一步的消息的轮询和处理。后续（同步的）函数调用（译者注：指 link.addEventListener 函数）将新的调用帧添加到堆栈（~~例如，函数 init 调用了函数 changeColor~~（译者注：括号内的话感觉有误，故删去））。\n\n```javascript\nfunction init() {\n  var link = document.getElementById(\"foo\");\n\n  link.addEventListener(\"click\", function changeColor() {\n    this.style.color = \"burlywood\";\n  });\n}\n\ninit();\n```\n\n在这个例子中，一个消息（和一个回调，即 changeColor）将在用户点击 foo 元素、触发一个 `onclick` 事件的时候进入队列。当这个消息出队列的时候，它的回调函数 changeColor 将被调用。当 changeColor 返回（或者抛出一个错误）的时候，事件循环继续。只要函数 changeColor 还存在，仍是 foo 元素的 onclick 的回调，后续在该元素上的点击会产生更多的消息（并和回调 changeColor 一起）进入队列。\n\n## 队列中的附加消息\n\n如果你的代码中的一个函数调用是异步的（像是 setTimeout），被提供的回调会在不久的将来的事件循环的某次列出（tick）时，作为一个不同的队列中的消息的一部分最终被执行。例如：\n\n```javascript\nfunction f() {\n  console.log(\"foo\");\n  setTimeout(g, 0);\n  console.log(\"baz\");\n  h();\n}\n\nfunction g() {\n  console.log(\"bar\");\n}\n\nfunction h() {\n  console.log(\"blix\");\n}\n\nf();\n```\n\n由于 setTimeout 的非阻塞特性，它的回调将在至少 0 毫秒的未来执行，而且不会作为本次消息的一部分被处理。在这个例子中，setTimeout 被调用了，传入了一个回调函数 g 和一个 0 毫秒的延迟。当这个指定的时间流逝后（在这个例子中，几乎是立即的），一个单独的消息包含 g 作为回调函数将会进入队列。控制台的结果将会是：“foo”，“baz”，“blix”，然后在事件循环的下一个列出（tick）会是：“bar”。如果在同一个调用帧，setTimeout 被调用了两次——且两次传递相同的参数值——它们的回调将在队列中保持调用时的顺序。\n\n## Web Workers\n\n使用 Web Workers 使你能够分流一个消耗高昂的操作到一个单独的线程去执行，从而解放主线程去做其他事情。workers 区别于初始化它的最初的线程，拥有它自己单独的消息队列、事件循环和独立的内存空间。worker 和主线程之间的沟通是通过消息传递实现的，这看起来很像传统的、事件的（evented）代码——我们已经见过示例。\n\n![](http://blog.carbonfive.com/wp-content/uploads/2013/10/web-workers.png)\n\n首先，我们的 worker：\n\n```javascript\n// 我们的 worker 做了一些 CPU 密集型操作\nvar reportResult = function(e) {\n  pi = SomeLib.computePiToSpecifiedDecimals(e.data);\n  postMessage(pi);\n};\n\nonmessage = reportResult;\n```\n\n然后，在我们的 HTML 中的 script 标签中存在的主代码块：\n\n```javascript\n// 我们的核心代码\nvar piWorker = new Worker(\"pi_calculator.js\");\nvar logResult = function(e) {\n  console.log(\"PI: \" + e.data);\n};\n\npiWorker.addEventListener(\"message\", logResult, false);\npiWorker.postMessage(100000);\n```\n\n在这个例子中，主线程产生了一个 worker 并且为它的 message 事件注册了一个 logResult 回调函数。在这个 worker 中，它自己的 message 事件注册的事 reportResult 函数。当 worker 线程接收到一个来自主线程的 message 的时候，worker 将一个消息和对应的 reportResult 回调一起放入队列。当出列的时候，一个消息被回传给主线程，在主线程一个新消息连同 logResult 回调一起进入队列。在这种方式下，开发者能将 CPU 密集型操作委托给一个单独的线程，解放主线程去继续处理消息和事件。\n\n## 关于闭包的一个提醒\n\nJavaScript 对闭包的支持允许你注册这样的回调：当回调执行时，仍可以访问它们被创建时的环境，即使回调的执行创建了一个全新的调用栈。这很有趣：我们的回调是作为一个不同的消息（而不是它们被创建时的那个消息）的一部分被调用的。考虑如下例子：\n\n```javascript\nfunction changeHeaderDeferred() {\n  var header = document.getElementById(\"header\");\n  \n  setTimeout(function changeHeader() {\n    header.style.color = \"red\";\n\n    return false;\n  }, 100);\n\n  return false;\n}\n\nchangeHeaderDeferred();\n```\n\n在这个例子中，changeHeaderDeferred 函数的执行中包含 header 变量。setTimeout 函数被调用，这导致了一个消息（附加 changeHeader 回调）在大约 100 毫秒的未来被添加到消息队列。changeHeaderDeferred 接着返回了 false ，结束了第一个消息的处理——但是 header 变量仍被一个闭包引用，因而没有被垃圾回收机制回收。当第二个消息被处理的时候，changeHeader 函数它仍能访问在该函数作用域外部被声明的 header 变量。一旦第二个消息（changeHeader 函数）处理完了，header 变量就能被垃圾回收机制回收了。\n\n## 小贴士（Takeaways）\n\nJavaScript 的 事件驱动的交互模型 和许多程序员习惯了的 请求-响应模型 不同——但就像你看到的，这并不是在造火箭。使用简单的消息队列和事件循环，JavaScript 使开发者可以围绕许多异步唤醒回调来构建系统，释放运行环境以处理并发操作，同时等待外部事件发生。但是，这只是并发的一种方式。在这篇文章的第二部分，我将比较 JavaScript 的并发模型和那些在 MRI Ruby（with threads and the GIL）、EventMachine（Ruby）、Java（threads）中的不同点。\n\n## 拓展阅读\n\n（略）\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"翻译-The-JavaScript-Event-Loop-Explained","published":1,"updated":"2018-08-25T03:34:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl8wkby8001q5xzxujhzjlf8","content":"<blockquote>\n<p>本文译自 Erin Swenson-Healey 的<a href=\"http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/\" target=\"_blank\" rel=\"noopener\">The JavaScript Event Loop: Explained</a>一文。</p>\n</blockquote>\n<blockquote>\n<p>关键词：</p>\n<ul>\n<li>事件循环 - The Event Loop</li>\n<li>运行环境 - runtime</li>\n<li>调用栈 - call stack</li>\n</ul>\n<p>（译者注：“下面正文开始～”）</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"这篇文章是关于什么的？\"><a class=\"header-anchor\" href=\"#这篇文章是关于什么的？\">¶</a>这篇文章是关于什么的？</h2>\n<h2 id=\"这篇文章是写给谁的？\"><a class=\"header-anchor\" href=\"#这篇文章是写给谁的？\">¶</a>这篇文章是写给谁的？</h2>\n<h2 id=\"无阻塞的-i-o\"><a class=\"header-anchor\" href=\"#无阻塞的-i-o\">¶</a>无阻塞的 I/O</h2>\n<p>（前三小节译者战略性省略）</p>\n<h2 id=\"事件循环-the-event-loop\"><a class=\"header-anchor\" href=\"#事件循环-the-event-loop\">¶</a>事件循环（The Event Loop）</h2>\n<p>调用者（caller）从响应中的解耦是 JavaScript 运行环境能够在等待异步操作完成然后它们的回调执行的同时做一些别的事情的基础。但是，这些回调是保存在内存的哪里呢？它们是以怎样的顺序执行的呢？是什么导致它们被调用的呢？</p>\n<p>JavaScript 运行环境包含一个消息队列（message queue），它存储了一长串待处理的消息以及这些消息相关的回调函数。当一个提供了回调函数的外部事件（例如，发生一个 click 事件或者接收到一个 HTTP 请求的响应）发生时，这些消息就会进入队列。假设一个用户点击了一个按钮，但这个按钮没有绑定任何的回调函数，那么将不会有消息进入队列。</p>\n<p>在一次循环中，队列被轮询下一个消息（每一个轮询（poll）称为一个“列出（tick）”），若此时存在一个消息，那个消息对应的回调就会被执行。</p>\n<p><img src=\"http://blog.carbonfive.com/wp-content/uploads/2013/10/event-loop.png\" alt=\"\"></p>\n<p>这个回调函数（译者注：指 init 函数）的调用在调用栈中是初始帧，并且由于 JavaScript 是单线程的，因此在堆栈上返回所有调用之前暂停进一步的消息的轮询和处理。后续（同步的）函数调用（译者注：指 link.addEventListener 函数）将新的调用帧添加到堆栈（<s>例如，函数 init 调用了函数 changeColor</s>（译者注：括号内的话感觉有误，故删去））。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> link = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  link.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeColor</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.style.color = <span class=\"string\">\"burlywood\"</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">init();</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，一个消息（和一个回调，即 changeColor）将在用户点击 foo 元素、触发一个 <code>onclick</code> 事件的时候进入队列。当这个消息出队列的时候，它的回调函数 changeColor 将被调用。当 changeColor 返回（或者抛出一个错误）的时候，事件循环继续。只要函数 changeColor 还存在，仍是 foo 元素的 onclick 的回调，后续在该元素上的点击会产生更多的消息（并和回调 changeColor 一起）进入队列。</p>\n<h2 id=\"队列中的附加消息\"><a class=\"header-anchor\" href=\"#队列中的附加消息\">¶</a>队列中的附加消息</h2>\n<p>如果你的代码中的一个函数调用是异步的（像是 setTimeout），被提供的回调会在不久的将来的事件循环的某次列出（tick）时，作为一个不同的队列中的消息的一部分最终被执行。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">  setTimeout(g, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"baz\"</span>);</span><br><span class=\"line\">  h();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">h</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"blix\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f();</span><br></pre></td></tr></table></figure>\n<p>由于 setTimeout 的非阻塞特性，它的回调将在至少 0 毫秒的未来执行，而且不会作为本次消息的一部分被处理。在这个例子中，setTimeout 被调用了，传入了一个回调函数 g 和一个 0 毫秒的延迟。当这个指定的时间流逝后（在这个例子中，几乎是立即的），一个单独的消息包含 g 作为回调函数将会进入队列。控制台的结果将会是：“foo”，“baz”，“blix”，然后在事件循环的下一个列出（tick）会是：“bar”。如果在同一个调用帧，setTimeout 被调用了两次——且两次传递相同的参数值——它们的回调将在队列中保持调用时的顺序。</p>\n<h2 id=\"web-workers\"><a class=\"header-anchor\" href=\"#web-workers\">¶</a>Web Workers</h2>\n<p>使用 Web Workers 使你能够分流一个消耗高昂的操作到一个单独的线程去执行，从而解放主线程去做其他事情。workers 区别于初始化它的最初的线程，拥有它自己单独的消息队列、事件循环和独立的内存空间。worker 和主线程之间的沟通是通过消息传递实现的，这看起来很像传统的、事件的（evented）代码——我们已经见过示例。</p>\n<p><img src=\"http://blog.carbonfive.com/wp-content/uploads/2013/10/web-workers.png\" alt=\"\"></p>\n<p>首先，我们的 worker：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我们的 worker 做了一些 CPU 密集型操作</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reportResult = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  pi = SomeLib.computePiToSpecifiedDecimals(e.data);</span><br><span class=\"line\">  postMessage(pi);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">onmessage = reportResult;</span><br></pre></td></tr></table></figure>\n<p>然后，在我们的 HTML 中的 script 标签中存在的主代码块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我们的核心代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> piWorker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"pi_calculator.js\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> logResult = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"PI: \"</span> + e.data);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">piWorker.addEventListener(<span class=\"string\">\"message\"</span>, logResult, <span class=\"literal\">false</span>);</span><br><span class=\"line\">piWorker.postMessage(<span class=\"number\">100000</span>);</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，主线程产生了一个 worker 并且为它的 message 事件注册了一个 logResult 回调函数。在这个 worker 中，它自己的 message 事件注册的事 reportResult 函数。当 worker 线程接收到一个来自主线程的 message 的时候，worker 将一个消息和对应的 reportResult 回调一起放入队列。当出列的时候，一个消息被回传给主线程，在主线程一个新消息连同 logResult 回调一起进入队列。在这种方式下，开发者能将 CPU 密集型操作委托给一个单独的线程，解放主线程去继续处理消息和事件。</p>\n<h2 id=\"关于闭包的一个提醒\"><a class=\"header-anchor\" href=\"#关于闭包的一个提醒\">¶</a>关于闭包的一个提醒</h2>\n<p>JavaScript 对闭包的支持允许你注册这样的回调：当回调执行时，仍可以访问它们被创建时的环境，即使回调的执行创建了一个全新的调用栈。这很有趣：我们的回调是作为一个不同的消息（而不是它们被创建时的那个消息）的一部分被调用的。考虑如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeHeaderDeferred</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> header = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"header\"</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeHeader</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    header.style.color = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">changeHeaderDeferred();</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，changeHeaderDeferred 函数的执行中包含 header 变量。setTimeout 函数被调用，这导致了一个消息（附加 changeHeader 回调）在大约 100 毫秒的未来被添加到消息队列。changeHeaderDeferred 接着返回了 false ，结束了第一个消息的处理——但是 header 变量仍被一个闭包引用，因而没有被垃圾回收机制回收。当第二个消息被处理的时候，changeHeader 函数它仍能访问在该函数作用域外部被声明的 header 变量。一旦第二个消息（changeHeader 函数）处理完了，header 变量就能被垃圾回收机制回收了。</p>\n<h2 id=\"小贴士-takeaways\"><a class=\"header-anchor\" href=\"#小贴士-takeaways\">¶</a>小贴士（Takeaways）</h2>\n<p>JavaScript 的 事件驱动的交互模型 和许多程序员习惯了的 请求-响应模型 不同——但就像你看到的，这并不是在造火箭。使用简单的消息队列和事件循环，JavaScript 使开发者可以围绕许多异步唤醒回调来构建系统，释放运行环境以处理并发操作，同时等待外部事件发生。但是，这只是并发的一种方式。在这篇文章的第二部分，我将比较 JavaScript 的并发模型和那些在 MRI Ruby（with threads and the GIL）、EventMachine（Ruby）、Java（threads）中的不同点。</p>\n<h2 id=\"拓展阅读\"><a class=\"header-anchor\" href=\"#拓展阅读\">¶</a>拓展阅读</h2>\n<p>（略）</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文译自 Erin Swenson-Healey 的<a href=\"http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/\" target=\"_blank\" rel=\"noopener\">The JavaScript Event Loop: Explained</a>一文。</p>\n</blockquote>\n<blockquote>\n<p>关键词：</p>\n<ul>\n<li>事件循环 - The Event Loop</li>\n<li>运行环境 - runtime</li>\n<li>调用栈 - call stack</li>\n</ul>\n<p>（译者注：“下面正文开始～”）</p>\n</blockquote>","more":"<h2 id=\"这篇文章是关于什么的？\"><a class=\"header-anchor\" href=\"#这篇文章是关于什么的？\">¶</a>这篇文章是关于什么的？</h2>\n<h2 id=\"这篇文章是写给谁的？\"><a class=\"header-anchor\" href=\"#这篇文章是写给谁的？\">¶</a>这篇文章是写给谁的？</h2>\n<h2 id=\"无阻塞的-i-o\"><a class=\"header-anchor\" href=\"#无阻塞的-i-o\">¶</a>无阻塞的 I/O</h2>\n<p>（前三小节译者战略性省略）</p>\n<h2 id=\"事件循环-the-event-loop\"><a class=\"header-anchor\" href=\"#事件循环-the-event-loop\">¶</a>事件循环（The Event Loop）</h2>\n<p>调用者（caller）从响应中的解耦是 JavaScript 运行环境能够在等待异步操作完成然后它们的回调执行的同时做一些别的事情的基础。但是，这些回调是保存在内存的哪里呢？它们是以怎样的顺序执行的呢？是什么导致它们被调用的呢？</p>\n<p>JavaScript 运行环境包含一个消息队列（message queue），它存储了一长串待处理的消息以及这些消息相关的回调函数。当一个提供了回调函数的外部事件（例如，发生一个 click 事件或者接收到一个 HTTP 请求的响应）发生时，这些消息就会进入队列。假设一个用户点击了一个按钮，但这个按钮没有绑定任何的回调函数，那么将不会有消息进入队列。</p>\n<p>在一次循环中，队列被轮询下一个消息（每一个轮询（poll）称为一个“列出（tick）”），若此时存在一个消息，那个消息对应的回调就会被执行。</p>\n<p><img src=\"http://blog.carbonfive.com/wp-content/uploads/2013/10/event-loop.png\" alt=\"\"></p>\n<p>这个回调函数（译者注：指 init 函数）的调用在调用栈中是初始帧，并且由于 JavaScript 是单线程的，因此在堆栈上返回所有调用之前暂停进一步的消息的轮询和处理。后续（同步的）函数调用（译者注：指 link.addEventListener 函数）将新的调用帧添加到堆栈（<s>例如，函数 init 调用了函数 changeColor</s>（译者注：括号内的话感觉有误，故删去））。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> link = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  link.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeColor</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.style.color = <span class=\"string\">\"burlywood\"</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">init();</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，一个消息（和一个回调，即 changeColor）将在用户点击 foo 元素、触发一个 <code>onclick</code> 事件的时候进入队列。当这个消息出队列的时候，它的回调函数 changeColor 将被调用。当 changeColor 返回（或者抛出一个错误）的时候，事件循环继续。只要函数 changeColor 还存在，仍是 foo 元素的 onclick 的回调，后续在该元素上的点击会产生更多的消息（并和回调 changeColor 一起）进入队列。</p>\n<h2 id=\"队列中的附加消息\"><a class=\"header-anchor\" href=\"#队列中的附加消息\">¶</a>队列中的附加消息</h2>\n<p>如果你的代码中的一个函数调用是异步的（像是 setTimeout），被提供的回调会在不久的将来的事件循环的某次列出（tick）时，作为一个不同的队列中的消息的一部分最终被执行。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">  setTimeout(g, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"baz\"</span>);</span><br><span class=\"line\">  h();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">h</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"blix\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f();</span><br></pre></td></tr></table></figure>\n<p>由于 setTimeout 的非阻塞特性，它的回调将在至少 0 毫秒的未来执行，而且不会作为本次消息的一部分被处理。在这个例子中，setTimeout 被调用了，传入了一个回调函数 g 和一个 0 毫秒的延迟。当这个指定的时间流逝后（在这个例子中，几乎是立即的），一个单独的消息包含 g 作为回调函数将会进入队列。控制台的结果将会是：“foo”，“baz”，“blix”，然后在事件循环的下一个列出（tick）会是：“bar”。如果在同一个调用帧，setTimeout 被调用了两次——且两次传递相同的参数值——它们的回调将在队列中保持调用时的顺序。</p>\n<h2 id=\"web-workers\"><a class=\"header-anchor\" href=\"#web-workers\">¶</a>Web Workers</h2>\n<p>使用 Web Workers 使你能够分流一个消耗高昂的操作到一个单独的线程去执行，从而解放主线程去做其他事情。workers 区别于初始化它的最初的线程，拥有它自己单独的消息队列、事件循环和独立的内存空间。worker 和主线程之间的沟通是通过消息传递实现的，这看起来很像传统的、事件的（evented）代码——我们已经见过示例。</p>\n<p><img src=\"http://blog.carbonfive.com/wp-content/uploads/2013/10/web-workers.png\" alt=\"\"></p>\n<p>首先，我们的 worker：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我们的 worker 做了一些 CPU 密集型操作</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reportResult = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  pi = SomeLib.computePiToSpecifiedDecimals(e.data);</span><br><span class=\"line\">  postMessage(pi);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">onmessage = reportResult;</span><br></pre></td></tr></table></figure>\n<p>然后，在我们的 HTML 中的 script 标签中存在的主代码块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我们的核心代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> piWorker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"pi_calculator.js\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> logResult = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"PI: \"</span> + e.data);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">piWorker.addEventListener(<span class=\"string\">\"message\"</span>, logResult, <span class=\"literal\">false</span>);</span><br><span class=\"line\">piWorker.postMessage(<span class=\"number\">100000</span>);</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，主线程产生了一个 worker 并且为它的 message 事件注册了一个 logResult 回调函数。在这个 worker 中，它自己的 message 事件注册的事 reportResult 函数。当 worker 线程接收到一个来自主线程的 message 的时候，worker 将一个消息和对应的 reportResult 回调一起放入队列。当出列的时候，一个消息被回传给主线程，在主线程一个新消息连同 logResult 回调一起进入队列。在这种方式下，开发者能将 CPU 密集型操作委托给一个单独的线程，解放主线程去继续处理消息和事件。</p>\n<h2 id=\"关于闭包的一个提醒\"><a class=\"header-anchor\" href=\"#关于闭包的一个提醒\">¶</a>关于闭包的一个提醒</h2>\n<p>JavaScript 对闭包的支持允许你注册这样的回调：当回调执行时，仍可以访问它们被创建时的环境，即使回调的执行创建了一个全新的调用栈。这很有趣：我们的回调是作为一个不同的消息（而不是它们被创建时的那个消息）的一部分被调用的。考虑如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeHeaderDeferred</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> header = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"header\"</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeHeader</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    header.style.color = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">changeHeaderDeferred();</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，changeHeaderDeferred 函数的执行中包含 header 变量。setTimeout 函数被调用，这导致了一个消息（附加 changeHeader 回调）在大约 100 毫秒的未来被添加到消息队列。changeHeaderDeferred 接着返回了 false ，结束了第一个消息的处理——但是 header 变量仍被一个闭包引用，因而没有被垃圾回收机制回收。当第二个消息被处理的时候，changeHeader 函数它仍能访问在该函数作用域外部被声明的 header 变量。一旦第二个消息（changeHeader 函数）处理完了，header 变量就能被垃圾回收机制回收了。</p>\n<h2 id=\"小贴士-takeaways\"><a class=\"header-anchor\" href=\"#小贴士-takeaways\">¶</a>小贴士（Takeaways）</h2>\n<p>JavaScript 的 事件驱动的交互模型 和许多程序员习惯了的 请求-响应模型 不同——但就像你看到的，这并不是在造火箭。使用简单的消息队列和事件循环，JavaScript 使开发者可以围绕许多异步唤醒回调来构建系统，释放运行环境以处理并发操作，同时等待外部事件发生。但是，这只是并发的一种方式。在这篇文章的第二部分，我将比较 JavaScript 的并发模型和那些在 MRI Ruby（with threads and the GIL）、EventMachine（Ruby）、Java（threads）中的不同点。</p>\n<h2 id=\"拓展阅读\"><a class=\"header-anchor\" href=\"#拓展阅读\">¶</a>拓展阅读</h2>\n<p>（略）</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjl8wkbox00045xzxchg0xkc6","tag_id":"cjl8wkbou00025xzxnpfeyrfz","_id":"cjl8wkbp100075xzx8ten2hea"},{"post_id":"cjl8wkbol00005xzxer7tvdnj","tag_id":"cjl8wkbou00025xzxnpfeyrfz","_id":"cjl8wkbp300095xzx4kmubxxp"},{"post_id":"cjl8wkboy00055xzxfj6de82c","tag_id":"cjl8wkbou00025xzxnpfeyrfz","_id":"cjl8wkbp6000c5xzx3dkxtp47"},{"post_id":"cjl8wkbop00015xzxwhb9av5v","tag_id":"cjl8wkbp000065xzxoef72ubt","_id":"cjl8wkbp8000e5xzx4ojf4yul"},{"post_id":"cjl8wkbov00035xzxuijakto9","tag_id":"cjl8wkbou00025xzxnpfeyrfz","_id":"cjl8wkbpc000i5xzx32zb6ehg"},{"post_id":"cjl8wkbp3000a5xzx6yxoq8kz","tag_id":"cjl8wkbp9000g5xzx7u2kxyor","_id":"cjl8wkbpg000m5xzxn30lzzx6"},{"post_id":"cjl8wkbpe000l5xzx67b1nq2o","tag_id":"cjl8wkbpe000k5xzx66rzvq0j","_id":"cjl8wkbph000o5xzxx1stgxm4"},{"post_id":"cjl8wkbp7000d5xzxlikvntqo","tag_id":"cjl8wkbpe000k5xzx66rzvq0j","_id":"cjl8wkbpj000r5xzxr2p6nx4x"},{"post_id":"cjl8wkbpg000n5xzx9e0jjlcl","tag_id":"cjl8wkbpe000k5xzx66rzvq0j","_id":"cjl8wkbpl000t5xzxr49oiis2"},{"post_id":"cjl8wkbpi000q5xzxjun49804","tag_id":"cjl8wkbpe000k5xzx66rzvq0j","_id":"cjl8wkbpm000w5xzxqx5tm3xu"},{"post_id":"cjl8wkbp8000f5xzxcklbr1nd","tag_id":"cjl8wkbpe000k5xzx66rzvq0j","_id":"cjl8wkbpo000y5xzxmkxcm756"},{"post_id":"cjl8wkbpj000s5xzxic9co6p8","tag_id":"cjl8wkbpe000k5xzx66rzvq0j","_id":"cjl8wkbpq00115xzx5hvyez4d"},{"post_id":"cjl8wkbpl000v5xzx5b7jq5be","tag_id":"cjl8wkbpe000k5xzx66rzvq0j","_id":"cjl8wkbpr00135xzxke80qii0"},{"post_id":"cjl8wkbpa000h5xzxgxhpambm","tag_id":"cjl8wkbpe000k5xzx66rzvq0j","_id":"cjl8wkbpt00165xzxwu777lkn"},{"post_id":"cjl8wkbpo00105xzx1cuqgcas","tag_id":"cjl8wkbp9000g5xzx7u2kxyor","_id":"cjl8wkbpu00185xzxm8arq1gh"},{"post_id":"cjl8wkbpc000j5xzx5j9r18pn","tag_id":"cjl8wkbpe000k5xzx66rzvq0j","_id":"cjl8wkbpv001b5xzxj5n1vdap"},{"post_id":"cjl8wkbpn000x5xzx1mxnxwjx","tag_id":"cjl8wkbpr00145xzxlfct9exn","_id":"cjl8wkbpw001c5xzxdks5gmuj"},{"post_id":"cjl8wkbpq00125xzx7hteuowo","tag_id":"cjl8wkbpv001a5xzxgcg8udrl","_id":"cjl8wkbpw001e5xzxp3hc84u6"},{"post_id":"cjl8wkbpt00175xzxi1h2vvim","tag_id":"cjl8wkbpw001d5xzxzh68sup9","_id":"cjl8wkbpx001g5xzxql0kzgui"},{"post_id":"cjl8wkbpu00195xzxfh6g00ha","tag_id":"cjl8wkbpw001f5xzxu37xzyyn","_id":"cjl8wkbpx001i5xzx912cmva5"},{"post_id":"cjl8wkbpu00195xzxfh6g00ha","tag_id":"cjl8wkbpx001h5xzxqb6v1lav","_id":"cjl8wkbpx001j5xzxvvd0r2x2"},{"post_id":"cjl8wkbxz001k5xzxoxveu1d5","tag_id":"cjl8wkbou00025xzxnpfeyrfz","_id":"cjl8wkby5001n5xzxtogfi3w0"},{"post_id":"cjl8wkby8001q5xzxujhzjlf8","tag_id":"cjl8wkbou00025xzxnpfeyrfz","_id":"cjl8wkby9001r5xzxrbqocxie"},{"post_id":"cjl8wkby2001m5xzxvd76qm3x","tag_id":"cjl8wkby7001p5xzxmlfqvzxx","_id":"cjl8wkbyc001v5xzxwqgtpgl2"},{"post_id":"cjl8wkby2001m5xzxvd76qm3x","tag_id":"cjl8wkbpx001h5xzxqb6v1lav","_id":"cjl8wkbyc001w5xzx46262w6z"},{"post_id":"cjl8wkby2001m5xzxvd76qm3x","tag_id":"cjl8wkbya001s5xzx1bcv9n2f","_id":"cjl8wkbyd001y5xzx9uxgul90"},{"post_id":"cjl8wkby2001m5xzxvd76qm3x","tag_id":"cjl8wkbya001t5xzxvdjnocnt","_id":"cjl8wkbyd001z5xzx5fdkodmv"},{"post_id":"cjl8wkby2001m5xzxvd76qm3x","tag_id":"cjl8wkbou00025xzxnpfeyrfz","_id":"cjl8wkbyd00205xzxu41jim44"},{"post_id":"cjl8wkby5001o5xzxa88fv926","tag_id":"cjl8wkbya001t5xzxvdjnocnt","_id":"cjl8wkbyd00215xzxj0e5a7sb"},{"post_id":"cjl8wkby5001o5xzxa88fv926","tag_id":"cjl8wkbou00025xzxnpfeyrfz","_id":"cjl8wkbye00225xzxwectp3ls"},{"post_id":"cjl8wkby5001o5xzxa88fv926","tag_id":"cjl8wkbyc001x5xzxrv1zx8q8","_id":"cjl8wkbye00235xzx97h2dkmu"}],"Tag":[{"name":"JavaScript","_id":"cjl8wkbou00025xzxnpfeyrfz"},{"name":"ECMAScript6","_id":"cjl8wkbp000065xzxoef72ubt"},{"name":"CSS","_id":"cjl8wkbp9000g5xzx7u2kxyor"},{"name":"IFE","_id":"cjl8wkbpe000k5xzx66rzvq0j"},{"name":"algorithm","_id":"cjl8wkbpr00145xzxlfct9exn"},{"name":"Angular","_id":"cjl8wkbpv001a5xzxgcg8udrl"},{"name":"emoji","_id":"cjl8wkbpw001d5xzxzh68sup9"},{"name":"hexo","_id":"cjl8wkbpw001f5xzxu37xzyyn"},{"name":"markdown","_id":"cjl8wkbpx001h5xzxqb6v1lav"},{"name":"anki","_id":"cjl8wkby7001p5xzxmlfqvzxx"},{"name":"sublime","_id":"cjl8wkbya001s5xzx1bcv9n2f"},{"name":"HTML","_id":"cjl8wkbya001t5xzxvdjnocnt"},{"name":"mobile","_id":"cjl8wkbyc001x5xzxrv1zx8q8"}]}}